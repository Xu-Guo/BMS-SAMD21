
DEVICE_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b68  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00008b68  00008b68  00010b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000114  20000000  00008b70  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000c00  20000118  00008c88  00018114  2**3
                  ALLOC
  4 .stack        00002000  20000d18  00009888  00018114  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00018114  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0001813c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00046929  00000000  00000000  00018197  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005f03  00000000  00000000  0005eac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cbcf  00000000  00000000  000649c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000da0  00000000  00000000  00071592  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000eb8  00000000  00000000  00072332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002041d  00000000  00000000  000731ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001784e  00000000  00000000  00093607  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00098a11  00000000  00000000  000aae55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000026e8  00000000  00000000  00143868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002d18 	.word	0x20002d18
       4:	00005185 	.word	0x00005185
       8:	00005181 	.word	0x00005181
       c:	00005181 	.word	0x00005181
	...
      2c:	00005181 	.word	0x00005181
	...
      38:	00005181 	.word	0x00005181
      3c:	00005181 	.word	0x00005181
      40:	00005181 	.word	0x00005181
      44:	00005181 	.word	0x00005181
      48:	00005181 	.word	0x00005181
      4c:	00001c25 	.word	0x00001c25
      50:	00001851 	.word	0x00001851
      54:	00005181 	.word	0x00005181
      58:	00005181 	.word	0x00005181
      5c:	000049d9 	.word	0x000049d9
      60:	00001651 	.word	0x00001651
      64:	000020cd 	.word	0x000020cd
      68:	000020dd 	.word	0x000020dd
      6c:	000020ed 	.word	0x000020ed
      70:	000020fd 	.word	0x000020fd
      74:	0000210d 	.word	0x0000210d
      78:	0000211d 	.word	0x0000211d
      7c:	000034e1 	.word	0x000034e1
      80:	000034f1 	.word	0x000034f1
      84:	00003501 	.word	0x00003501
      88:	00005181 	.word	0x00005181
      8c:	00005181 	.word	0x00005181
      90:	00005181 	.word	0x00005181
      94:	00005181 	.word	0x00005181
      98:	00005181 	.word	0x00005181
      9c:	000005a9 	.word	0x000005a9
      a0:	00005181 	.word	0x00005181
      a4:	00005181 	.word	0x00005181
      a8:	00005181 	.word	0x00005181
      ac:	00005181 	.word	0x00005181
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000118 	.word	0x20000118
      d4:	00000000 	.word	0x00000000
      d8:	00008b70 	.word	0x00008b70

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00008b70 	.word	0x00008b70
     108:	2000011c 	.word	0x2000011c
     10c:	00008b70 	.word	0x00008b70
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN8 ;
     12c:	2408      	movs	r4, #8
     12e:	7304      	strb	r4, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     130:	24c0      	movs	r4, #192	; 0xc0
     132:	0164      	lsls	r4, r4, #5
     134:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     136:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     138:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     13a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     140:	242a      	movs	r4, #42	; 0x2a
     142:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     144:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     146:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     148:	3c06      	subs	r4, #6
     14a:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14c:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14e:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     150:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     152:	232b      	movs	r3, #43	; 0x2b
     154:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     156:	3301      	adds	r3, #1
     158:	54c1      	strb	r1, [r0, r3]
}
     15a:	bd10      	pop	{r4, pc}

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	465f      	mov	r7, fp
     160:	4656      	mov	r6, sl
     162:	464d      	mov	r5, r9
     164:	4644      	mov	r4, r8
     166:	b4f0      	push	{r4, r5, r6, r7}
     168:	b097      	sub	sp, #92	; 0x5c
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16a:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     16c:	4cbf      	ldr	r4, [pc, #764]	; (46c <adc_init+0x310>)
     16e:	6a23      	ldr	r3, [r4, #32]
     170:	2580      	movs	r5, #128	; 0x80
     172:	026d      	lsls	r5, r5, #9
     174:	432b      	orrs	r3, r5
     176:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     178:	780c      	ldrb	r4, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17a:	2305      	movs	r3, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17c:	07e4      	lsls	r4, r4, #31
     17e:	d500      	bpl.n	182 <adc_init+0x26>
     180:	e201      	b.n	586 <adc_init+0x42a>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     182:	7809      	ldrb	r1, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     184:	3317      	adds	r3, #23
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     186:	0789      	lsls	r1, r1, #30
     188:	d500      	bpl.n	18c <adc_init+0x30>
     18a:	e1fc      	b.n	586 <adc_init+0x42a>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     18c:	7853      	ldrb	r3, [r2, #1]
     18e:	7103      	strb	r3, [r0, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     190:	2b00      	cmp	r3, #0
     192:	d000      	beq.n	196 <adc_init+0x3a>
     194:	e1e7      	b.n	566 <adc_init+0x40a>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     196:	49b6      	ldr	r1, [pc, #728]	; (470 <adc_init+0x314>)
     198:	6c0c      	ldr	r4, [r1, #64]	; 0x40
     19a:	3304      	adds	r3, #4
     19c:	4323      	orrs	r3, r4
     19e:	640b      	str	r3, [r1, #64]	; 0x40
     1a0:	e1e1      	b.n	566 <adc_init+0x40a>
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1a2:	7d13      	ldrb	r3, [r2, #20]
     1a4:	2b00      	cmp	r3, #0
     1a6:	d102      	bne.n	1ae <adc_init+0x52>
			!config->freerunning) {
		module_inst->software_trigger = true;
     1a8:	3301      	adds	r3, #1
     1aa:	7743      	strb	r3, [r0, #29]
     1ac:	e001      	b.n	1b2 <adc_init+0x56>
	} else {
		module_inst->software_trigger = false;
     1ae:	2300      	movs	r3, #0
     1b0:	7743      	strb	r3, [r0, #29]
     1b2:	1c16      	adds	r6, r2, #0
     1b4:	4682      	mov	sl, r0
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     1b6:	6803      	ldr	r3, [r0, #0]
     1b8:	469b      	mov	fp, r3

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     1ba:	7813      	ldrb	r3, [r2, #0]
     1bc:	466a      	mov	r2, sp
     1be:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1c0:	201e      	movs	r0, #30
     1c2:	4669      	mov	r1, sp
     1c4:	4bab      	ldr	r3, [pc, #684]	; (474 <adc_init+0x318>)
     1c6:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1c8:	201e      	movs	r0, #30
     1ca:	4bab      	ldr	r3, [pc, #684]	; (478 <adc_init+0x31c>)
     1cc:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     1ce:	232c      	movs	r3, #44	; 0x2c
     1d0:	5cf3      	ldrb	r3, [r6, r3]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d03f      	beq.n	256 <adc_init+0xfa>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1d6:	222b      	movs	r2, #43	; 0x2b
     1d8:	5cb4      	ldrb	r4, [r6, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     1da:	7b32      	ldrb	r2, [r6, #12]
     1dc:	4691      	mov	r9, r2
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     1de:	1912      	adds	r2, r2, r4
     1e0:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     1e2:	18d3      	adds	r3, r2, r3
     1e4:	b2db      	uxtb	r3, r3
     1e6:	4698      	mov	r8, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     1e8:	429a      	cmp	r2, r3
     1ea:	d21e      	bcs.n	22a <adc_init+0xce>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     1ec:	4fa3      	ldr	r7, [pc, #652]	; (47c <adc_init+0x320>)
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     1ee:	250f      	movs	r5, #15
     1f0:	4025      	ands	r5, r4
     1f2:	7b33      	ldrb	r3, [r6, #12]
     1f4:	18ed      	adds	r5, r5, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     1f6:	a802      	add	r0, sp, #8
     1f8:	49a1      	ldr	r1, [pc, #644]	; (480 <adc_init+0x324>)
     1fa:	2250      	movs	r2, #80	; 0x50
     1fc:	47b8      	blx	r7
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     1fe:	2d13      	cmp	r5, #19
     200:	d80c      	bhi.n	21c <adc_init+0xc0>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     202:	00ad      	lsls	r5, r5, #2
     204:	ab02      	add	r3, sp, #8
     206:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     208:	a901      	add	r1, sp, #4
     20a:	2300      	movs	r3, #0
     20c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     20e:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     210:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     212:	3301      	adds	r3, #1
     214:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     216:	b2c0      	uxtb	r0, r0
     218:	4b9a      	ldr	r3, [pc, #616]	; (484 <adc_init+0x328>)
     21a:	4798      	blx	r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     21c:	3401      	adds	r4, #1
     21e:	b2e4      	uxtb	r4, r4
     220:	464b      	mov	r3, r9
     222:	191b      	adds	r3, r3, r4
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     224:	b2db      	uxtb	r3, r3
     226:	4543      	cmp	r3, r8
     228:	d3e1      	bcc.n	1ee <adc_init+0x92>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     22a:	89f4      	ldrh	r4, [r6, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     22c:	a802      	add	r0, sp, #8
     22e:	4994      	ldr	r1, [pc, #592]	; (480 <adc_init+0x324>)
     230:	2250      	movs	r2, #80	; 0x50
     232:	4b92      	ldr	r3, [pc, #584]	; (47c <adc_init+0x320>)
     234:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     236:	2c13      	cmp	r4, #19
     238:	d837      	bhi.n	2aa <adc_init+0x14e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     23a:	00a4      	lsls	r4, r4, #2
     23c:	ab02      	add	r3, sp, #8
     23e:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     240:	a901      	add	r1, sp, #4
     242:	2300      	movs	r3, #0
     244:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     246:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     248:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     24a:	3301      	adds	r3, #1
     24c:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     24e:	b2c0      	uxtb	r0, r0
     250:	4b8c      	ldr	r3, [pc, #560]	; (484 <adc_init+0x328>)
     252:	4798      	blx	r3
     254:	e029      	b.n	2aa <adc_init+0x14e>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     256:	7b34      	ldrb	r4, [r6, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     258:	a802      	add	r0, sp, #8
     25a:	4989      	ldr	r1, [pc, #548]	; (480 <adc_init+0x324>)
     25c:	2250      	movs	r2, #80	; 0x50
     25e:	4b87      	ldr	r3, [pc, #540]	; (47c <adc_init+0x320>)
     260:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     262:	2c13      	cmp	r4, #19
     264:	d80c      	bhi.n	280 <adc_init+0x124>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     266:	00a4      	lsls	r4, r4, #2
     268:	ab02      	add	r3, sp, #8
     26a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     26c:	a901      	add	r1, sp, #4
     26e:	2300      	movs	r3, #0
     270:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     272:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     274:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     276:	3301      	adds	r3, #1
     278:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     27a:	b2c0      	uxtb	r0, r0
     27c:	4b81      	ldr	r3, [pc, #516]	; (484 <adc_init+0x328>)
     27e:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     280:	89f4      	ldrh	r4, [r6, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     282:	a802      	add	r0, sp, #8
     284:	497e      	ldr	r1, [pc, #504]	; (480 <adc_init+0x324>)
     286:	2250      	movs	r2, #80	; 0x50
     288:	4b7c      	ldr	r3, [pc, #496]	; (47c <adc_init+0x320>)
     28a:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     28c:	2c13      	cmp	r4, #19
     28e:	d80c      	bhi.n	2aa <adc_init+0x14e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     290:	00a4      	lsls	r4, r4, #2
     292:	ab02      	add	r3, sp, #8
     294:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     296:	a901      	add	r1, sp, #4
     298:	2300      	movs	r3, #0
     29a:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     29c:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     29e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2a0:	3301      	adds	r3, #1
     2a2:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     2a4:	b2c0      	uxtb	r0, r0
     2a6:	4b77      	ldr	r3, [pc, #476]	; (484 <adc_init+0x328>)
     2a8:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2aa:	7d73      	ldrb	r3, [r6, #21]
     2ac:	009b      	lsls	r3, r3, #2
     2ae:	b2db      	uxtb	r3, r3
     2b0:	465a      	mov	r2, fp
     2b2:	7013      	strb	r3, [r2, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2b4:	7db3      	ldrb	r3, [r6, #22]
     2b6:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     2b8:	7872      	ldrb	r2, [r6, #1]
     2ba:	4313      	orrs	r3, r2
     2bc:	b2db      	uxtb	r3, r3
     2be:	465a      	mov	r2, fp
     2c0:	7053      	strb	r3, [r2, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     2c2:	7933      	ldrb	r3, [r6, #4]
     2c4:	2b34      	cmp	r3, #52	; 0x34
     2c6:	d900      	bls.n	2ca <adc_init+0x16e>
     2c8:	e14b      	b.n	562 <adc_init+0x406>
     2ca:	009b      	lsls	r3, r3, #2
     2cc:	4a6e      	ldr	r2, [pc, #440]	; (488 <adc_init+0x32c>)
     2ce:	58d3      	ldr	r3, [r2, r3]
     2d0:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2d2:	2104      	movs	r1, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2d4:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     2d6:	2202      	movs	r2, #2
     2d8:	e01a      	b.n	310 <adc_init+0x1b4>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     2da:	7c72      	ldrb	r2, [r6, #17]
		accumulate = config->accumulate_samples;
     2dc:	7c31      	ldrb	r1, [r6, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2de:	2010      	movs	r0, #16
     2e0:	e016      	b.n	310 <adc_init+0x1b4>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     2e2:	2106      	movs	r1, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2e4:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     2e6:	2201      	movs	r2, #1
     2e8:	e012      	b.n	310 <adc_init+0x1b4>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     2ea:	2108      	movs	r1, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2ec:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     2ee:	2200      	movs	r2, #0
     2f0:	e00e      	b.n	310 <adc_init+0x1b4>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2f2:	2100      	movs	r1, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     2f4:	2030      	movs	r0, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     2f6:	2200      	movs	r2, #0
     2f8:	e00a      	b.n	310 <adc_init+0x1b4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2fa:	2100      	movs	r1, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     2fc:	2020      	movs	r0, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     2fe:	2200      	movs	r2, #0
     300:	e006      	b.n	310 <adc_init+0x1b4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     302:	2100      	movs	r1, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     304:	2000      	movs	r0, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     306:	2200      	movs	r2, #0
     308:	e002      	b.n	310 <adc_init+0x1b4>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     30a:	2102      	movs	r1, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     30c:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     30e:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     310:	0112      	lsls	r2, r2, #4
     312:	2370      	movs	r3, #112	; 0x70
     314:	4013      	ands	r3, r2
     316:	430b      	orrs	r3, r1
     318:	465a      	mov	r2, fp
     31a:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     31c:	7df2      	ldrb	r2, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     31e:	2317      	movs	r3, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     320:	2a3f      	cmp	r2, #63	; 0x3f
     322:	d900      	bls.n	326 <adc_init+0x1ca>
     324:	e12f      	b.n	586 <adc_init+0x42a>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     326:	465b      	mov	r3, fp
     328:	70da      	strb	r2, [r3, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     32a:	4653      	mov	r3, sl
     32c:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     32e:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     330:	b25b      	sxtb	r3, r3
     332:	2b00      	cmp	r3, #0
     334:	dbfb      	blt.n	32e <adc_init+0x1d2>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     336:	7cf2      	ldrb	r2, [r6, #19]
     338:	8873      	ldrh	r3, [r6, #2]
     33a:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     33c:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     33e:	5cb2      	ldrb	r2, [r6, r2]
     340:	00d2      	lsls	r2, r2, #3
     342:	4313      	orrs	r3, r2
     344:	7d32      	ldrb	r2, [r6, #20]
     346:	0092      	lsls	r2, r2, #2
     348:	4313      	orrs	r3, r2
     34a:	7cb2      	ldrb	r2, [r6, #18]
     34c:	0052      	lsls	r2, r2, #1
     34e:	4313      	orrs	r3, r2
     350:	4303      	orrs	r3, r0
     352:	465a      	mov	r2, fp
     354:	8093      	strh	r3, [r2, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     356:	7e32      	ldrb	r2, [r6, #24]
     358:	2a00      	cmp	r2, #0
     35a:	d020      	beq.n	39e <adc_init+0x242>
		switch (resolution) {
     35c:	2810      	cmp	r0, #16
     35e:	d063      	beq.n	428 <adc_init+0x2cc>
     360:	d802      	bhi.n	368 <adc_init+0x20c>
     362:	2800      	cmp	r0, #0
     364:	d03f      	beq.n	3e6 <adc_init+0x28a>
     366:	e01a      	b.n	39e <adc_init+0x242>
     368:	2820      	cmp	r0, #32
     36a:	d01b      	beq.n	3a4 <adc_init+0x248>
     36c:	2830      	cmp	r0, #48	; 0x30
     36e:	d116      	bne.n	39e <adc_init+0x242>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     370:	7cf3      	ldrb	r3, [r6, #19]
     372:	2b00      	cmp	r3, #0
     374:	d00a      	beq.n	38c <adc_init+0x230>
					(config->window.window_lower_value > 127 ||
     376:	69f1      	ldr	r1, [r6, #28]
     378:	3180      	adds	r1, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     37a:	2317      	movs	r3, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     37c:	29ff      	cmp	r1, #255	; 0xff
     37e:	d900      	bls.n	382 <adc_init+0x226>
     380:	e101      	b.n	586 <adc_init+0x42a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     382:	6a31      	ldr	r1, [r6, #32]
     384:	3180      	adds	r1, #128	; 0x80
     386:	29ff      	cmp	r1, #255	; 0xff
     388:	d900      	bls.n	38c <adc_init+0x230>
     38a:	e0fc      	b.n	586 <adc_init+0x42a>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     38c:	2317      	movs	r3, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     38e:	69f1      	ldr	r1, [r6, #28]
     390:	29ff      	cmp	r1, #255	; 0xff
     392:	dd00      	ble.n	396 <adc_init+0x23a>
     394:	e0f7      	b.n	586 <adc_init+0x42a>
     396:	6a31      	ldr	r1, [r6, #32]
     398:	29ff      	cmp	r1, #255	; 0xff
     39a:	dd00      	ble.n	39e <adc_init+0x242>
     39c:	e0f3      	b.n	586 <adc_init+0x42a>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     39e:	4653      	mov	r3, sl
     3a0:	6819      	ldr	r1, [r3, #0]
     3a2:	e079      	b.n	498 <adc_init+0x33c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     3a4:	7cf3      	ldrb	r3, [r6, #19]
     3a6:	2b00      	cmp	r3, #0
     3a8:	d012      	beq.n	3d0 <adc_init+0x274>
					(config->window.window_lower_value > 511 ||
     3aa:	69f3      	ldr	r3, [r6, #28]
     3ac:	2080      	movs	r0, #128	; 0x80
     3ae:	0080      	lsls	r0, r0, #2
     3b0:	4684      	mov	ip, r0
     3b2:	4463      	add	r3, ip
     3b4:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3b6:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     3b8:	4834      	ldr	r0, [pc, #208]	; (48c <adc_init+0x330>)
     3ba:	4281      	cmp	r1, r0
     3bc:	d900      	bls.n	3c0 <adc_init+0x264>
     3be:	e0e2      	b.n	586 <adc_init+0x42a>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     3c0:	6a33      	ldr	r3, [r6, #32]
     3c2:	4463      	add	r3, ip
     3c4:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3c6:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     3c8:	4830      	ldr	r0, [pc, #192]	; (48c <adc_init+0x330>)
     3ca:	4281      	cmp	r1, r0
     3cc:	d900      	bls.n	3d0 <adc_init+0x274>
     3ce:	e0da      	b.n	586 <adc_init+0x42a>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3d0:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     3d2:	492e      	ldr	r1, [pc, #184]	; (48c <adc_init+0x330>)
     3d4:	69f0      	ldr	r0, [r6, #28]
     3d6:	4288      	cmp	r0, r1
     3d8:	dd00      	ble.n	3dc <adc_init+0x280>
     3da:	e0d4      	b.n	586 <adc_init+0x42a>
     3dc:	6a30      	ldr	r0, [r6, #32]
     3de:	4288      	cmp	r0, r1
     3e0:	dd00      	ble.n	3e4 <adc_init+0x288>
     3e2:	e0d0      	b.n	586 <adc_init+0x42a>
     3e4:	e7db      	b.n	39e <adc_init+0x242>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     3e6:	7cf3      	ldrb	r3, [r6, #19]
     3e8:	2b00      	cmp	r3, #0
     3ea:	d012      	beq.n	412 <adc_init+0x2b6>
					(config->window.window_lower_value > 2047 ||
     3ec:	69f3      	ldr	r3, [r6, #28]
     3ee:	2080      	movs	r0, #128	; 0x80
     3f0:	0100      	lsls	r0, r0, #4
     3f2:	4684      	mov	ip, r0
     3f4:	4463      	add	r3, ip
     3f6:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3f8:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     3fa:	4825      	ldr	r0, [pc, #148]	; (490 <adc_init+0x334>)
     3fc:	4281      	cmp	r1, r0
     3fe:	d900      	bls.n	402 <adc_init+0x2a6>
     400:	e0c1      	b.n	586 <adc_init+0x42a>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     402:	6a33      	ldr	r3, [r6, #32]
     404:	4463      	add	r3, ip
     406:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     408:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     40a:	4821      	ldr	r0, [pc, #132]	; (490 <adc_init+0x334>)
     40c:	4281      	cmp	r1, r0
     40e:	d900      	bls.n	412 <adc_init+0x2b6>
     410:	e0b9      	b.n	586 <adc_init+0x42a>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     412:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     414:	491e      	ldr	r1, [pc, #120]	; (490 <adc_init+0x334>)
     416:	69f0      	ldr	r0, [r6, #28]
     418:	4288      	cmp	r0, r1
     41a:	dd00      	ble.n	41e <adc_init+0x2c2>
     41c:	e0b3      	b.n	586 <adc_init+0x42a>
     41e:	6a30      	ldr	r0, [r6, #32]
     420:	4288      	cmp	r0, r1
     422:	dd00      	ble.n	426 <adc_init+0x2ca>
     424:	e0af      	b.n	586 <adc_init+0x42a>
     426:	e7ba      	b.n	39e <adc_init+0x242>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     428:	7cf3      	ldrb	r3, [r6, #19]
     42a:	2b00      	cmp	r3, #0
     42c:	d012      	beq.n	454 <adc_init+0x2f8>
					(config->window.window_lower_value > 32767 ||
     42e:	69f3      	ldr	r3, [r6, #28]
     430:	2080      	movs	r0, #128	; 0x80
     432:	0200      	lsls	r0, r0, #8
     434:	4684      	mov	ip, r0
     436:	4463      	add	r3, ip
     438:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     43a:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     43c:	4815      	ldr	r0, [pc, #84]	; (494 <adc_init+0x338>)
     43e:	4281      	cmp	r1, r0
     440:	d900      	bls.n	444 <adc_init+0x2e8>
     442:	e0a0      	b.n	586 <adc_init+0x42a>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     444:	6a33      	ldr	r3, [r6, #32]
     446:	4463      	add	r3, ip
     448:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     44a:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     44c:	4811      	ldr	r0, [pc, #68]	; (494 <adc_init+0x338>)
     44e:	4281      	cmp	r1, r0
     450:	d900      	bls.n	454 <adc_init+0x2f8>
     452:	e098      	b.n	586 <adc_init+0x42a>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     454:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     456:	490f      	ldr	r1, [pc, #60]	; (494 <adc_init+0x338>)
     458:	69f0      	ldr	r0, [r6, #28]
     45a:	4288      	cmp	r0, r1
     45c:	dd00      	ble.n	460 <adc_init+0x304>
     45e:	e092      	b.n	586 <adc_init+0x42a>
     460:	6a30      	ldr	r0, [r6, #32]
     462:	4288      	cmp	r0, r1
     464:	dd00      	ble.n	468 <adc_init+0x30c>
     466:	e08e      	b.n	586 <adc_init+0x42a>
     468:	e799      	b.n	39e <adc_init+0x242>
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	40000400 	.word	0x40000400
     470:	40000800 	.word	0x40000800
     474:	00002cc9 	.word	0x00002cc9
     478:	00002c3d 	.word	0x00002c3d
     47c:	000087fd 	.word	0x000087fd
     480:	000088f4 	.word	0x000088f4
     484:	00002dc1 	.word	0x00002dc1
     488:	00008820 	.word	0x00008820
     48c:	000003ff 	.word	0x000003ff
     490:	00000fff 	.word	0x00000fff
     494:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     498:	7e4b      	ldrb	r3, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     49a:	b25b      	sxtb	r3, r3
     49c:	2b00      	cmp	r3, #0
     49e:	dbfb      	blt.n	498 <adc_init+0x33c>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     4a0:	465b      	mov	r3, fp
     4a2:	721a      	strb	r2, [r3, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     4a4:	4653      	mov	r3, sl
     4a6:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4a8:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     4aa:	b25b      	sxtb	r3, r3
     4ac:	2b00      	cmp	r3, #0
     4ae:	dbfb      	blt.n	4a8 <adc_init+0x34c>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     4b0:	8bb3      	ldrh	r3, [r6, #28]
     4b2:	465a      	mov	r2, fp
     4b4:	8393      	strh	r3, [r2, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     4b6:	4653      	mov	r3, sl
     4b8:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4ba:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     4bc:	b25b      	sxtb	r3, r3
     4be:	2b00      	cmp	r3, #0
     4c0:	dbfb      	blt.n	4ba <adc_init+0x35e>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     4c2:	8c33      	ldrh	r3, [r6, #32]
     4c4:	465a      	mov	r2, fp
     4c6:	8413      	strh	r3, [r2, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     4c8:	232c      	movs	r3, #44	; 0x2c
     4ca:	5cf2      	ldrb	r2, [r6, r3]
	if (inputs_to_scan > 0) {
     4cc:	2a00      	cmp	r2, #0
     4ce:	d004      	beq.n	4da <adc_init+0x37e>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     4d0:	3a01      	subs	r2, #1
     4d2:	b2d2      	uxtb	r2, r2
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     4d4:	3b15      	subs	r3, #21
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     4d6:	2a0f      	cmp	r2, #15
     4d8:	d855      	bhi.n	586 <adc_init+0x42a>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     4da:	232b      	movs	r3, #43	; 0x2b
     4dc:	5cf1      	ldrb	r1, [r6, r3]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     4de:	3b14      	subs	r3, #20
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     4e0:	290f      	cmp	r1, #15
     4e2:	d850      	bhi.n	586 <adc_init+0x42a>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     4e4:	4653      	mov	r3, sl
     4e6:	6818      	ldr	r0, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4e8:	7e43      	ldrb	r3, [r0, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
     4ea:	b25b      	sxtb	r3, r3
     4ec:	2b00      	cmp	r3, #0
     4ee:	dbfb      	blt.n	4e8 <adc_init+0x38c>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4f0:	89f0      	ldrh	r0, [r6, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     4f2:	7b33      	ldrb	r3, [r6, #12]
     4f4:	4303      	orrs	r3, r0
     4f6:	68b0      	ldr	r0, [r6, #8]
     4f8:	4303      	orrs	r3, r0
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
     4fa:	0509      	lsls	r1, r1, #20
     4fc:	4319      	orrs	r1, r3
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4fe:	0412      	lsls	r2, r2, #16
			config->negative_input |
     500:	430a      	orrs	r2, r1
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     502:	465b      	mov	r3, fp
     504:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     506:	232a      	movs	r3, #42	; 0x2a
     508:	5cf3      	ldrb	r3, [r6, r3]
     50a:	465a      	mov	r2, fp
     50c:	7513      	strb	r3, [r2, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     50e:	230f      	movs	r3, #15
     510:	7593      	strb	r3, [r2, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     512:	3315      	adds	r3, #21
     514:	5cf3      	ldrb	r3, [r6, r3]
     516:	2b00      	cmp	r3, #0
     518:	d011      	beq.n	53e <adc_init+0x3e2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     51a:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
     51c:	2317      	movs	r3, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     51e:	491e      	ldr	r1, [pc, #120]	; (598 <adc_init+0x43c>)
     520:	428a      	cmp	r2, r1
     522:	d830      	bhi.n	586 <adc_init+0x42a>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     524:	465b      	mov	r3, fp
     526:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     528:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     52a:	2380      	movs	r3, #128	; 0x80
     52c:	011b      	lsls	r3, r3, #4
     52e:	18ca      	adds	r2, r1, r3
     530:	b292      	uxth	r2, r2
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     532:	2317      	movs	r3, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     534:	4818      	ldr	r0, [pc, #96]	; (598 <adc_init+0x43c>)
     536:	4282      	cmp	r2, r0
     538:	d825      	bhi.n	586 <adc_init+0x42a>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     53a:	465b      	mov	r3, fp
     53c:	84d9      	strh	r1, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     53e:	4b17      	ldr	r3, [pc, #92]	; (59c <adc_init+0x440>)
     540:	6819      	ldr	r1, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     542:	0149      	lsls	r1, r1, #5
     544:	23e0      	movs	r3, #224	; 0xe0
     546:	00db      	lsls	r3, r3, #3
     548:	4019      	ands	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     54a:	4b15      	ldr	r3, [pc, #84]	; (5a0 <adc_init+0x444>)
     54c:	685a      	ldr	r2, [r3, #4]
     54e:	0150      	lsls	r0, r2, #5
     550:	681a      	ldr	r2, [r3, #0]
     552:	0ed3      	lsrs	r3, r2, #27
     554:	4303      	orrs	r3, r0
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     556:	b2db      	uxtb	r3, r3
     558:	430b      	orrs	r3, r1
     55a:	465a      	mov	r2, fp
     55c:	8513      	strh	r3, [r2, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     55e:	2300      	movs	r3, #0
     560:	e011      	b.n	586 <adc_init+0x42a>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     562:	2317      	movs	r3, #23
     564:	e00f      	b.n	586 <adc_init+0x42a>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     566:	2300      	movs	r3, #0
     568:	6083      	str	r3, [r0, #8]
     56a:	60c3      	str	r3, [r0, #12]
     56c:	6103      	str	r3, [r0, #16]
	};

	module_inst->registered_callback_mask = 0;
     56e:	7683      	strb	r3, [r0, #26]
	module_inst->enabled_callback_mask = 0;
     570:	76c3      	strb	r3, [r0, #27]
	module_inst->remaining_conversions = 0;
     572:	8303      	strh	r3, [r0, #24]
	module_inst->job_status = STATUS_OK;
     574:	7703      	strb	r3, [r0, #28]

	_adc_instances[0] = module_inst;
     576:	4b0b      	ldr	r3, [pc, #44]	; (5a4 <adc_init+0x448>)
     578:	6018      	str	r0, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     57a:	232a      	movs	r3, #42	; 0x2a
     57c:	5cd3      	ldrb	r3, [r2, r3]
     57e:	2b00      	cmp	r3, #0
     580:	d100      	bne.n	584 <adc_init+0x428>
     582:	e60e      	b.n	1a2 <adc_init+0x46>
     584:	e613      	b.n	1ae <adc_init+0x52>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     586:	1c18      	adds	r0, r3, #0
     588:	b017      	add	sp, #92	; 0x5c
     58a:	bc3c      	pop	{r2, r3, r4, r5}
     58c:	4690      	mov	r8, r2
     58e:	4699      	mov	r9, r3
     590:	46a2      	mov	sl, r4
     592:	46ab      	mov	fp, r5
     594:	bdf0      	pop	{r4, r5, r6, r7, pc}
     596:	46c0      	nop			; (mov r8, r8)
     598:	00000fff 	.word	0x00000fff
     59c:	00806024 	.word	0x00806024
     5a0:	00806020 	.word	0x00806020
     5a4:	200007ec 	.word	0x200007ec

000005a8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     5a8:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     5aa:	4b2d      	ldr	r3, [pc, #180]	; (660 <ADC_Handler+0xb8>)
     5ac:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     5ae:	6823      	ldr	r3, [r4, #0]
     5b0:	7e1d      	ldrb	r5, [r3, #24]
     5b2:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     5b4:	07ea      	lsls	r2, r5, #31
     5b6:	d535      	bpl.n	624 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     5b8:	7ee2      	ldrb	r2, [r4, #27]
     5ba:	07d2      	lsls	r2, r2, #31
     5bc:	d532      	bpl.n	624 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     5be:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     5c0:	07d2      	lsls	r2, r2, #31
     5c2:	d52f      	bpl.n	624 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     5c4:	2201      	movs	r2, #1
     5c6:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     5c8:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5ca:	7e53      	ldrb	r3, [r2, #25]

			while (adc_is_syncing(module)) {
     5cc:	b25b      	sxtb	r3, r3
     5ce:	2b00      	cmp	r3, #0
     5d0:	dbfb      	blt.n	5ca <ADC_Handler+0x22>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     5d2:	6961      	ldr	r1, [r4, #20]
     5d4:	1c8b      	adds	r3, r1, #2
     5d6:	6163      	str	r3, [r4, #20]
     5d8:	8b53      	ldrh	r3, [r2, #26]
     5da:	b29b      	uxth	r3, r3
     5dc:	800b      	strh	r3, [r1, #0]

			if (--module->remaining_conversions > 0) {
     5de:	8b23      	ldrh	r3, [r4, #24]
     5e0:	3b01      	subs	r3, #1
     5e2:	b29b      	uxth	r3, r3
     5e4:	8323      	strh	r3, [r4, #24]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d011      	beq.n	60e <ADC_Handler+0x66>
				if (module->software_trigger == true) {
     5ea:	7f63      	ldrb	r3, [r4, #29]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d019      	beq.n	624 <ADC_Handler+0x7c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     5f0:	6822      	ldr	r2, [r4, #0]
     5f2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     5f4:	b25b      	sxtb	r3, r3
     5f6:	2b00      	cmp	r3, #0
     5f8:	dbfb      	blt.n	5f2 <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     5fa:	7b11      	ldrb	r1, [r2, #12]
     5fc:	2302      	movs	r3, #2
     5fe:	430b      	orrs	r3, r1
     600:	7313      	strb	r3, [r2, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     602:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     604:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     606:	b25b      	sxtb	r3, r3
     608:	2b00      	cmp	r3, #0
     60a:	dbfb      	blt.n	604 <ADC_Handler+0x5c>
     60c:	e00a      	b.n	624 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     60e:	7f23      	ldrb	r3, [r4, #28]
     610:	2b05      	cmp	r3, #5
     612:	d107      	bne.n	624 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     614:	2300      	movs	r3, #0
     616:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     618:	3301      	adds	r3, #1
     61a:	6822      	ldr	r2, [r4, #0]
     61c:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     61e:	1c20      	adds	r0, r4, #0
     620:	68a3      	ldr	r3, [r4, #8]
     622:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     624:	076b      	lsls	r3, r5, #29
     626:	d50b      	bpl.n	640 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     628:	2304      	movs	r3, #4
     62a:	6822      	ldr	r2, [r4, #0]
     62c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     62e:	7ee3      	ldrb	r3, [r4, #27]
     630:	079b      	lsls	r3, r3, #30
     632:	d505      	bpl.n	640 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     634:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     636:	079b      	lsls	r3, r3, #30
     638:	d502      	bpl.n	640 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     63a:	1c20      	adds	r0, r4, #0
     63c:	68e3      	ldr	r3, [r4, #12]
     63e:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     640:	07ab      	lsls	r3, r5, #30
     642:	d50b      	bpl.n	65c <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     644:	2302      	movs	r3, #2
     646:	6822      	ldr	r2, [r4, #0]
     648:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     64a:	7ee3      	ldrb	r3, [r4, #27]
     64c:	075b      	lsls	r3, r3, #29
     64e:	d505      	bpl.n	65c <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     650:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     652:	075b      	lsls	r3, r3, #29
     654:	d502      	bpl.n	65c <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     656:	6923      	ldr	r3, [r4, #16]
     658:	1c20      	adds	r0, r4, #0
     65a:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     65c:	bd38      	pop	{r3, r4, r5, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	200007ec 	.word	0x200007ec

00000664 <ui_wakeup_handler>:
 * Note:
 * This interrupt is enable when the USB host enable remote wakeup feature
 * This interrupt wakeup the CPU if this one is in idle mode
 */
static void ui_wakeup_handler(void)
{
     664:	b508      	push	{r3, lr}
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
     666:	4b01      	ldr	r3, [pc, #4]	; (66c <ui_wakeup_handler+0x8>)
     668:	4798      	blx	r3
	/* It is a wakeup then send wakeup USB */
	udc_remotewakeup();
	//LED_On(LED_0_PIN);
}
     66a:	bd08      	pop	{r3, pc}
     66c:	000040e1 	.word	0x000040e1

00000670 <ui_init>:
#endif

void ui_init(void)
{
     670:	b510      	push	{r4, lr}
     672:	b084      	sub	sp, #16
#ifdef USB_DEVICE_LPM_SUPPORT
	struct extint_chan_conf config_extint_chan;

	extint_chan_get_config_defaults(&config_extint_chan);
     674:	ac01      	add	r4, sp, #4
     676:	1c20      	adds	r0, r4, #0
     678:	4b0c      	ldr	r3, [pc, #48]	; (6ac <ui_init+0x3c>)
     67a:	4798      	blx	r3

	config_extint_chan.gpio_pin            = BUTTON_0_EIC_PIN;
     67c:	230f      	movs	r3, #15
     67e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux        = BUTTON_0_EIC_MUX;
     680:	2300      	movs	r3, #0
     682:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull       = EXTINT_PULL_UP;
     684:	3301      	adds	r3, #1
     686:	7223      	strb	r3, [r4, #8]
	config_extint_chan.filter_input_signal = true;
     688:	72a3      	strb	r3, [r4, #10]
	config_extint_chan.detection_criteria  = EXTINT_DETECT_FALLING;
     68a:	3301      	adds	r3, #1
     68c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
     68e:	200f      	movs	r0, #15
     690:	1c21      	adds	r1, r4, #0
     692:	4b07      	ldr	r3, [pc, #28]	; (6b0 <ui_init+0x40>)
     694:	4798      	blx	r3
	extint_register_callback(ui_wakeup_handler, BUTTON_0_EIC_LINE,
     696:	4807      	ldr	r0, [pc, #28]	; (6b4 <ui_init+0x44>)
     698:	210f      	movs	r1, #15
     69a:	2200      	movs	r2, #0
     69c:	4b06      	ldr	r3, [pc, #24]	; (6b8 <ui_init+0x48>)
     69e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     6a0:	200f      	movs	r0, #15
     6a2:	2100      	movs	r1, #0
     6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <ui_init+0x4c>)
     6a6:	4798      	blx	r3
#endif

	/* Initialize LEDs */
	//LED_Off(LED_0_PIN);
}
     6a8:	b004      	add	sp, #16
     6aa:	bd10      	pop	{r4, pc}
     6ac:	0000193d 	.word	0x0000193d
     6b0:	00001951 	.word	0x00001951
     6b4:	00000665 	.word	0x00000665
     6b8:	000017e5 	.word	0x000017e5
     6bc:	00001811 	.word	0x00001811

000006c0 <ui_powerdown>:

void ui_powerdown(void)
{
	//LED_Off(LED_0_PIN);
}
     6c0:	4770      	bx	lr
     6c2:	46c0      	nop			; (mov r8, r8)

000006c4 <ui_wakeup_enable>:

#ifdef USB_DEVICE_LPM_SUPPORT
void ui_wakeup_enable(void)
{
     6c4:	b508      	push	{r3, lr}
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     6c6:	200f      	movs	r0, #15
     6c8:	2100      	movs	r1, #0
     6ca:	4b01      	ldr	r3, [pc, #4]	; (6d0 <ui_wakeup_enable+0xc>)
     6cc:	4798      	blx	r3
}
     6ce:	bd08      	pop	{r3, pc}
     6d0:	00001811 	.word	0x00001811

000006d4 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
     6d4:	b508      	push	{r3, lr}
	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
     6d6:	200f      	movs	r0, #15
     6d8:	2100      	movs	r1, #0
     6da:	4b01      	ldr	r3, [pc, #4]	; (6e0 <ui_wakeup_disable+0xc>)
     6dc:	4798      	blx	r3
}
     6de:	bd08      	pop	{r3, pc}
     6e0:	00001831 	.word	0x00001831

000006e4 <ui_wakeup>:
#endif // #ifdef USB_DEVICE_LPM_SUPPORT

void ui_wakeup(void)
{
	//LED_On(LED_0_PIN);
}
     6e4:	4770      	bx	lr
     6e6:	46c0      	nop			; (mov r8, r8)

000006e8 <ui_com_open>:


void ui_com_open(uint8_t port)
{
	UNUSED(port);
}
     6e8:	4770      	bx	lr
     6ea:	46c0      	nop			; (mov r8, r8)

000006ec <ui_com_close>:


void ui_com_close(uint8_t port)
{
	UNUSED(port);
}
     6ec:	4770      	bx	lr
     6ee:	46c0      	nop			; (mov r8, r8)

000006f0 <ui_com_rx_start>:


void ui_com_rx_start(void)
{

}
     6f0:	4770      	bx	lr
     6f2:	46c0      	nop			; (mov r8, r8)

000006f4 <ui_process>:
		//LED_On(LED_0_PIN);
	}
	if ((framenumber % 1000) == 500) {
		//LED_Off(LED_0_PIN);
	}
}
     6f4:	4770      	bx	lr
     6f6:	46c0      	nop			; (mov r8, r8)

000006f8 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     6f8:	4a02      	ldr	r2, [pc, #8]	; (704 <udi_cdc_comm_disable+0xc>)
     6fa:	7813      	ldrb	r3, [r2, #0]
     6fc:	3b01      	subs	r3, #1
     6fe:	b2db      	uxtb	r3, r3
     700:	7013      	strb	r3, [r2, #0]
}
     702:	4770      	bx	lr
     704:	200003cc 	.word	0x200003cc

00000708 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     708:	2000      	movs	r0, #0
     70a:	4770      	bx	lr

0000070c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     70c:	2000      	movs	r0, #0
     70e:	4770      	bx	lr

00000710 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
     710:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
     712:	2000      	movs	r0, #0
     714:	4901      	ldr	r1, [pc, #4]	; (71c <udi_cdc_line_coding_received+0xc>)
     716:	4b02      	ldr	r3, [pc, #8]	; (720 <udi_cdc_line_coding_received+0x10>)
     718:	4798      	blx	r3
}
     71a:	bd08      	pop	{r3, pc}
     71c:	20000134 	.word	0x20000134
     720:	00006081 	.word	0x00006081

00000724 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
     724:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
     726:	2200      	movs	r2, #0
     728:	4b12      	ldr	r3, [pc, #72]	; (774 <udi_cdc_comm_enable+0x50>)
     72a:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
     72c:	2000      	movs	r0, #0
     72e:	4b12      	ldr	r3, [pc, #72]	; (778 <udi_cdc_comm_enable+0x54>)
     730:	801a      	strh	r2, [r3, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
     732:	4b12      	ldr	r3, [pc, #72]	; (77c <udi_cdc_comm_enable+0x58>)
     734:	21a1      	movs	r1, #161	; 0xa1
     736:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     738:	3981      	subs	r1, #129	; 0x81
     73a:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     73c:	805a      	strh	r2, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     73e:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     740:	391e      	subs	r1, #30
     742:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     744:	811a      	strh	r2, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     746:	490e      	ldr	r1, [pc, #56]	; (780 <udi_cdc_comm_enable+0x5c>)
     748:	23e1      	movs	r3, #225	; 0xe1
     74a:	025b      	lsls	r3, r3, #9
     74c:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     74e:	7108      	strb	r0, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     750:	7148      	strb	r0, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     752:	2308      	movs	r3, #8
     754:	718b      	strb	r3, [r1, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
     756:	2000      	movs	r0, #0
     758:	4b0a      	ldr	r3, [pc, #40]	; (784 <udi_cdc_comm_enable+0x60>)
     75a:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
     75c:	2000      	movs	r0, #0
     75e:	4b0a      	ldr	r3, [pc, #40]	; (788 <udi_cdc_comm_enable+0x64>)
     760:	4798      	blx	r3
     762:	2800      	cmp	r0, #0
     764:	d004      	beq.n	770 <udi_cdc_comm_enable+0x4c>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
     766:	4a03      	ldr	r2, [pc, #12]	; (774 <udi_cdc_comm_enable+0x50>)
     768:	7813      	ldrb	r3, [r2, #0]
     76a:	3301      	adds	r3, #1
     76c:	b2db      	uxtb	r3, r3
     76e:	7013      	strb	r3, [r2, #0]
	return true;
}
     770:	bd08      	pop	{r3, pc}
     772:	46c0      	nop			; (mov r8, r8)
     774:	200003cc 	.word	0x200003cc
     778:	20000674 	.word	0x20000674
     77c:	200003e0 	.word	0x200003e0
     780:	20000134 	.word	0x20000134
     784:	00006081 	.word	0x00006081
     788:	00005db9 	.word	0x00005db9

0000078c <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     78c:	b530      	push	{r4, r5, lr}
     78e:	b085      	sub	sp, #20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     790:	4b46      	ldr	r3, [pc, #280]	; (8ac <udi_cdc_tx_send+0x120>)
     792:	781b      	ldrb	r3, [r3, #0]
     794:	2b00      	cmp	r3, #0
     796:	d000      	beq.n	79a <udi_cdc_tx_send+0xe>
     798:	e086      	b.n	8a8 <udi_cdc_tx_send+0x11c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
     79a:	4b45      	ldr	r3, [pc, #276]	; (8b0 <udi_cdc_tx_send+0x124>)
     79c:	4798      	blx	r3
     79e:	2800      	cmp	r0, #0
     7a0:	d006      	beq.n	7b0 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     7a2:	4b44      	ldr	r3, [pc, #272]	; (8b4 <udi_cdc_tx_send+0x128>)
     7a4:	881c      	ldrh	r4, [r3, #0]
     7a6:	4b44      	ldr	r3, [pc, #272]	; (8b8 <udi_cdc_tx_send+0x12c>)
     7a8:	4798      	blx	r3
     7aa:	4284      	cmp	r4, r0
     7ac:	d106      	bne.n	7bc <udi_cdc_tx_send+0x30>
     7ae:	e07b      	b.n	8a8 <udi_cdc_tx_send+0x11c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     7b0:	4b40      	ldr	r3, [pc, #256]	; (8b4 <udi_cdc_tx_send+0x128>)
     7b2:	881c      	ldrh	r4, [r3, #0]
     7b4:	4b41      	ldr	r3, [pc, #260]	; (8bc <udi_cdc_tx_send+0x130>)
     7b6:	4798      	blx	r3
     7b8:	4284      	cmp	r4, r0
     7ba:	d075      	beq.n	8a8 <udi_cdc_tx_send+0x11c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7bc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     7c0:	425a      	negs	r2, r3
     7c2:	4153      	adcs	r3, r2
     7c4:	9303      	str	r3, [sp, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     7c6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7c8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     7cc:	2200      	movs	r2, #0
     7ce:	4b3c      	ldr	r3, [pc, #240]	; (8c0 <udi_cdc_tx_send+0x134>)
     7d0:	701a      	strb	r2, [r3, #0]
	return flags;
     7d2:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     7d4:	4b3b      	ldr	r3, [pc, #236]	; (8c4 <udi_cdc_tx_send+0x138>)
     7d6:	781c      	ldrb	r4, [r3, #0]
     7d8:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     7da:	0062      	lsls	r2, r4, #1
     7dc:	4b3a      	ldr	r3, [pc, #232]	; (8c8 <udi_cdc_tx_send+0x13c>)
     7de:	5ad3      	ldrh	r3, [r2, r3]
     7e0:	2b00      	cmp	r3, #0
     7e2:	d11d      	bne.n	820 <udi_cdc_tx_send+0x94>
		sof_zlp_counter++;
     7e4:	4a39      	ldr	r2, [pc, #228]	; (8cc <udi_cdc_tx_send+0x140>)
     7e6:	8813      	ldrh	r3, [r2, #0]
     7e8:	3301      	adds	r3, #1
     7ea:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     7ec:	4b30      	ldr	r3, [pc, #192]	; (8b0 <udi_cdc_tx_send+0x124>)
     7ee:	4798      	blx	r3
     7f0:	2800      	cmp	r0, #0
     7f2:	d103      	bne.n	7fc <udi_cdc_tx_send+0x70>
     7f4:	4b35      	ldr	r3, [pc, #212]	; (8cc <udi_cdc_tx_send+0x140>)
     7f6:	881b      	ldrh	r3, [r3, #0]
     7f8:	2b63      	cmp	r3, #99	; 0x63
     7fa:	d908      	bls.n	80e <udi_cdc_tx_send+0x82>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     7fc:	4b2c      	ldr	r3, [pc, #176]	; (8b0 <udi_cdc_tx_send+0x124>)
     7fe:	4798      	blx	r3
     800:	2800      	cmp	r0, #0
     802:	d00d      	beq.n	820 <udi_cdc_tx_send+0x94>
     804:	4b31      	ldr	r3, [pc, #196]	; (8cc <udi_cdc_tx_send+0x140>)
     806:	881a      	ldrh	r2, [r3, #0]
     808:	4b31      	ldr	r3, [pc, #196]	; (8d0 <udi_cdc_tx_send+0x144>)
     80a:	429a      	cmp	r2, r3
     80c:	d808      	bhi.n	820 <udi_cdc_tx_send+0x94>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     80e:	2d00      	cmp	r5, #0
     810:	d04a      	beq.n	8a8 <udi_cdc_tx_send+0x11c>
		cpu_irq_enable();
     812:	2201      	movs	r2, #1
     814:	4b2a      	ldr	r3, [pc, #168]	; (8c0 <udi_cdc_tx_send+0x134>)
     816:	701a      	strb	r2, [r3, #0]
     818:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     81c:	b662      	cpsie	i
     81e:	e043      	b.n	8a8 <udi_cdc_tx_send+0x11c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
     820:	2200      	movs	r2, #0
     822:	4b2a      	ldr	r3, [pc, #168]	; (8cc <udi_cdc_tx_send+0x140>)
     824:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
     826:	4b2b      	ldr	r3, [pc, #172]	; (8d4 <udi_cdc_tx_send+0x148>)
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	2b00      	cmp	r3, #0
     82c:	d105      	bne.n	83a <udi_cdc_tx_send+0xae>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     82e:	4263      	negs	r3, r4
     830:	4163      	adcs	r3, r4
     832:	b2db      	uxtb	r3, r3
     834:	4a23      	ldr	r2, [pc, #140]	; (8c4 <udi_cdc_tx_send+0x138>)
     836:	7013      	strb	r3, [r2, #0]
     838:	e002      	b.n	840 <udi_cdc_tx_send+0xb4>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     83a:	4263      	negs	r3, r4
     83c:	415c      	adcs	r4, r3
     83e:	b2e4      	uxtb	r4, r4
	}
	udi_cdc_tx_trans_ongoing[port] = true;
     840:	2201      	movs	r2, #1
     842:	4b1a      	ldr	r3, [pc, #104]	; (8ac <udi_cdc_tx_send+0x120>)
     844:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     846:	2d00      	cmp	r5, #0
     848:	d004      	beq.n	854 <udi_cdc_tx_send+0xc8>
		cpu_irq_enable();
     84a:	4b1d      	ldr	r3, [pc, #116]	; (8c0 <udi_cdc_tx_send+0x134>)
     84c:	701a      	strb	r2, [r3, #0]
     84e:	f3bf 8f5f 	dmb	sy
     852:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     854:	1c25      	adds	r5, r4, #0
     856:	0064      	lsls	r4, r4, #1
     858:	4b1b      	ldr	r3, [pc, #108]	; (8c8 <udi_cdc_tx_send+0x13c>)
     85a:	5ae1      	ldrh	r1, [r4, r3]
     85c:	3941      	subs	r1, #65	; 0x41
     85e:	39ff      	subs	r1, #255	; 0xff
     860:	1e4b      	subs	r3, r1, #1
     862:	4199      	sbcs	r1, r3
     864:	b2cc      	uxtb	r4, r1
	if (b_short_packet) {
     866:	2c00      	cmp	r4, #0
     868:	d00d      	beq.n	886 <udi_cdc_tx_send+0xfa>
		if (udd_is_high_speed()) {
     86a:	4b11      	ldr	r3, [pc, #68]	; (8b0 <udi_cdc_tx_send+0x124>)
     86c:	4798      	blx	r3
     86e:	2800      	cmp	r0, #0
     870:	d004      	beq.n	87c <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     872:	4b11      	ldr	r3, [pc, #68]	; (8b8 <udi_cdc_tx_send+0x12c>)
     874:	4798      	blx	r3
     876:	4b0f      	ldr	r3, [pc, #60]	; (8b4 <udi_cdc_tx_send+0x128>)
     878:	8018      	strh	r0, [r3, #0]
     87a:	e007      	b.n	88c <udi_cdc_tx_send+0x100>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     87c:	4b0f      	ldr	r3, [pc, #60]	; (8bc <udi_cdc_tx_send+0x130>)
     87e:	4798      	blx	r3
     880:	4b0c      	ldr	r3, [pc, #48]	; (8b4 <udi_cdc_tx_send+0x128>)
     882:	8018      	strh	r0, [r3, #0]
     884:	e002      	b.n	88c <udi_cdc_tx_send+0x100>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     886:	2200      	movs	r2, #0
     888:	4b0a      	ldr	r3, [pc, #40]	; (8b4 <udi_cdc_tx_send+0x128>)
     88a:	801a      	strh	r2, [r3, #0]
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
     88c:	00aa      	lsls	r2, r5, #2
     88e:	1952      	adds	r2, r2, r5
     890:	0192      	lsls	r2, r2, #6
     892:	4b11      	ldr	r3, [pc, #68]	; (8d8 <udi_cdc_tx_send+0x14c>)
     894:	189a      	adds	r2, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     896:	006b      	lsls	r3, r5, #1
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
     898:	490b      	ldr	r1, [pc, #44]	; (8c8 <udi_cdc_tx_send+0x13c>)
     89a:	5a5b      	ldrh	r3, [r3, r1]
     89c:	490f      	ldr	r1, [pc, #60]	; (8dc <udi_cdc_tx_send+0x150>)
     89e:	9100      	str	r1, [sp, #0]
     8a0:	2081      	movs	r0, #129	; 0x81
     8a2:	1c21      	adds	r1, r4, #0
     8a4:	4c0e      	ldr	r4, [pc, #56]	; (8e0 <udi_cdc_tx_send+0x154>)
     8a6:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     8a8:	b005      	add	sp, #20
     8aa:	bd30      	pop	{r4, r5, pc}
     8ac:	200003dc 	.word	0x200003dc
     8b0:	00003bd9 	.word	0x00003bd9
     8b4:	200003d4 	.word	0x200003d4
     8b8:	00003bed 	.word	0x00003bed
     8bc:	00003bdd 	.word	0x00003bdd
     8c0:	200000e8 	.word	0x200000e8
     8c4:	20000140 	.word	0x20000140
     8c8:	20000144 	.word	0x20000144
     8cc:	200003d8 	.word	0x200003d8
     8d0:	0000031f 	.word	0x0000031f
     8d4:	20000670 	.word	0x20000670
     8d8:	20000148 	.word	0x20000148
     8dc:	000008e5 	.word	0x000008e5
     8e0:	00003ee5 	.word	0x00003ee5

000008e4 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     8e4:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     8e6:	2800      	cmp	r0, #0
     8e8:	d10d      	bne.n	906 <udi_cdc_data_sent+0x22>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     8ea:	4b07      	ldr	r3, [pc, #28]	; (908 <udi_cdc_data_sent+0x24>)
     8ec:	781b      	ldrb	r3, [r3, #0]
     8ee:	425a      	negs	r2, r3
     8f0:	4153      	adcs	r3, r2
     8f2:	005b      	lsls	r3, r3, #1
     8f4:	2200      	movs	r2, #0
     8f6:	4905      	ldr	r1, [pc, #20]	; (90c <udi_cdc_data_sent+0x28>)
     8f8:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     8fa:	4b05      	ldr	r3, [pc, #20]	; (910 <udi_cdc_data_sent+0x2c>)
     8fc:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     8fe:	4b05      	ldr	r3, [pc, #20]	; (914 <udi_cdc_data_sent+0x30>)
     900:	701a      	strb	r2, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
     902:	4b05      	ldr	r3, [pc, #20]	; (918 <udi_cdc_data_sent+0x34>)
     904:	4798      	blx	r3
}
     906:	bd08      	pop	{r3, pc}
     908:	20000140 	.word	0x20000140
     90c:	20000144 	.word	0x20000144
     910:	20000670 	.word	0x20000670
     914:	200003dc 	.word	0x200003dc
     918:	0000078d 	.word	0x0000078d

0000091c <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
     91c:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
     91e:	2000      	movs	r0, #0
     920:	4b01      	ldr	r3, [pc, #4]	; (928 <udi_cdc_data_sof_notify+0xc>)
     922:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
     924:	bd08      	pop	{r3, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	0000078d 	.word	0x0000078d

0000092c <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
     92c:	b508      	push	{r3, lr}
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
     92e:	4a06      	ldr	r2, [pc, #24]	; (948 <udi_cdc_data_disable+0x1c>)
     930:	7813      	ldrb	r3, [r2, #0]
     932:	3b01      	subs	r3, #1
     934:	b2db      	uxtb	r3, r3
     936:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     938:	7810      	ldrb	r0, [r2, #0]
     93a:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     93c:	4b03      	ldr	r3, [pc, #12]	; (94c <udi_cdc_data_disable+0x20>)
     93e:	4798      	blx	r3
	udi_cdc_data_running = false;
     940:	2200      	movs	r2, #0
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <udi_cdc_data_disable+0x24>)
     944:	701a      	strb	r2, [r3, #0]
}
     946:	bd08      	pop	{r3, pc}
     948:	2000013d 	.word	0x2000013d
     94c:	00005dd1 	.word	0x00005dd1
     950:	200003d6 	.word	0x200003d6

00000954 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
     954:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
     956:	4b20      	ldr	r3, [pc, #128]	; (9d8 <udi_cdc_comm_setup+0x84>)
     958:	781b      	ldrb	r3, [r3, #0]
     95a:	b25a      	sxtb	r2, r3
     95c:	2a00      	cmp	r2, #0
     95e:	da13      	bge.n	988 <udi_cdc_comm_setup+0x34>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     960:	2260      	movs	r2, #96	; 0x60
     962:	4013      	ands	r3, r2
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     964:	2000      	movs	r0, #0
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     966:	2b20      	cmp	r3, #32
     968:	d134      	bne.n	9d4 <udi_cdc_comm_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     96a:	4b1b      	ldr	r3, [pc, #108]	; (9d8 <udi_cdc_comm_setup+0x84>)
     96c:	785b      	ldrb	r3, [r3, #1]
     96e:	2b21      	cmp	r3, #33	; 0x21
     970:	d12d      	bne.n	9ce <udi_cdc_comm_setup+0x7a>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
     972:	4b19      	ldr	r3, [pc, #100]	; (9d8 <udi_cdc_comm_setup+0x84>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     974:	88db      	ldrh	r3, [r3, #6]
     976:	2b07      	cmp	r3, #7
     978:	d12c      	bne.n	9d4 <udi_cdc_comm_setup+0x80>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
     97a:	4b17      	ldr	r3, [pc, #92]	; (9d8 <udi_cdc_comm_setup+0x84>)
     97c:	4a17      	ldr	r2, [pc, #92]	; (9dc <udi_cdc_comm_setup+0x88>)
     97e:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
     980:	2207      	movs	r2, #7
     982:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
     984:	3001      	adds	r0, #1
     986:	e025      	b.n	9d4 <udi_cdc_comm_setup+0x80>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     988:	2260      	movs	r2, #96	; 0x60
     98a:	4013      	ands	r3, r2
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     98c:	2000      	movs	r0, #0
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     98e:	2b20      	cmp	r3, #32
     990:	d120      	bne.n	9d4 <udi_cdc_comm_setup+0x80>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     992:	4b11      	ldr	r3, [pc, #68]	; (9d8 <udi_cdc_comm_setup+0x84>)
     994:	785b      	ldrb	r3, [r3, #1]
     996:	2b20      	cmp	r3, #32
     998:	d002      	beq.n	9a0 <udi_cdc_comm_setup+0x4c>
     99a:	2b22      	cmp	r3, #34	; 0x22
     99c:	d00e      	beq.n	9bc <udi_cdc_comm_setup+0x68>
     99e:	e018      	b.n	9d2 <udi_cdc_comm_setup+0x7e>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
     9a0:	4b0d      	ldr	r3, [pc, #52]	; (9d8 <udi_cdc_comm_setup+0x84>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     9a2:	88db      	ldrh	r3, [r3, #6]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
     9a4:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     9a6:	2b07      	cmp	r3, #7
     9a8:	d114      	bne.n	9d4 <udi_cdc_comm_setup+0x80>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
     9aa:	4b0b      	ldr	r3, [pc, #44]	; (9d8 <udi_cdc_comm_setup+0x84>)
     9ac:	4a0c      	ldr	r2, [pc, #48]	; (9e0 <udi_cdc_comm_setup+0x8c>)
     9ae:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
     9b0:	4a0a      	ldr	r2, [pc, #40]	; (9dc <udi_cdc_comm_setup+0x88>)
     9b2:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
     9b4:	2207      	movs	r2, #7
     9b6:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
     9b8:	3001      	adds	r0, #1
     9ba:	e00b      	b.n	9d4 <udi_cdc_comm_setup+0x80>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     9bc:	4b06      	ldr	r3, [pc, #24]	; (9d8 <udi_cdc_comm_setup+0x84>)
     9be:	885b      	ldrh	r3, [r3, #2]
     9c0:	2101      	movs	r1, #1
     9c2:	4019      	ands	r1, r3
     9c4:	2000      	movs	r0, #0
     9c6:	4b07      	ldr	r3, [pc, #28]	; (9e4 <udi_cdc_comm_setup+0x90>)
     9c8:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
     9ca:	2001      	movs	r0, #1
     9cc:	e002      	b.n	9d4 <udi_cdc_comm_setup+0x80>
			}
		}
	}
	return false;  // request Not supported
     9ce:	2000      	movs	r0, #0
     9d0:	e000      	b.n	9d4 <udi_cdc_comm_setup+0x80>
     9d2:	2000      	movs	r0, #0
}
     9d4:	bd08      	pop	{r3, pc}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	20000a88 	.word	0x20000a88
     9dc:	20000134 	.word	0x20000134
     9e0:	00000711 	.word	0x00000711
     9e4:	00005de9 	.word	0x00005de9

000009e8 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
     9e8:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     9ea:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     9ee:	425a      	negs	r2, r3
     9f0:	4153      	adcs	r3, r2
     9f2:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     9f4:	b672      	cpsid	i
     9f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     9fa:	2200      	movs	r2, #0
     9fc:	4b0a      	ldr	r3, [pc, #40]	; (a28 <udi_cdc_multi_get_nb_received_data+0x40>)
     9fe:	701a      	strb	r2, [r3, #0]
	return flags;
     a00:	9a01      	ldr	r2, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     a02:	4b0a      	ldr	r3, [pc, #40]	; (a2c <udi_cdc_multi_get_nb_received_data+0x44>)
     a04:	8818      	ldrh	r0, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     a06:	4b0a      	ldr	r3, [pc, #40]	; (a30 <udi_cdc_multi_get_nb_received_data+0x48>)
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	005b      	lsls	r3, r3, #1
     a0c:	4909      	ldr	r1, [pc, #36]	; (a34 <udi_cdc_multi_get_nb_received_data+0x4c>)
     a0e:	5a5b      	ldrh	r3, [r3, r1]
     a10:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     a12:	2a00      	cmp	r2, #0
     a14:	d005      	beq.n	a22 <udi_cdc_multi_get_nb_received_data+0x3a>
		cpu_irq_enable();
     a16:	2201      	movs	r2, #1
     a18:	4b03      	ldr	r3, [pc, #12]	; (a28 <udi_cdc_multi_get_nb_received_data+0x40>)
     a1a:	701a      	strb	r2, [r3, #0]
     a1c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     a20:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     a22:	b002      	add	sp, #8
     a24:	4770      	bx	lr
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	200000e8 	.word	0x200000e8
     a2c:	200003d0 	.word	0x200003d0
     a30:	2000013c 	.word	0x2000013c
     a34:	200003c8 	.word	0x200003c8

00000a38 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
     a38:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
     a3a:	2000      	movs	r0, #0
     a3c:	4b01      	ldr	r3, [pc, #4]	; (a44 <udi_cdc_get_nb_received_data+0xc>)
     a3e:	4798      	blx	r3
}
     a40:	bd08      	pop	{r3, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	000009e9 	.word	0x000009e9

00000a48 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     a48:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     a4a:	4b03      	ldr	r3, [pc, #12]	; (a58 <udi_cdc_multi_is_rx_ready+0x10>)
     a4c:	4798      	blx	r3
     a4e:	1e43      	subs	r3, r0, #1
     a50:	4198      	sbcs	r0, r3
     a52:	b2c0      	uxtb	r0, r0
}
     a54:	bd08      	pop	{r3, pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	000009e9 	.word	0x000009e9

00000a5c <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     a5c:	b510      	push	{r4, lr}
     a5e:	b084      	sub	sp, #16
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     a60:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     a64:	425a      	negs	r2, r3
     a66:	4153      	adcs	r3, r2
     a68:	9303      	str	r3, [sp, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     a6a:	b672      	cpsid	i
     a6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     a70:	2200      	movs	r2, #0
     a72:	4b23      	ldr	r3, [pc, #140]	; (b00 <udi_cdc_rx_start+0xa4>)
     a74:	701a      	strb	r2, [r3, #0]
	return flags;
     a76:	9b03      	ldr	r3, [sp, #12]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     a78:	4a22      	ldr	r2, [pc, #136]	; (b04 <udi_cdc_rx_start+0xa8>)
     a7a:	7814      	ldrb	r4, [r2, #0]
     a7c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     a7e:	4a22      	ldr	r2, [pc, #136]	; (b08 <udi_cdc_rx_start+0xac>)
     a80:	7812      	ldrb	r2, [r2, #0]
     a82:	2a00      	cmp	r2, #0
     a84:	d107      	bne.n	a96 <udi_cdc_rx_start+0x3a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     a86:	4a21      	ldr	r2, [pc, #132]	; (b0c <udi_cdc_rx_start+0xb0>)
     a88:	8812      	ldrh	r2, [r2, #0]
     a8a:	0061      	lsls	r1, r4, #1
     a8c:	4820      	ldr	r0, [pc, #128]	; (b10 <udi_cdc_rx_start+0xb4>)
     a8e:	5a09      	ldrh	r1, [r1, r0]
     a90:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     a92:	428a      	cmp	r2, r1
     a94:	d209      	bcs.n	aaa <udi_cdc_rx_start+0x4e>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     a96:	2000      	movs	r0, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     a98:	2b00      	cmp	r3, #0
     a9a:	d02e      	beq.n	afa <udi_cdc_rx_start+0x9e>
		cpu_irq_enable();
     a9c:	2201      	movs	r2, #1
     a9e:	4b18      	ldr	r3, [pc, #96]	; (b00 <udi_cdc_rx_start+0xa4>)
     aa0:	701a      	strb	r2, [r3, #0]
     aa2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     aa6:	b662      	cpsie	i
     aa8:	e027      	b.n	afa <udi_cdc_rx_start+0x9e>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     aaa:	2100      	movs	r1, #0
     aac:	4a17      	ldr	r2, [pc, #92]	; (b0c <udi_cdc_rx_start+0xb0>)
     aae:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     ab0:	4262      	negs	r2, r4
     ab2:	4162      	adcs	r2, r4
     ab4:	b2d2      	uxtb	r2, r2
     ab6:	4913      	ldr	r1, [pc, #76]	; (b04 <udi_cdc_rx_start+0xa8>)
     ab8:	700a      	strb	r2, [r1, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     aba:	2101      	movs	r1, #1
     abc:	4a12      	ldr	r2, [pc, #72]	; (b08 <udi_cdc_rx_start+0xac>)
     abe:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     ac0:	2b00      	cmp	r3, #0
     ac2:	d005      	beq.n	ad0 <udi_cdc_rx_start+0x74>
		cpu_irq_enable();
     ac4:	2201      	movs	r2, #1
     ac6:	4b0e      	ldr	r3, [pc, #56]	; (b00 <udi_cdc_rx_start+0xa4>)
     ac8:	701a      	strb	r2, [r3, #0]
     aca:	f3bf 8f5f 	dmb	sy
     ace:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     ad0:	2000      	movs	r0, #0
     ad2:	4b10      	ldr	r3, [pc, #64]	; (b14 <udi_cdc_rx_start+0xb8>)
     ad4:	4798      	blx	r3
     ad6:	2800      	cmp	r0, #0
     ad8:	d002      	beq.n	ae0 <udi_cdc_rx_start+0x84>
		UDI_CDC_RX_NOTIFY(port);
     ada:	2000      	movs	r0, #0
     adc:	4b0e      	ldr	r3, [pc, #56]	; (b18 <udi_cdc_rx_start+0xbc>)
     ade:	4798      	blx	r3
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     ae0:	00a2      	lsls	r2, r4, #2
     ae2:	1912      	adds	r2, r2, r4
     ae4:	0194      	lsls	r4, r2, #6
     ae6:	4a0d      	ldr	r2, [pc, #52]	; (b1c <udi_cdc_rx_start+0xc0>)
     ae8:	1912      	adds	r2, r2, r4
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     aea:	4b0d      	ldr	r3, [pc, #52]	; (b20 <udi_cdc_rx_start+0xc4>)
     aec:	9300      	str	r3, [sp, #0]
     aee:	2002      	movs	r0, #2
     af0:	2101      	movs	r1, #1
     af2:	23a0      	movs	r3, #160	; 0xa0
     af4:	005b      	lsls	r3, r3, #1
     af6:	4c0b      	ldr	r4, [pc, #44]	; (b24 <udi_cdc_rx_start+0xc8>)
     af8:	47a0      	blx	r4
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     afa:	b004      	add	sp, #16
     afc:	bd10      	pop	{r4, pc}
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	200000e8 	.word	0x200000e8
     b04:	2000013c 	.word	0x2000013c
     b08:	2000066c 	.word	0x2000066c
     b0c:	200003d0 	.word	0x200003d0
     b10:	200003c8 	.word	0x200003c8
     b14:	00000a49 	.word	0x00000a49
     b18:	00005fc1 	.word	0x00005fc1
     b1c:	200003ec 	.word	0x200003ec
     b20:	00000bb9 	.word	0x00000bb9
     b24:	00003ee5 	.word	0x00003ee5

00000b28 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
     b28:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     b2a:	2400      	movs	r4, #0
     b2c:	4b15      	ldr	r3, [pc, #84]	; (b84 <udi_cdc_data_enable+0x5c>)
     b2e:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     b30:	4b15      	ldr	r3, [pc, #84]	; (b88 <udi_cdc_data_enable+0x60>)
     b32:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     b34:	4b15      	ldr	r3, [pc, #84]	; (b8c <udi_cdc_data_enable+0x64>)
     b36:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     b38:	4b15      	ldr	r3, [pc, #84]	; (b90 <udi_cdc_data_enable+0x68>)
     b3a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     b3c:	4b15      	ldr	r3, [pc, #84]	; (b94 <udi_cdc_data_enable+0x6c>)
     b3e:	2500      	movs	r5, #0
     b40:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     b42:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     b44:	4b14      	ldr	r3, [pc, #80]	; (b98 <udi_cdc_data_enable+0x70>)
     b46:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     b48:	2000      	movs	r0, #0
     b4a:	4b14      	ldr	r3, [pc, #80]	; (b9c <udi_cdc_data_enable+0x74>)
     b4c:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     b4e:	4b14      	ldr	r3, [pc, #80]	; (ba0 <udi_cdc_data_enable+0x78>)
     b50:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     b52:	4b14      	ldr	r3, [pc, #80]	; (ba4 <udi_cdc_data_enable+0x7c>)
     b54:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     b56:	4b14      	ldr	r3, [pc, #80]	; (ba8 <udi_cdc_data_enable+0x80>)
     b58:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     b5a:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     b5c:	4b13      	ldr	r3, [pc, #76]	; (bac <udi_cdc_data_enable+0x84>)
     b5e:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     b60:	2000      	movs	r0, #0
     b62:	4b13      	ldr	r3, [pc, #76]	; (bb0 <udi_cdc_data_enable+0x88>)
     b64:	4798      	blx	r3
     b66:	2800      	cmp	r0, #0
     b68:	d00a      	beq.n	b80 <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     b6a:	4a06      	ldr	r2, [pc, #24]	; (b84 <udi_cdc_data_enable+0x5c>)
     b6c:	7813      	ldrb	r3, [r2, #0]
     b6e:	3301      	adds	r3, #1
     b70:	b2db      	uxtb	r3, r3
     b72:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     b74:	7813      	ldrb	r3, [r2, #0]
     b76:	2b01      	cmp	r3, #1
     b78:	d102      	bne.n	b80 <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
     b7a:	2201      	movs	r2, #1
     b7c:	4b0d      	ldr	r3, [pc, #52]	; (bb4 <udi_cdc_data_enable+0x8c>)
     b7e:	701a      	strb	r2, [r3, #0]
	}
	return true;
}
     b80:	bd38      	pop	{r3, r4, r5, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	2000013d 	.word	0x2000013d
     b88:	200003dc 	.word	0x200003dc
     b8c:	20000670 	.word	0x20000670
     b90:	20000140 	.word	0x20000140
     b94:	20000144 	.word	0x20000144
     b98:	200003d4 	.word	0x200003d4
     b9c:	0000078d 	.word	0x0000078d
     ba0:	2000066c 	.word	0x2000066c
     ba4:	2000013c 	.word	0x2000013c
     ba8:	200003c8 	.word	0x200003c8
     bac:	200003d0 	.word	0x200003d0
     bb0:	00000a5d 	.word	0x00000a5d
     bb4:	200003d6 	.word	0x200003d6

00000bb8 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     bb8:	b510      	push	{r4, lr}
     bba:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     bbc:	2800      	cmp	r0, #0
     bbe:	d11f      	bne.n	c00 <udi_cdc_data_received+0x48>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     bc0:	4b10      	ldr	r3, [pc, #64]	; (c04 <udi_cdc_data_received+0x4c>)
     bc2:	781b      	ldrb	r3, [r3, #0]
     bc4:	4258      	negs	r0, r3
     bc6:	4143      	adcs	r3, r0
     bc8:	b2db      	uxtb	r3, r3
	if (!n) {
     bca:	2900      	cmp	r1, #0
     bcc:	d10e      	bne.n	bec <udi_cdc_data_received+0x34>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     bce:	0099      	lsls	r1, r3, #2
     bd0:	18cb      	adds	r3, r1, r3
     bd2:	019b      	lsls	r3, r3, #6
     bd4:	490c      	ldr	r1, [pc, #48]	; (c08 <udi_cdc_data_received+0x50>)
     bd6:	18cb      	adds	r3, r1, r3
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     bd8:	490c      	ldr	r1, [pc, #48]	; (c0c <udi_cdc_data_received+0x54>)
     bda:	9100      	str	r1, [sp, #0]
     bdc:	1c10      	adds	r0, r2, #0
     bde:	2101      	movs	r1, #1
     be0:	1c1a      	adds	r2, r3, #0
     be2:	23a0      	movs	r3, #160	; 0xa0
     be4:	005b      	lsls	r3, r3, #1
     be6:	4c0a      	ldr	r4, [pc, #40]	; (c10 <udi_cdc_data_received+0x58>)
     be8:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     bea:	e009      	b.n	c00 <udi_cdc_data_received+0x48>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     bec:	b289      	uxth	r1, r1
     bee:	005b      	lsls	r3, r3, #1
     bf0:	4a08      	ldr	r2, [pc, #32]	; (c14 <udi_cdc_data_received+0x5c>)
     bf2:	5299      	strh	r1, [r3, r2]
	udi_cdc_rx_trans_ongoing[port] = false;
     bf4:	2200      	movs	r2, #0
     bf6:	4b08      	ldr	r3, [pc, #32]	; (c18 <udi_cdc_data_received+0x60>)
     bf8:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     bfa:	2000      	movs	r0, #0
     bfc:	4b07      	ldr	r3, [pc, #28]	; (c1c <udi_cdc_data_received+0x64>)
     bfe:	4798      	blx	r3
}
     c00:	b002      	add	sp, #8
     c02:	bd10      	pop	{r4, pc}
     c04:	2000013c 	.word	0x2000013c
     c08:	200003ec 	.word	0x200003ec
     c0c:	00000bb9 	.word	0x00000bb9
     c10:	00003ee5 	.word	0x00003ee5
     c14:	200003c8 	.word	0x200003c8
     c18:	2000066c 	.word	0x2000066c
     c1c:	00000a5d 	.word	0x00000a5d

00000c20 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
     c20:	b5f0      	push	{r4, r5, r6, r7, lr}
     c22:	465f      	mov	r7, fp
     c24:	4656      	mov	r6, sl
     c26:	464d      	mov	r5, r9
     c28:	b4e0      	push	{r5, r6, r7}
     c2a:	b082      	sub	sp, #8
     c2c:	1c0e      	adds	r6, r1, #0
     c2e:	1c15      	adds	r5, r2, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     c30:	4b28      	ldr	r3, [pc, #160]	; (cd4 <udi_cdc_multi_read_buf+0xb4>)
     c32:	469b      	mov	fp, r3
     c34:	2300      	movs	r3, #0
     c36:	469a      	mov	sl, r3
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     c38:	4b27      	ldr	r3, [pc, #156]	; (cd8 <udi_cdc_multi_read_buf+0xb8>)
     c3a:	4699      	mov	r9, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
     c3c:	4f27      	ldr	r7, [pc, #156]	; (cdc <udi_cdc_multi_read_buf+0xbc>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c3e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     c42:	425a      	negs	r2, r3
     c44:	4153      	adcs	r3, r2
     c46:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     c48:	b672      	cpsid	i
     c4a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     c4e:	465b      	mov	r3, fp
     c50:	4652      	mov	r2, sl
     c52:	701a      	strb	r2, [r3, #0]
	return flags;
     c54:	9801      	ldr	r0, [sp, #4]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     c56:	464b      	mov	r3, r9
     c58:	8819      	ldrh	r1, [r3, #0]
     c5a:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
     c5c:	783b      	ldrb	r3, [r7, #0]
     c5e:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     c60:	005c      	lsls	r4, r3, #1
     c62:	4a1f      	ldr	r2, [pc, #124]	; (ce0 <udi_cdc_multi_read_buf+0xc0>)
     c64:	5aa2      	ldrh	r2, [r4, r2]
     c66:	b292      	uxth	r2, r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     c68:	2800      	cmp	r0, #0
     c6a:	d005      	beq.n	c78 <udi_cdc_multi_read_buf+0x58>
		cpu_irq_enable();
     c6c:	2401      	movs	r4, #1
     c6e:	4819      	ldr	r0, [pc, #100]	; (cd4 <udi_cdc_multi_read_buf+0xb4>)
     c70:	7004      	strb	r4, [r0, #0]
     c72:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     c76:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
     c78:	4291      	cmp	r1, r2
     c7a:	d305      	bcc.n	c88 <udi_cdc_multi_read_buf+0x68>
		if (!udi_cdc_data_running) {
     c7c:	4b19      	ldr	r3, [pc, #100]	; (ce4 <udi_cdc_multi_read_buf+0xc4>)
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	2b00      	cmp	r3, #0
     c82:	d1dc      	bne.n	c3e <udi_cdc_multi_read_buf+0x1e>
     c84:	1c28      	adds	r0, r5, #0
     c86:	e01e      	b.n	cc6 <udi_cdc_multi_read_buf+0xa6>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
     c88:	005a      	lsls	r2, r3, #1
     c8a:	4815      	ldr	r0, [pc, #84]	; (ce0 <udi_cdc_multi_read_buf+0xc0>)
     c8c:	5a12      	ldrh	r2, [r2, r0]
     c8e:	1a52      	subs	r2, r2, r1
     c90:	1e2c      	subs	r4, r5, #0
     c92:	4294      	cmp	r4, r2
     c94:	d900      	bls.n	c98 <udi_cdc_multi_read_buf+0x78>
     c96:	1c14      	adds	r4, r2, #0
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
     c98:	009a      	lsls	r2, r3, #2
     c9a:	18d3      	adds	r3, r2, r3
     c9c:	019b      	lsls	r3, r3, #6
     c9e:	185b      	adds	r3, r3, r1
     ca0:	4911      	ldr	r1, [pc, #68]	; (ce8 <udi_cdc_multi_read_buf+0xc8>)
     ca2:	18c9      	adds	r1, r1, r3
     ca4:	1c30      	adds	r0, r6, #0
     ca6:	1c22      	adds	r2, r4, #0
     ca8:	4b10      	ldr	r3, [pc, #64]	; (cec <udi_cdc_multi_read_buf+0xcc>)
     caa:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
     cac:	4a0a      	ldr	r2, [pc, #40]	; (cd8 <udi_cdc_multi_read_buf+0xb8>)
     cae:	8813      	ldrh	r3, [r2, #0]
     cb0:	191b      	adds	r3, r3, r4
     cb2:	b29b      	uxth	r3, r3
     cb4:	8013      	strh	r3, [r2, #0]
	ptr_buf += copy_nb;
     cb6:	1936      	adds	r6, r6, r4
	size -= copy_nb;
     cb8:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
     cba:	2000      	movs	r0, #0
     cbc:	4b0c      	ldr	r3, [pc, #48]	; (cf0 <udi_cdc_multi_read_buf+0xd0>)
     cbe:	4798      	blx	r3

	if (size) {
     cc0:	2d00      	cmp	r5, #0
     cc2:	d1bc      	bne.n	c3e <udi_cdc_multi_read_buf+0x1e>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
     cc4:	2000      	movs	r0, #0
}
     cc6:	b002      	add	sp, #8
     cc8:	bc1c      	pop	{r2, r3, r4}
     cca:	4691      	mov	r9, r2
     ccc:	469a      	mov	sl, r3
     cce:	46a3      	mov	fp, r4
     cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	200000e8 	.word	0x200000e8
     cd8:	200003d0 	.word	0x200003d0
     cdc:	2000013c 	.word	0x2000013c
     ce0:	200003c8 	.word	0x200003c8
     ce4:	200003d6 	.word	0x200003d6
     ce8:	200003ec 	.word	0x200003ec
     cec:	000087fd 	.word	0x000087fd
     cf0:	00000a5d 	.word	0x00000a5d

00000cf4 <udi_cdc_read_buf>:
{
	return udi_cdc_multi_read_no_polling(0, buf, size);
}

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
     cf4:	b508      	push	{r3, lr}
     cf6:	1c03      	adds	r3, r0, #0
     cf8:	1c0a      	adds	r2, r1, #0
	return udi_cdc_multi_read_buf(0, buf, size);
     cfa:	2000      	movs	r0, #0
     cfc:	1c19      	adds	r1, r3, #0
     cfe:	4b01      	ldr	r3, [pc, #4]	; (d04 <udi_cdc_read_buf+0x10>)
     d00:	4798      	blx	r3
}
     d02:	bd08      	pop	{r3, pc}
     d04:	00000c21 	.word	0x00000c21

00000d08 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
     d08:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d0a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     d0e:	425a      	negs	r2, r3
     d10:	4153      	adcs	r3, r2
     d12:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     d14:	b672      	cpsid	i
     d16:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     d1a:	2200      	movs	r2, #0
     d1c:	4b15      	ldr	r3, [pc, #84]	; (d74 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     d1e:	701a      	strb	r2, [r3, #0]
	return flags;
     d20:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     d22:	4b15      	ldr	r3, [pc, #84]	; (d78 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     d24:	781b      	ldrb	r3, [r3, #0]
     d26:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     d28:	0058      	lsls	r0, r3, #1
     d2a:	4914      	ldr	r1, [pc, #80]	; (d7c <udi_cdc_multi_get_free_tx_buffer+0x74>)
     d2c:	5a40      	ldrh	r0, [r0, r1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     d2e:	21a0      	movs	r1, #160	; 0xa0
     d30:	0049      	lsls	r1, r1, #1
     d32:	4288      	cmp	r0, r1
     d34:	d110      	bne.n	d58 <udi_cdc_multi_get_free_tx_buffer+0x50>
		if ((!udi_cdc_tx_trans_ongoing[port])
     d36:	4912      	ldr	r1, [pc, #72]	; (d80 <udi_cdc_multi_get_free_tx_buffer+0x78>)
     d38:	7809      	ldrb	r1, [r1, #0]
     d3a:	2900      	cmp	r1, #0
     d3c:	d10c      	bne.n	d58 <udi_cdc_multi_get_free_tx_buffer+0x50>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     d3e:	4911      	ldr	r1, [pc, #68]	; (d84 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
     d40:	7809      	ldrb	r1, [r1, #0]
     d42:	2900      	cmp	r1, #0
     d44:	d108      	bne.n	d58 <udi_cdc_multi_get_free_tx_buffer+0x50>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
     d46:	2001      	movs	r0, #1
     d48:	490e      	ldr	r1, [pc, #56]	; (d84 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
     d4a:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     d4c:	4259      	negs	r1, r3
     d4e:	414b      	adcs	r3, r1
     d50:	b2db      	uxtb	r3, r3
     d52:	4909      	ldr	r1, [pc, #36]	; (d78 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     d54:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
     d56:	2000      	movs	r0, #0
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     d58:	23a0      	movs	r3, #160	; 0xa0
     d5a:	005b      	lsls	r3, r3, #1
     d5c:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     d5e:	2a00      	cmp	r2, #0
     d60:	d005      	beq.n	d6e <udi_cdc_multi_get_free_tx_buffer+0x66>
		cpu_irq_enable();
     d62:	2201      	movs	r2, #1
     d64:	4b03      	ldr	r3, [pc, #12]	; (d74 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     d66:	701a      	strb	r2, [r3, #0]
     d68:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     d6c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     d6e:	b002      	add	sp, #8
     d70:	4770      	bx	lr
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	200000e8 	.word	0x200000e8
     d78:	20000140 	.word	0x20000140
     d7c:	20000144 	.word	0x20000144
     d80:	200003dc 	.word	0x200003dc
     d84:	20000670 	.word	0x20000670

00000d88 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     d88:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     d8a:	4b03      	ldr	r3, [pc, #12]	; (d98 <udi_cdc_multi_is_tx_ready+0x10>)
     d8c:	4798      	blx	r3
     d8e:	1e43      	subs	r3, r0, #1
     d90:	4198      	sbcs	r0, r3
     d92:	b2c0      	uxtb	r0, r0
}
     d94:	bd08      	pop	{r3, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000d09 	.word	0x00000d09

00000d9c <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
     d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9e:	465f      	mov	r7, fp
     da0:	4656      	mov	r6, sl
     da2:	464d      	mov	r5, r9
     da4:	4644      	mov	r4, r8
     da6:	b4f0      	push	{r4, r5, r6, r7}
     da8:	b083      	sub	sp, #12
     daa:	4688      	mov	r8, r1
     dac:	1c17      	adds	r7, r2, #0

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
     dae:	4b27      	ldr	r3, [pc, #156]	; (e4c <udi_cdc_multi_write_buf+0xb0>)
     db0:	799b      	ldrb	r3, [r3, #6]
     db2:	2b09      	cmp	r3, #9
     db4:	d100      	bne.n	db8 <udi_cdc_multi_write_buf+0x1c>
		size *=2;
     db6:	0057      	lsls	r7, r2, #1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     db8:	4b25      	ldr	r3, [pc, #148]	; (e50 <udi_cdc_multi_write_buf+0xb4>)
     dba:	4699      	mov	r9, r3
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     dbc:	4b25      	ldr	r3, [pc, #148]	; (e54 <udi_cdc_multi_write_buf+0xb8>)
     dbe:	469b      	mov	fp, r3
     dc0:	2000      	movs	r0, #0
     dc2:	47c8      	blx	r9
     dc4:	2800      	cmp	r0, #0
     dc6:	d105      	bne.n	dd4 <udi_cdc_multi_write_buf+0x38>
		if (!udi_cdc_data_running) {
     dc8:	4b23      	ldr	r3, [pc, #140]	; (e58 <udi_cdc_multi_write_buf+0xbc>)
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	2b00      	cmp	r3, #0
     dce:	d1f7      	bne.n	dc0 <udi_cdc_multi_write_buf+0x24>
     dd0:	1c38      	adds	r0, r7, #0
     dd2:	e034      	b.n	e3e <udi_cdc_multi_write_buf+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     dd4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     dd8:	425a      	negs	r2, r3
     dda:	4153      	adcs	r3, r2
     ddc:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     dde:	b672      	cpsid	i
     de0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     de4:	2300      	movs	r3, #0
     de6:	465a      	mov	r2, fp
     de8:	7013      	strb	r3, [r2, #0]
	return flags;
     dea:	9b01      	ldr	r3, [sp, #4]
     dec:	469a      	mov	sl, r3
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     dee:	4b1b      	ldr	r3, [pc, #108]	; (e5c <udi_cdc_multi_write_buf+0xc0>)
     df0:	781c      	ldrb	r4, [r3, #0]
     df2:	b2e4      	uxtb	r4, r4
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     df4:	0062      	lsls	r2, r4, #1
     df6:	4b1a      	ldr	r3, [pc, #104]	; (e60 <udi_cdc_multi_write_buf+0xc4>)
     df8:	5ad5      	ldrh	r5, [r2, r3]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
     dfa:	23a0      	movs	r3, #160	; 0xa0
     dfc:	005b      	lsls	r3, r3, #1
     dfe:	1b5b      	subs	r3, r3, r5
     e00:	1e3e      	subs	r6, r7, #0
     e02:	429e      	cmp	r6, r3
     e04:	d900      	bls.n	e08 <udi_cdc_multi_write_buf+0x6c>
     e06:	1c1e      	adds	r6, r3, #0
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
     e08:	00a0      	lsls	r0, r4, #2
     e0a:	1900      	adds	r0, r0, r4
     e0c:	0180      	lsls	r0, r0, #6
     e0e:	1940      	adds	r0, r0, r5
     e10:	4b14      	ldr	r3, [pc, #80]	; (e64 <udi_cdc_multi_write_buf+0xc8>)
     e12:	1818      	adds	r0, r3, r0
     e14:	4641      	mov	r1, r8
     e16:	1c32      	adds	r2, r6, #0
     e18:	4b13      	ldr	r3, [pc, #76]	; (e68 <udi_cdc_multi_write_buf+0xcc>)
     e1a:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
     e1c:	0064      	lsls	r4, r4, #1
     e1e:	19ad      	adds	r5, r5, r6
     e20:	4b0f      	ldr	r3, [pc, #60]	; (e60 <udi_cdc_multi_write_buf+0xc4>)
     e22:	52e5      	strh	r5, [r4, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     e24:	4653      	mov	r3, sl
     e26:	2b00      	cmp	r3, #0
     e28:	d005      	beq.n	e36 <udi_cdc_multi_write_buf+0x9a>
		cpu_irq_enable();
     e2a:	2201      	movs	r2, #1
     e2c:	4b09      	ldr	r3, [pc, #36]	; (e54 <udi_cdc_multi_write_buf+0xb8>)
     e2e:	701a      	strb	r2, [r3, #0]
     e30:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     e34:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
     e36:	44b0      	add	r8, r6
	size -= copy_nb;
     e38:	1bbf      	subs	r7, r7, r6

	if (size) {
     e3a:	d1c1      	bne.n	dc0 <udi_cdc_multi_write_buf+0x24>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
     e3c:	2000      	movs	r0, #0
}
     e3e:	b003      	add	sp, #12
     e40:	bc3c      	pop	{r2, r3, r4, r5}
     e42:	4690      	mov	r8, r2
     e44:	4699      	mov	r9, r3
     e46:	46a2      	mov	sl, r4
     e48:	46ab      	mov	fp, r5
     e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e4c:	20000134 	.word	0x20000134
     e50:	00000d89 	.word	0x00000d89
     e54:	200000e8 	.word	0x200000e8
     e58:	200003d6 	.word	0x200003d6
     e5c:	20000140 	.word	0x20000140
     e60:	20000144 	.word	0x20000144
     e64:	20000148 	.word	0x20000148
     e68:	000087fd 	.word	0x000087fd

00000e6c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
     e6c:	b508      	push	{r3, lr}
     e6e:	1c03      	adds	r3, r0, #0
     e70:	1c0a      	adds	r2, r1, #0
	return udi_cdc_multi_write_buf(0, buf, size);
     e72:	2000      	movs	r0, #0
     e74:	1c19      	adds	r1, r3, #0
     e76:	4b01      	ldr	r3, [pc, #4]	; (e7c <udi_cdc_write_buf+0x10>)
     e78:	4798      	blx	r3
}
     e7a:	bd08      	pop	{r3, pc}
     e7c:	00000d9d 	.word	0x00000d9d

00000e80 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     e80:	b510      	push	{r4, lr}
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     e82:	4b11      	ldr	r3, [pc, #68]	; (ec8 <udc_next_desc_in_iface+0x48>)
     e84:	681b      	ldr	r3, [r3, #0]
     e86:	681c      	ldr	r4, [r3, #0]
     e88:	78a3      	ldrb	r3, [r4, #2]
     e8a:	78e2      	ldrb	r2, [r4, #3]
     e8c:	0212      	lsls	r2, r2, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     e8e:	431a      	orrs	r2, r3
     e90:	18a2      	adds	r2, r4, r2
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     e92:	7803      	ldrb	r3, [r0, #0]
     e94:	18c0      	adds	r0, r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     e96:	4290      	cmp	r0, r2
     e98:	d210      	bcs.n	ebc <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     e9a:	7843      	ldrb	r3, [r0, #1]
     e9c:	2b04      	cmp	r3, #4
     e9e:	d00f      	beq.n	ec0 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     ea0:	428b      	cmp	r3, r1
     ea2:	d105      	bne.n	eb0 <udc_next_desc_in_iface+0x30>
     ea4:	e00f      	b.n	ec6 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     ea6:	7843      	ldrb	r3, [r0, #1]
     ea8:	2b04      	cmp	r3, #4
     eaa:	d00b      	beq.n	ec4 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     eac:	428b      	cmp	r3, r1
     eae:	d00a      	beq.n	ec6 <udc_next_desc_in_iface+0x46>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     eb0:	7803      	ldrb	r3, [r0, #0]
     eb2:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     eb4:	4290      	cmp	r0, r2
     eb6:	d3f6      	bcc.n	ea6 <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     eb8:	2000      	movs	r0, #0
     eba:	e004      	b.n	ec6 <udc_next_desc_in_iface+0x46>
     ebc:	2000      	movs	r0, #0
     ebe:	e002      	b.n	ec6 <udc_next_desc_in_iface+0x46>
     ec0:	2000      	movs	r0, #0
     ec2:	e000      	b.n	ec6 <udc_next_desc_in_iface+0x46>
     ec4:	2000      	movs	r0, #0
}
     ec6:	bd10      	pop	{r4, pc}
     ec8:	20000678 	.word	0x20000678

00000ecc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     ecc:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     ece:	4b03      	ldr	r3, [pc, #12]	; (edc <udc_valid_address+0x10>)
     ed0:	885b      	ldrh	r3, [r3, #2]
     ed2:	207f      	movs	r0, #127	; 0x7f
     ed4:	4018      	ands	r0, r3
     ed6:	4b02      	ldr	r3, [pc, #8]	; (ee0 <udc_valid_address+0x14>)
     ed8:	4798      	blx	r3
}
     eda:	bd08      	pop	{r3, pc}
     edc:	20000a88 	.word	0x20000a88
     ee0:	000040c1 	.word	0x000040c1

00000ee4 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     ee4:	b510      	push	{r4, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     ee6:	4b16      	ldr	r3, [pc, #88]	; (f40 <udc_update_iface_desc+0x5c>)
     ee8:	781b      	ldrb	r3, [r3, #0]
		return false;
     eea:	2200      	movs	r2, #0
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     eec:	2b00      	cmp	r3, #0
     eee:	d024      	beq.n	f3a <udc_update_iface_desc+0x56>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     ef0:	4b14      	ldr	r3, [pc, #80]	; (f44 <udc_update_iface_desc+0x60>)
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	791c      	ldrb	r4, [r3, #4]
     ef8:	4284      	cmp	r4, r0
     efa:	d91e      	bls.n	f3a <udc_update_iface_desc+0x56>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     efc:	4a12      	ldr	r2, [pc, #72]	; (f48 <udc_update_iface_desc+0x64>)
     efe:	6013      	str	r3, [r2, #0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     f00:	789a      	ldrb	r2, [r3, #2]
     f02:	78dc      	ldrb	r4, [r3, #3]
     f04:	0224      	lsls	r4, r4, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     f06:	4314      	orrs	r4, r2
     f08:	191c      	adds	r4, r3, r4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     f0a:	42a3      	cmp	r3, r4
     f0c:	d214      	bcs.n	f38 <udc_update_iface_desc+0x54>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     f0e:	785a      	ldrb	r2, [r3, #1]
     f10:	2a04      	cmp	r2, #4
     f12:	d109      	bne.n	f28 <udc_update_iface_desc+0x44>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     f14:	789a      	ldrb	r2, [r3, #2]
     f16:	4282      	cmp	r2, r0
     f18:	d106      	bne.n	f28 <udc_update_iface_desc+0x44>
     f1a:	78da      	ldrb	r2, [r3, #3]
     f1c:	428a      	cmp	r2, r1
     f1e:	d103      	bne.n	f28 <udc_update_iface_desc+0x44>
     f20:	4a09      	ldr	r2, [pc, #36]	; (f48 <udc_update_iface_desc+0x64>)
     f22:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     f24:	2201      	movs	r2, #1
     f26:	e008      	b.n	f3a <udc_update_iface_desc+0x56>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     f28:	781a      	ldrb	r2, [r3, #0]
     f2a:	189b      	adds	r3, r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     f2c:	42a3      	cmp	r3, r4
     f2e:	d3ee      	bcc.n	f0e <udc_update_iface_desc+0x2a>
     f30:	4a05      	ldr	r2, [pc, #20]	; (f48 <udc_update_iface_desc+0x64>)
     f32:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     f34:	2200      	movs	r2, #0
     f36:	e000      	b.n	f3a <udc_update_iface_desc+0x56>
     f38:	2200      	movs	r2, #0
}
     f3a:	1c10      	adds	r0, r2, #0
     f3c:	bd10      	pop	{r4, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	20000684 	.word	0x20000684
     f44:	20000678 	.word	0x20000678
     f48:	20000688 	.word	0x20000688

00000f4c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f4e:	4647      	mov	r7, r8
     f50:	b480      	push	{r7}
     f52:	1c04      	adds	r4, r0, #0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     f54:	2100      	movs	r1, #0
     f56:	4b12      	ldr	r3, [pc, #72]	; (fa0 <udc_iface_disable+0x54>)
     f58:	4798      	blx	r3
     f5a:	1e05      	subs	r5, r0, #0
     f5c:	d01c      	beq.n	f98 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f5e:	4b11      	ldr	r3, [pc, #68]	; (fa4 <udc_iface_disable+0x58>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	685b      	ldr	r3, [r3, #4]
     f64:	00a2      	lsls	r2, r4, #2
     f66:	58d3      	ldr	r3, [r2, r3]
     f68:	4698      	mov	r8, r3

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f6a:	68db      	ldr	r3, [r3, #12]
     f6c:	4798      	blx	r3
     f6e:	1c01      	adds	r1, r0, #0
     f70:	1c20      	adds	r0, r4, #0
     f72:	4b0b      	ldr	r3, [pc, #44]	; (fa0 <udc_iface_disable+0x54>)
     f74:	4798      	blx	r3
     f76:	1e05      	subs	r5, r0, #0
     f78:	d00e      	beq.n	f98 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     f7a:	4b0b      	ldr	r3, [pc, #44]	; (fa8 <udc_iface_disable+0x5c>)
     f7c:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     f7e:	4e0b      	ldr	r6, [pc, #44]	; (fac <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     f80:	4f0b      	ldr	r7, [pc, #44]	; (fb0 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     f82:	1c20      	adds	r0, r4, #0
     f84:	2105      	movs	r1, #5
     f86:	47b0      	blx	r6
     f88:	1e04      	subs	r4, r0, #0
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     f8a:	d002      	beq.n	f92 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     f8c:	7880      	ldrb	r0, [r0, #2]
     f8e:	47b8      	blx	r7
		}
     f90:	e7f7      	b.n	f82 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
     f92:	4643      	mov	r3, r8
     f94:	685b      	ldr	r3, [r3, #4]
     f96:	4798      	blx	r3
	return true;
}
     f98:	1c28      	adds	r0, r5, #0
     f9a:	bc04      	pop	{r2}
     f9c:	4690      	mov	r8, r2
     f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa0:	00000ee5 	.word	0x00000ee5
     fa4:	20000678 	.word	0x20000678
     fa8:	20000688 	.word	0x20000688
     fac:	00000e81 	.word	0x00000e81
     fb0:	00003bfd 	.word	0x00003bfd

00000fb4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fb6:	1c05      	adds	r5, r0, #0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     fb8:	4b0f      	ldr	r3, [pc, #60]	; (ff8 <udc_iface_enable+0x44>)
     fba:	4798      	blx	r3
     fbc:	2800      	cmp	r0, #0
     fbe:	d019      	beq.n	ff4 <udc_iface_enable+0x40>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     fc0:	4b0e      	ldr	r3, [pc, #56]	; (ffc <udc_iface_enable+0x48>)
     fc2:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     fc4:	4e0e      	ldr	r6, [pc, #56]	; (1000 <udc_iface_enable+0x4c>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     fc6:	4f0f      	ldr	r7, [pc, #60]	; (1004 <udc_iface_enable+0x50>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     fc8:	1c20      	adds	r0, r4, #0
     fca:	2105      	movs	r1, #5
     fcc:	47b0      	blx	r6
     fce:	1e04      	subs	r4, r0, #0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     fd0:	d009      	beq.n	fe6 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     fd2:	7880      	ldrb	r0, [r0, #2]
     fd4:	78e1      	ldrb	r1, [r4, #3]
     fd6:	7923      	ldrb	r3, [r4, #4]
     fd8:	7962      	ldrb	r2, [r4, #5]
     fda:	0212      	lsls	r2, r2, #8
     fdc:	431a      	orrs	r2, r3
     fde:	47b8      	blx	r7
     fe0:	2800      	cmp	r0, #0
     fe2:	d1f1      	bne.n	fc8 <udc_iface_enable+0x14>
     fe4:	e006      	b.n	ff4 <udc_iface_enable+0x40>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     fe6:	4b08      	ldr	r3, [pc, #32]	; (1008 <udc_iface_enable+0x54>)
     fe8:	681b      	ldr	r3, [r3, #0]
     fea:	685b      	ldr	r3, [r3, #4]
     fec:	00ad      	lsls	r5, r5, #2
     fee:	58eb      	ldr	r3, [r5, r3]
     ff0:	681b      	ldr	r3, [r3, #0]
     ff2:	4798      	blx	r3
}
     ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	00000ee5 	.word	0x00000ee5
     ffc:	20000688 	.word	0x20000688
    1000:	00000e81 	.word	0x00000e81
    1004:	00003c55 	.word	0x00003c55
    1008:	20000678 	.word	0x20000678

0000100c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    100c:	b508      	push	{r3, lr}
	udd_enable();
    100e:	4b01      	ldr	r3, [pc, #4]	; (1014 <udc_start+0x8>)
    1010:	4798      	blx	r3
}
    1012:	bd08      	pop	{r3, pc}
    1014:	00004225 	.word	0x00004225

00001018 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    1018:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
    101a:	4b0e      	ldr	r3, [pc, #56]	; (1054 <udc_reset+0x3c>)
    101c:	781b      	ldrb	r3, [r3, #0]
    101e:	2b00      	cmp	r3, #0
    1020:	d011      	beq.n	1046 <udc_reset+0x2e>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1022:	4b0d      	ldr	r3, [pc, #52]	; (1058 <udc_reset+0x40>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1028:	791b      	ldrb	r3, [r3, #4]
    102a:	2b00      	cmp	r3, #0
    102c:	d00b      	beq.n	1046 <udc_reset+0x2e>
    102e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    1030:	4e0a      	ldr	r6, [pc, #40]	; (105c <udc_reset+0x44>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1032:	4d09      	ldr	r5, [pc, #36]	; (1058 <udc_reset+0x40>)
				iface_num++) {
			udc_iface_disable(iface_num);
    1034:	1c20      	adds	r0, r4, #0
    1036:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1038:	3401      	adds	r4, #1
    103a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    103c:	682b      	ldr	r3, [r5, #0]
    103e:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1040:	791b      	ldrb	r3, [r3, #4]
    1042:	42a3      	cmp	r3, r4
    1044:	d8f6      	bhi.n	1034 <udc_reset+0x1c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    1046:	2200      	movs	r2, #0
    1048:	4b02      	ldr	r3, [pc, #8]	; (1054 <udc_reset+0x3c>)
    104a:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    104c:	3201      	adds	r2, #1
    104e:	4b04      	ldr	r3, [pc, #16]	; (1060 <udc_reset+0x48>)
    1050:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    1052:	bd70      	pop	{r4, r5, r6, pc}
    1054:	20000684 	.word	0x20000684
    1058:	20000678 	.word	0x20000678
    105c:	00000f4d 	.word	0x00000f4d
    1060:	20000680 	.word	0x20000680

00001064 <udc_sof_notify>:

void udc_sof_notify(void)
{
    1064:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
    1066:	4b0d      	ldr	r3, [pc, #52]	; (109c <udc_sof_notify+0x38>)
    1068:	781b      	ldrb	r3, [r3, #0]
    106a:	2b00      	cmp	r3, #0
    106c:	d015      	beq.n	109a <udc_sof_notify+0x36>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    106e:	4b0c      	ldr	r3, [pc, #48]	; (10a0 <udc_sof_notify+0x3c>)
    1070:	681b      	ldr	r3, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1072:	681a      	ldr	r2, [r3, #0]
    1074:	7912      	ldrb	r2, [r2, #4]
    1076:	2a00      	cmp	r2, #0
    1078:	d00f      	beq.n	109a <udc_sof_notify+0x36>
    107a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    107c:	4d08      	ldr	r5, [pc, #32]	; (10a0 <udc_sof_notify+0x3c>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    107e:	685b      	ldr	r3, [r3, #4]
    1080:	00a2      	lsls	r2, r4, #2
    1082:	58d3      	ldr	r3, [r2, r3]
    1084:	691b      	ldr	r3, [r3, #16]
    1086:	2b00      	cmp	r3, #0
    1088:	d000      	beq.n	108c <udc_sof_notify+0x28>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    108a:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    108c:	3401      	adds	r4, #1
    108e:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1090:	682b      	ldr	r3, [r5, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1092:	681a      	ldr	r2, [r3, #0]
    1094:	7912      	ldrb	r2, [r2, #4]
    1096:	42a2      	cmp	r2, r4
    1098:	d8f1      	bhi.n	107e <udc_sof_notify+0x1a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    109a:	bd38      	pop	{r3, r4, r5, pc}
    109c:	20000684 	.word	0x20000684
    10a0:	20000678 	.word	0x20000678

000010a4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    10a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    10a6:	4bbd      	ldr	r3, [pc, #756]	; (139c <udc_process_setup+0x2f8>)
    10a8:	2200      	movs	r2, #0
    10aa:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    10ac:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    10ae:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    10b0:	781b      	ldrb	r3, [r3, #0]
    10b2:	b25a      	sxtb	r2, r3
    10b4:	2a00      	cmp	r2, #0
    10b6:	db00      	blt.n	10ba <udc_process_setup+0x16>
    10b8:	e1f6      	b.n	14a8 <udc_process_setup+0x404>
		if (udd_g_ctrlreq.req.wLength == 0) {
    10ba:	4ab8      	ldr	r2, [pc, #736]	; (139c <udc_process_setup+0x2f8>)
    10bc:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    10be:	2000      	movs	r0, #0
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
    10c0:	2a00      	cmp	r2, #0
    10c2:	d000      	beq.n	10c6 <udc_process_setup+0x22>
    10c4:	e1f4      	b.n	14b0 <udc_process_setup+0x40c>
    10c6:	e1f8      	b.n	14ba <udc_process_setup+0x416>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    10c8:	211f      	movs	r1, #31
    10ca:	400b      	ands	r3, r1
    10cc:	d17b      	bne.n	11c6 <udc_process_setup+0x122>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    10ce:	49b3      	ldr	r1, [pc, #716]	; (139c <udc_process_setup+0x2f8>)
    10d0:	7849      	ldrb	r1, [r1, #1]
    10d2:	2906      	cmp	r1, #6
    10d4:	d00b      	beq.n	10ee <udc_process_setup+0x4a>
    10d6:	2908      	cmp	r1, #8
    10d8:	d06d      	beq.n	11b6 <udc_process_setup+0x112>
    10da:	2900      	cmp	r1, #0
    10dc:	d173      	bne.n	11c6 <udc_process_setup+0x122>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    10de:	2a02      	cmp	r2, #2
    10e0:	d000      	beq.n	10e4 <udc_process_setup+0x40>
    10e2:	e18e      	b.n	1402 <udc_process_setup+0x35e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    10e4:	48ae      	ldr	r0, [pc, #696]	; (13a0 <udc_process_setup+0x2fc>)
    10e6:	3102      	adds	r1, #2
    10e8:	4bae      	ldr	r3, [pc, #696]	; (13a4 <udc_process_setup+0x300>)
    10ea:	4798      	blx	r3
    10ec:	e1e4      	b.n	14b8 <udc_process_setup+0x414>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    10ee:	4bab      	ldr	r3, [pc, #684]	; (139c <udc_process_setup+0x2f8>)
    10f0:	885b      	ldrh	r3, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    10f2:	0a1a      	lsrs	r2, r3, #8
    10f4:	2a02      	cmp	r2, #2
    10f6:	d010      	beq.n	111a <udc_process_setup+0x76>
    10f8:	b2d1      	uxtb	r1, r2
    10fa:	2902      	cmp	r1, #2
    10fc:	d802      	bhi.n	1104 <udc_process_setup+0x60>
    10fe:	2a01      	cmp	r2, #1
    1100:	d005      	beq.n	110e <udc_process_setup+0x6a>
    1102:	e148      	b.n	1396 <udc_process_setup+0x2f2>
    1104:	2a03      	cmp	r2, #3
    1106:	d02a      	beq.n	115e <udc_process_setup+0xba>
    1108:	2a0f      	cmp	r2, #15
    110a:	d01c      	beq.n	1146 <udc_process_setup+0xa2>
    110c:	e143      	b.n	1396 <udc_process_setup+0x2f2>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    110e:	4ba6      	ldr	r3, [pc, #664]	; (13a8 <udc_process_setup+0x304>)
    1110:	6818      	ldr	r0, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1112:	7801      	ldrb	r1, [r0, #0]
    1114:	4ba3      	ldr	r3, [pc, #652]	; (13a4 <udc_process_setup+0x300>)
    1116:	4798      	blx	r3
    1118:	e044      	b.n	11a4 <udc_process_setup+0x100>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    111a:	b2db      	uxtb	r3, r3
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    111c:	4aa2      	ldr	r2, [pc, #648]	; (13a8 <udc_process_setup+0x304>)
    111e:	6812      	ldr	r2, [r2, #0]
    1120:	7c52      	ldrb	r2, [r2, #17]
    1122:	429a      	cmp	r2, r3
    1124:	d800      	bhi.n	1128 <udc_process_setup+0x84>
    1126:	e16c      	b.n	1402 <udc_process_setup+0x35e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1128:	4a9f      	ldr	r2, [pc, #636]	; (13a8 <udc_process_setup+0x304>)
    112a:	6852      	ldr	r2, [r2, #4]
    112c:	00db      	lsls	r3, r3, #3
    112e:	5898      	ldr	r0, [r3, r2]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1130:	7883      	ldrb	r3, [r0, #2]
    1132:	78c1      	ldrb	r1, [r0, #3]
    1134:	0209      	lsls	r1, r1, #8
    1136:	4319      	orrs	r1, r3
    1138:	4b9a      	ldr	r3, [pc, #616]	; (13a4 <udc_process_setup+0x300>)
    113a:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    113c:	4b97      	ldr	r3, [pc, #604]	; (139c <udc_process_setup+0x2f8>)
    113e:	689b      	ldr	r3, [r3, #8]
    1140:	2202      	movs	r2, #2
    1142:	705a      	strb	r2, [r3, #1]
    1144:	e02e      	b.n	11a4 <udc_process_setup+0x100>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1146:	4b98      	ldr	r3, [pc, #608]	; (13a8 <udc_process_setup+0x304>)
    1148:	6898      	ldr	r0, [r3, #8]
    114a:	2800      	cmp	r0, #0
    114c:	d100      	bne.n	1150 <udc_process_setup+0xac>
    114e:	e158      	b.n	1402 <udc_process_setup+0x35e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1150:	7883      	ldrb	r3, [r0, #2]
    1152:	78c1      	ldrb	r1, [r0, #3]
    1154:	0209      	lsls	r1, r1, #8
    1156:	4319      	orrs	r1, r3
    1158:	4b92      	ldr	r3, [pc, #584]	; (13a4 <udc_process_setup+0x300>)
    115a:	4798      	blx	r3
    115c:	e022      	b.n	11a4 <udc_process_setup+0x100>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    115e:	22ff      	movs	r2, #255	; 0xff
    1160:	4013      	ands	r3, r2
    1162:	2b01      	cmp	r3, #1
    1164:	d00c      	beq.n	1180 <udc_process_setup+0xdc>
    1166:	2b00      	cmp	r3, #0
    1168:	d005      	beq.n	1176 <udc_process_setup+0xd2>
    116a:	2b02      	cmp	r3, #2
    116c:	d000      	beq.n	1170 <udc_process_setup+0xcc>
    116e:	e148      	b.n	1402 <udc_process_setup+0x35e>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1170:	4c8e      	ldr	r4, [pc, #568]	; (13ac <udc_process_setup+0x308>)
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1172:	210f      	movs	r1, #15
    1174:	e006      	b.n	1184 <udc_process_setup+0xe0>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1176:	488e      	ldr	r0, [pc, #568]	; (13b0 <udc_process_setup+0x30c>)
    1178:	2104      	movs	r1, #4
    117a:	4b8a      	ldr	r3, [pc, #552]	; (13a4 <udc_process_setup+0x300>)
    117c:	4798      	blx	r3
    117e:	e011      	b.n	11a4 <udc_process_setup+0x100>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1180:	4c8c      	ldr	r4, [pc, #560]	; (13b4 <udc_process_setup+0x310>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1182:	2109      	movs	r1, #9
    1184:	4a8c      	ldr	r2, [pc, #560]	; (13b8 <udc_process_setup+0x314>)
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1186:	2300      	movs	r3, #0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1188:	5ce0      	ldrb	r0, [r4, r3]
    118a:	8050      	strh	r0, [r2, #2]
    118c:	3301      	adds	r3, #1
    118e:	3202      	adds	r2, #2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1190:	b2d8      	uxtb	r0, r3
    1192:	4288      	cmp	r0, r1
    1194:	d3f8      	bcc.n	1188 <udc_process_setup+0xe4>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1196:	0049      	lsls	r1, r1, #1
    1198:	3102      	adds	r1, #2
    119a:	4887      	ldr	r0, [pc, #540]	; (13b8 <udc_process_setup+0x314>)
    119c:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    119e:	b289      	uxth	r1, r1
    11a0:	4b80      	ldr	r3, [pc, #512]	; (13a4 <udc_process_setup+0x300>)
    11a2:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    11a4:	4b7d      	ldr	r3, [pc, #500]	; (139c <udc_process_setup+0x2f8>)
    11a6:	88da      	ldrh	r2, [r3, #6]
    11a8:	899b      	ldrh	r3, [r3, #12]
    11aa:	4293      	cmp	r3, r2
    11ac:	d800      	bhi.n	11b0 <udc_process_setup+0x10c>
    11ae:	e183      	b.n	14b8 <udc_process_setup+0x414>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    11b0:	4b7a      	ldr	r3, [pc, #488]	; (139c <udc_process_setup+0x2f8>)
    11b2:	819a      	strh	r2, [r3, #12]
    11b4:	e180      	b.n	14b8 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    11b6:	2a01      	cmp	r2, #1
    11b8:	d000      	beq.n	11bc <udc_process_setup+0x118>
    11ba:	e122      	b.n	1402 <udc_process_setup+0x35e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    11bc:	487f      	ldr	r0, [pc, #508]	; (13bc <udc_process_setup+0x318>)
    11be:	2101      	movs	r1, #1
    11c0:	4b78      	ldr	r3, [pc, #480]	; (13a4 <udc_process_setup+0x300>)
    11c2:	4798      	blx	r3
    11c4:	e178      	b.n	14b8 <udc_process_setup+0x414>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    11c6:	2b01      	cmp	r3, #1
    11c8:	d127      	bne.n	121a <udc_process_setup+0x176>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    11ca:	4974      	ldr	r1, [pc, #464]	; (139c <udc_process_setup+0x2f8>)
    11cc:	7849      	ldrb	r1, [r1, #1]
    11ce:	290a      	cmp	r1, #10
    11d0:	d123      	bne.n	121a <udc_process_setup+0x176>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    11d2:	2a01      	cmp	r2, #1
    11d4:	d000      	beq.n	11d8 <udc_process_setup+0x134>
    11d6:	e114      	b.n	1402 <udc_process_setup+0x35e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    11d8:	4b78      	ldr	r3, [pc, #480]	; (13bc <udc_process_setup+0x318>)
    11da:	781b      	ldrb	r3, [r3, #0]
    11dc:	2b00      	cmp	r3, #0
    11de:	d100      	bne.n	11e2 <udc_process_setup+0x13e>
    11e0:	e10f      	b.n	1402 <udc_process_setup+0x35e>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    11e2:	4b6e      	ldr	r3, [pc, #440]	; (139c <udc_process_setup+0x2f8>)
    11e4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    11e6:	4b76      	ldr	r3, [pc, #472]	; (13c0 <udc_process_setup+0x31c>)
    11e8:	681d      	ldr	r5, [r3, #0]
    11ea:	682b      	ldr	r3, [r5, #0]
    11ec:	791b      	ldrb	r3, [r3, #4]
    11ee:	42a3      	cmp	r3, r4
    11f0:	d800      	bhi.n	11f4 <udc_process_setup+0x150>
    11f2:	e106      	b.n	1402 <udc_process_setup+0x35e>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    11f4:	1c20      	adds	r0, r4, #0
    11f6:	2100      	movs	r1, #0
    11f8:	4b72      	ldr	r3, [pc, #456]	; (13c4 <udc_process_setup+0x320>)
    11fa:	4798      	blx	r3
    11fc:	2800      	cmp	r0, #0
    11fe:	d100      	bne.n	1202 <udc_process_setup+0x15e>
    1200:	e0ff      	b.n	1402 <udc_process_setup+0x35e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1202:	686b      	ldr	r3, [r5, #4]
    1204:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1206:	58e3      	ldr	r3, [r4, r3]
    1208:	68db      	ldr	r3, [r3, #12]
    120a:	4798      	blx	r3
    120c:	4b6e      	ldr	r3, [pc, #440]	; (13c8 <udc_process_setup+0x324>)
    120e:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1210:	1c18      	adds	r0, r3, #0
    1212:	2101      	movs	r1, #1
    1214:	4b63      	ldr	r3, [pc, #396]	; (13a4 <udc_process_setup+0x300>)
    1216:	4798      	blx	r3
    1218:	e14e      	b.n	14b8 <udc_process_setup+0x414>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    121a:	2b02      	cmp	r3, #2
    121c:	d000      	beq.n	1220 <udc_process_setup+0x17c>
    121e:	e0f0      	b.n	1402 <udc_process_setup+0x35e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1220:	4b5e      	ldr	r3, [pc, #376]	; (139c <udc_process_setup+0x2f8>)
    1222:	785b      	ldrb	r3, [r3, #1]
				break;
			}
		}
#endif
	}
	return false;
    1224:	2000      	movs	r0, #0
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1226:	2b00      	cmp	r3, #0
    1228:	d000      	beq.n	122c <udc_process_setup+0x188>
    122a:	e0e8      	b.n	13fe <udc_process_setup+0x35a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    122c:	2a02      	cmp	r2, #2
    122e:	d000      	beq.n	1232 <udc_process_setup+0x18e>
    1230:	e0e7      	b.n	1402 <udc_process_setup+0x35e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1232:	4b5a      	ldr	r3, [pc, #360]	; (139c <udc_process_setup+0x2f8>)
    1234:	7918      	ldrb	r0, [r3, #4]
    1236:	4b65      	ldr	r3, [pc, #404]	; (13cc <udc_process_setup+0x328>)
    1238:	4798      	blx	r3
    123a:	4b65      	ldr	r3, [pc, #404]	; (13d0 <udc_process_setup+0x32c>)
    123c:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    123e:	1c18      	adds	r0, r3, #0
    1240:	2102      	movs	r1, #2
    1242:	4b58      	ldr	r3, [pc, #352]	; (13a4 <udc_process_setup+0x300>)
    1244:	4798      	blx	r3
    1246:	e137      	b.n	14b8 <udc_process_setup+0x414>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1248:	221f      	movs	r2, #31
    124a:	4013      	ands	r3, r2
    124c:	d162      	bne.n	1314 <udc_process_setup+0x270>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    124e:	4a53      	ldr	r2, [pc, #332]	; (139c <udc_process_setup+0x2f8>)
    1250:	7852      	ldrb	r2, [r2, #1]
    1252:	2a03      	cmp	r2, #3
    1254:	d100      	bne.n	1258 <udc_process_setup+0x1b4>
    1256:	e0cf      	b.n	13f8 <udc_process_setup+0x354>
    1258:	b2d1      	uxtb	r1, r2
    125a:	2903      	cmp	r1, #3
    125c:	d802      	bhi.n	1264 <udc_process_setup+0x1c0>
    125e:	2a01      	cmp	r2, #1
    1260:	d00e      	beq.n	1280 <udc_process_setup+0x1dc>
    1262:	e057      	b.n	1314 <udc_process_setup+0x270>
    1264:	2a05      	cmp	r2, #5
    1266:	d002      	beq.n	126e <udc_process_setup+0x1ca>
    1268:	2a09      	cmp	r2, #9
    126a:	d019      	beq.n	12a0 <udc_process_setup+0x1fc>
    126c:	e052      	b.n	1314 <udc_process_setup+0x270>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    126e:	4b4b      	ldr	r3, [pc, #300]	; (139c <udc_process_setup+0x2f8>)
    1270:	88db      	ldrh	r3, [r3, #6]
    1272:	2b00      	cmp	r3, #0
    1274:	d000      	beq.n	1278 <udc_process_setup+0x1d4>
    1276:	e0c4      	b.n	1402 <udc_process_setup+0x35e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1278:	4a56      	ldr	r2, [pc, #344]	; (13d4 <udc_process_setup+0x330>)
    127a:	4b48      	ldr	r3, [pc, #288]	; (139c <udc_process_setup+0x2f8>)
    127c:	611a      	str	r2, [r3, #16]
    127e:	e11b      	b.n	14b8 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1280:	4b46      	ldr	r3, [pc, #280]	; (139c <udc_process_setup+0x2f8>)
    1282:	88db      	ldrh	r3, [r3, #6]
    1284:	2b00      	cmp	r3, #0
    1286:	d000      	beq.n	128a <udc_process_setup+0x1e6>
    1288:	e0bb      	b.n	1402 <udc_process_setup+0x35e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    128a:	4b44      	ldr	r3, [pc, #272]	; (139c <udc_process_setup+0x2f8>)
    128c:	885b      	ldrh	r3, [r3, #2]
    128e:	2b01      	cmp	r3, #1
    1290:	d000      	beq.n	1294 <udc_process_setup+0x1f0>
    1292:	e0b6      	b.n	1402 <udc_process_setup+0x35e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1294:	4a42      	ldr	r2, [pc, #264]	; (13a0 <udc_process_setup+0x2fc>)
    1296:	8813      	ldrh	r3, [r2, #0]
    1298:	2102      	movs	r1, #2
    129a:	438b      	bics	r3, r1
    129c:	8013      	strh	r3, [r2, #0]
    129e:	e10b      	b.n	14b8 <udc_process_setup+0x414>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    12a0:	4b3e      	ldr	r3, [pc, #248]	; (139c <udc_process_setup+0x2f8>)
    12a2:	88db      	ldrh	r3, [r3, #6]
    12a4:	2b00      	cmp	r3, #0
    12a6:	d000      	beq.n	12aa <udc_process_setup+0x206>
    12a8:	e0ab      	b.n	1402 <udc_process_setup+0x35e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    12aa:	4b4b      	ldr	r3, [pc, #300]	; (13d8 <udc_process_setup+0x334>)
    12ac:	4798      	blx	r3
    12ae:	2800      	cmp	r0, #0
    12b0:	d100      	bne.n	12b4 <udc_process_setup+0x210>
    12b2:	e0a6      	b.n	1402 <udc_process_setup+0x35e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    12b4:	4b39      	ldr	r3, [pc, #228]	; (139c <udc_process_setup+0x2f8>)
    12b6:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    12b8:	4b3b      	ldr	r3, [pc, #236]	; (13a8 <udc_process_setup+0x304>)
    12ba:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    12bc:	7c5b      	ldrb	r3, [r3, #17]
    12be:	429a      	cmp	r2, r3
    12c0:	dd00      	ble.n	12c4 <udc_process_setup+0x220>
    12c2:	e09e      	b.n	1402 <udc_process_setup+0x35e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    12c4:	4b45      	ldr	r3, [pc, #276]	; (13dc <udc_process_setup+0x338>)
    12c6:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    12c8:	4b34      	ldr	r3, [pc, #208]	; (139c <udc_process_setup+0x2f8>)
    12ca:	789b      	ldrb	r3, [r3, #2]
    12cc:	4a3b      	ldr	r2, [pc, #236]	; (13bc <udc_process_setup+0x318>)
    12ce:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    12d0:	2b00      	cmp	r3, #0
    12d2:	d100      	bne.n	12d6 <udc_process_setup+0x232>
    12d4:	e0f0      	b.n	14b8 <udc_process_setup+0x414>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    12d6:	4a42      	ldr	r2, [pc, #264]	; (13e0 <udc_process_setup+0x33c>)
    12d8:	4694      	mov	ip, r2
    12da:	4463      	add	r3, ip
    12dc:	00db      	lsls	r3, r3, #3
    12de:	4a32      	ldr	r2, [pc, #200]	; (13a8 <udc_process_setup+0x304>)
    12e0:	6852      	ldr	r2, [r2, #4]
    12e2:	18d3      	adds	r3, r2, r3
    12e4:	4a36      	ldr	r2, [pc, #216]	; (13c0 <udc_process_setup+0x31c>)
    12e6:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12e8:	681b      	ldr	r3, [r3, #0]
    12ea:	791b      	ldrb	r3, [r3, #4]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d100      	bne.n	12f2 <udc_process_setup+0x24e>
    12f0:	e0e2      	b.n	14b8 <udc_process_setup+0x414>
    12f2:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    12f4:	4d3b      	ldr	r5, [pc, #236]	; (13e4 <udc_process_setup+0x340>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12f6:	1c16      	adds	r6, r2, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    12f8:	1c20      	adds	r0, r4, #0
    12fa:	2100      	movs	r1, #0
    12fc:	47a8      	blx	r5
    12fe:	2800      	cmp	r0, #0
    1300:	d100      	bne.n	1304 <udc_process_setup+0x260>
    1302:	e07e      	b.n	1402 <udc_process_setup+0x35e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1304:	3401      	adds	r4, #1
    1306:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1308:	6833      	ldr	r3, [r6, #0]
    130a:	681b      	ldr	r3, [r3, #0]
    130c:	791b      	ldrb	r3, [r3, #4]
    130e:	42a3      	cmp	r3, r4
    1310:	d8f2      	bhi.n	12f8 <udc_process_setup+0x254>
    1312:	e0d1      	b.n	14b8 <udc_process_setup+0x414>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1314:	2b01      	cmp	r3, #1
    1316:	d118      	bne.n	134a <udc_process_setup+0x2a6>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1318:	4a20      	ldr	r2, [pc, #128]	; (139c <udc_process_setup+0x2f8>)
    131a:	7852      	ldrb	r2, [r2, #1]
    131c:	2a0b      	cmp	r2, #11
    131e:	d114      	bne.n	134a <udc_process_setup+0x2a6>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1320:	4b1e      	ldr	r3, [pc, #120]	; (139c <udc_process_setup+0x2f8>)
    1322:	88db      	ldrh	r3, [r3, #6]
    1324:	2b00      	cmp	r3, #0
    1326:	d16c      	bne.n	1402 <udc_process_setup+0x35e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1328:	4b24      	ldr	r3, [pc, #144]	; (13bc <udc_process_setup+0x318>)
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	2b00      	cmp	r3, #0
    132e:	d068      	beq.n	1402 <udc_process_setup+0x35e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1330:	4b1a      	ldr	r3, [pc, #104]	; (139c <udc_process_setup+0x2f8>)
    1332:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1334:	885c      	ldrh	r4, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1336:	1c28      	adds	r0, r5, #0
    1338:	4b2b      	ldr	r3, [pc, #172]	; (13e8 <udc_process_setup+0x344>)
    133a:	4798      	blx	r3
    133c:	2800      	cmp	r0, #0
    133e:	d060      	beq.n	1402 <udc_process_setup+0x35e>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1340:	b2e1      	uxtb	r1, r4
    1342:	1c28      	adds	r0, r5, #0
    1344:	4b27      	ldr	r3, [pc, #156]	; (13e4 <udc_process_setup+0x340>)
    1346:	4798      	blx	r3
    1348:	e059      	b.n	13fe <udc_process_setup+0x35a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    134a:	2b02      	cmp	r3, #2
    134c:	d159      	bne.n	1402 <udc_process_setup+0x35e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    134e:	4b13      	ldr	r3, [pc, #76]	; (139c <udc_process_setup+0x2f8>)
    1350:	785b      	ldrb	r3, [r3, #1]
    1352:	2b01      	cmp	r3, #1
    1354:	d002      	beq.n	135c <udc_process_setup+0x2b8>
    1356:	2b03      	cmp	r3, #3
    1358:	d00d      	beq.n	1376 <udc_process_setup+0x2d2>
    135a:	e04f      	b.n	13fc <udc_process_setup+0x358>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    135c:	4b0f      	ldr	r3, [pc, #60]	; (139c <udc_process_setup+0x2f8>)
    135e:	88db      	ldrh	r3, [r3, #6]
    1360:	2b00      	cmp	r3, #0
    1362:	d14e      	bne.n	1402 <udc_process_setup+0x35e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1364:	4b0d      	ldr	r3, [pc, #52]	; (139c <udc_process_setup+0x2f8>)
    1366:	885b      	ldrh	r3, [r3, #2]
    1368:	2b00      	cmp	r3, #0
    136a:	d14a      	bne.n	1402 <udc_process_setup+0x35e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    136c:	4b0b      	ldr	r3, [pc, #44]	; (139c <udc_process_setup+0x2f8>)
    136e:	7918      	ldrb	r0, [r3, #4]
    1370:	4b1e      	ldr	r3, [pc, #120]	; (13ec <udc_process_setup+0x348>)
    1372:	4798      	blx	r3
    1374:	e043      	b.n	13fe <udc_process_setup+0x35a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <udc_process_setup+0x2f8>)
    1378:	88db      	ldrh	r3, [r3, #6]
    137a:	2b00      	cmp	r3, #0
    137c:	d141      	bne.n	1402 <udc_process_setup+0x35e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    137e:	4b07      	ldr	r3, [pc, #28]	; (139c <udc_process_setup+0x2f8>)
    1380:	885b      	ldrh	r3, [r3, #2]
    1382:	2b00      	cmp	r3, #0
    1384:	d13d      	bne.n	1402 <udc_process_setup+0x35e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1386:	4c05      	ldr	r4, [pc, #20]	; (139c <udc_process_setup+0x2f8>)
    1388:	7920      	ldrb	r0, [r4, #4]
    138a:	4b19      	ldr	r3, [pc, #100]	; (13f0 <udc_process_setup+0x34c>)
    138c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    138e:	7920      	ldrb	r0, [r4, #4]
    1390:	4b18      	ldr	r3, [pc, #96]	; (13f4 <udc_process_setup+0x350>)
    1392:	4798      	blx	r3
    1394:	e033      	b.n	13fe <udc_process_setup+0x35a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1396:	2000      	movs	r0, #0
    1398:	e031      	b.n	13fe <udc_process_setup+0x35a>
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	20000a88 	.word	0x20000a88
    13a0:	20000680 	.word	0x20000680
    13a4:	00004139 	.word	0x00004139
    13a8:	20000034 	.word	0x20000034
    13ac:	200000a8 	.word	0x200000a8
    13b0:	200000e4 	.word	0x200000e4
    13b4:	200000b8 	.word	0x200000b8
    13b8:	200000c4 	.word	0x200000c4
    13bc:	20000684 	.word	0x20000684
    13c0:	20000678 	.word	0x20000678
    13c4:	00000ee5 	.word	0x00000ee5
    13c8:	2000067c 	.word	0x2000067c
    13cc:	00003d5d 	.word	0x00003d5d
    13d0:	2000067e 	.word	0x2000067e
    13d4:	00000ecd 	.word	0x00000ecd
    13d8:	000040d1 	.word	0x000040d1
    13dc:	00001019 	.word	0x00001019
    13e0:	1fffffff 	.word	0x1fffffff
    13e4:	00000fb5 	.word	0x00000fb5
    13e8:	00000f4d 	.word	0x00000f4d
    13ec:	00003ea1 	.word	0x00003ea1
    13f0:	00003b9d 	.word	0x00003b9d
    13f4:	00003d71 	.word	0x00003d71
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    13f8:	2000      	movs	r0, #0
    13fa:	e000      	b.n	13fe <udc_process_setup+0x35a>
				break;
			}
		}
#endif
	}
	return false;
    13fc:	2000      	movs	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    13fe:	2800      	cmp	r0, #0
    1400:	d15b      	bne.n	14ba <udc_process_setup+0x416>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1402:	4b2e      	ldr	r3, [pc, #184]	; (14bc <udc_process_setup+0x418>)
    1404:	781b      	ldrb	r3, [r3, #0]
    1406:	221f      	movs	r2, #31
    1408:	4013      	ands	r3, r2
    140a:	2b01      	cmp	r3, #1
    140c:	d120      	bne.n	1450 <udc_process_setup+0x3ac>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    140e:	4b2c      	ldr	r3, [pc, #176]	; (14c0 <udc_process_setup+0x41c>)
    1410:	781b      	ldrb	r3, [r3, #0]
    1412:	2b00      	cmp	r3, #0
    1414:	d01c      	beq.n	1450 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1416:	4b29      	ldr	r3, [pc, #164]	; (14bc <udc_process_setup+0x418>)
    1418:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    141a:	4b2a      	ldr	r3, [pc, #168]	; (14c4 <udc_process_setup+0x420>)
    141c:	681d      	ldr	r5, [r3, #0]
    141e:	682b      	ldr	r3, [r5, #0]
    1420:	791b      	ldrb	r3, [r3, #4]
    1422:	42a3      	cmp	r3, r4
    1424:	d914      	bls.n	1450 <udc_process_setup+0x3ac>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1426:	1c20      	adds	r0, r4, #0
    1428:	2100      	movs	r1, #0
    142a:	4b27      	ldr	r3, [pc, #156]	; (14c8 <udc_process_setup+0x424>)
    142c:	4798      	blx	r3
    142e:	2800      	cmp	r0, #0
    1430:	d00e      	beq.n	1450 <udc_process_setup+0x3ac>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1432:	686b      	ldr	r3, [r5, #4]
    1434:	00a2      	lsls	r2, r4, #2
    1436:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1438:	68eb      	ldr	r3, [r5, #12]
    143a:	4798      	blx	r3
    143c:	1c01      	adds	r1, r0, #0
    143e:	1c20      	adds	r0, r4, #0
    1440:	4b21      	ldr	r3, [pc, #132]	; (14c8 <udc_process_setup+0x424>)
    1442:	4798      	blx	r3
    1444:	2800      	cmp	r0, #0
    1446:	d003      	beq.n	1450 <udc_process_setup+0x3ac>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1448:	68ab      	ldr	r3, [r5, #8]
    144a:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    144c:	2800      	cmp	r0, #0
    144e:	d134      	bne.n	14ba <udc_process_setup+0x416>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1450:	4b1a      	ldr	r3, [pc, #104]	; (14bc <udc_process_setup+0x418>)
    1452:	781b      	ldrb	r3, [r3, #0]
    1454:	221f      	movs	r2, #31
    1456:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1458:	2000      	movs	r0, #0
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    145a:	2b02      	cmp	r3, #2
    145c:	d12d      	bne.n	14ba <udc_process_setup+0x416>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    145e:	4b18      	ldr	r3, [pc, #96]	; (14c0 <udc_process_setup+0x41c>)
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d029      	beq.n	14ba <udc_process_setup+0x416>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1466:	4b17      	ldr	r3, [pc, #92]	; (14c4 <udc_process_setup+0x420>)
    1468:	681b      	ldr	r3, [r3, #0]
    146a:	681a      	ldr	r2, [r3, #0]
    146c:	7912      	ldrb	r2, [r2, #4]
    146e:	2a00      	cmp	r2, #0
    1470:	d018      	beq.n	14a4 <udc_process_setup+0x400>
    1472:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1474:	4e14      	ldr	r6, [pc, #80]	; (14c8 <udc_process_setup+0x424>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1476:	4f13      	ldr	r7, [pc, #76]	; (14c4 <udc_process_setup+0x420>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1478:	685b      	ldr	r3, [r3, #4]
    147a:	00a2      	lsls	r2, r4, #2
    147c:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    147e:	68eb      	ldr	r3, [r5, #12]
    1480:	4798      	blx	r3
    1482:	1c01      	adds	r1, r0, #0
    1484:	1c20      	adds	r0, r4, #0
    1486:	47b0      	blx	r6
    1488:	2800      	cmp	r0, #0
    148a:	d016      	beq.n	14ba <udc_process_setup+0x416>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    148c:	68ab      	ldr	r3, [r5, #8]
    148e:	4798      	blx	r3
    1490:	2800      	cmp	r0, #0
    1492:	d112      	bne.n	14ba <udc_process_setup+0x416>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1494:	3401      	adds	r4, #1
    1496:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1498:	683b      	ldr	r3, [r7, #0]
    149a:	681a      	ldr	r2, [r3, #0]
    149c:	7912      	ldrb	r2, [r2, #4]
    149e:	42a2      	cmp	r2, r4
    14a0:	d8ea      	bhi.n	1478 <udc_process_setup+0x3d4>
    14a2:	e00a      	b.n	14ba <udc_process_setup+0x416>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    14a4:	2000      	movs	r0, #0
    14a6:	e008      	b.n	14ba <udc_process_setup+0x416>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    14a8:	2260      	movs	r2, #96	; 0x60
    14aa:	421a      	tst	r2, r3
    14ac:	d1a9      	bne.n	1402 <udc_process_setup+0x35e>
    14ae:	e6cb      	b.n	1248 <udc_process_setup+0x1a4>
    14b0:	2160      	movs	r1, #96	; 0x60
    14b2:	4219      	tst	r1, r3
    14b4:	d1a5      	bne.n	1402 <udc_process_setup+0x35e>
    14b6:	e607      	b.n	10c8 <udc_process_setup+0x24>
		if (udc_reqstd()) {
			return true;
    14b8:	2001      	movs	r0, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    14ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14bc:	20000a88 	.word	0x20000a88
    14c0:	20000684 	.word	0x20000684
    14c4:	20000678 	.word	0x20000678
    14c8:	00000ee5 	.word	0x00000ee5

000014cc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    14cc:	4b0c      	ldr	r3, [pc, #48]	; (1500 <cpu_irq_enter_critical+0x34>)
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	2b00      	cmp	r3, #0
    14d2:	d110      	bne.n	14f6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    14d4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    14d8:	2b00      	cmp	r3, #0
    14da:	d109      	bne.n	14f0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    14dc:	b672      	cpsid	i
    14de:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    14e2:	2200      	movs	r2, #0
    14e4:	4b07      	ldr	r3, [pc, #28]	; (1504 <cpu_irq_enter_critical+0x38>)
    14e6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    14e8:	3201      	adds	r2, #1
    14ea:	4b07      	ldr	r3, [pc, #28]	; (1508 <cpu_irq_enter_critical+0x3c>)
    14ec:	701a      	strb	r2, [r3, #0]
    14ee:	e002      	b.n	14f6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    14f0:	2200      	movs	r2, #0
    14f2:	4b05      	ldr	r3, [pc, #20]	; (1508 <cpu_irq_enter_critical+0x3c>)
    14f4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    14f6:	4a02      	ldr	r2, [pc, #8]	; (1500 <cpu_irq_enter_critical+0x34>)
    14f8:	6813      	ldr	r3, [r2, #0]
    14fa:	3301      	adds	r3, #1
    14fc:	6013      	str	r3, [r2, #0]
}
    14fe:	4770      	bx	lr
    1500:	2000068c 	.word	0x2000068c
    1504:	200000e8 	.word	0x200000e8
    1508:	20000690 	.word	0x20000690

0000150c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    150c:	4b08      	ldr	r3, [pc, #32]	; (1530 <cpu_irq_leave_critical+0x24>)
    150e:	681a      	ldr	r2, [r3, #0]
    1510:	3a01      	subs	r2, #1
    1512:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1514:	681b      	ldr	r3, [r3, #0]
    1516:	2b00      	cmp	r3, #0
    1518:	d109      	bne.n	152e <cpu_irq_leave_critical+0x22>
    151a:	4b06      	ldr	r3, [pc, #24]	; (1534 <cpu_irq_leave_critical+0x28>)
    151c:	781b      	ldrb	r3, [r3, #0]
    151e:	2b00      	cmp	r3, #0
    1520:	d005      	beq.n	152e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1522:	2201      	movs	r2, #1
    1524:	4b04      	ldr	r3, [pc, #16]	; (1538 <cpu_irq_leave_critical+0x2c>)
    1526:	701a      	strb	r2, [r3, #0]
    1528:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    152c:	b662      	cpsie	i
	}
}
    152e:	4770      	bx	lr
    1530:	2000068c 	.word	0x2000068c
    1534:	20000690 	.word	0x20000690
    1538:	200000e8 	.word	0x200000e8

0000153c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    153c:	b5f0      	push	{r4, r5, r6, r7, lr}
    153e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1540:	ac01      	add	r4, sp, #4
    1542:	2501      	movs	r5, #1
    1544:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1546:	2700      	movs	r7, #0
    1548:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    154a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    154c:	203e      	movs	r0, #62	; 0x3e
    154e:	1c21      	adds	r1, r4, #0
    1550:	4e06      	ldr	r6, [pc, #24]	; (156c <system_board_init+0x30>)
    1552:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1554:	2280      	movs	r2, #128	; 0x80
    1556:	05d2      	lsls	r2, r2, #23
    1558:	4b05      	ldr	r3, [pc, #20]	; (1570 <system_board_init+0x34>)
    155a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    155c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    155e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1560:	200f      	movs	r0, #15
    1562:	1c21      	adds	r1, r4, #0
    1564:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1566:	b003      	add	sp, #12
    1568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	000019c9 	.word	0x000019c9
    1570:	41004480 	.word	0x41004480

00001574 <events_create_hook>:
extern struct _events_module _events_inst;

enum status_code events_create_hook(struct events_hook *hook, events_interrupt_hook func)
{
	/* Initialize the hook struct members */
	hook->next      = NULL;
    1574:	2300      	movs	r3, #0
    1576:	6083      	str	r3, [r0, #8]
	hook->resource  = NULL;
    1578:	6003      	str	r3, [r0, #0]
	hook->hook_func = func;
    157a:	6041      	str	r1, [r0, #4]

	return STATUS_OK;
}
    157c:	2000      	movs	r0, #0
    157e:	4770      	bx	lr

00001580 <events_add_hook>:
enum status_code events_add_hook(struct events_resource *resource, struct events_hook *hook)
{
	struct events_hook *tmp_hook = NULL;

	/* Associate the hook with the resource */
	hook->resource = resource;
    1580:	6008      	str	r0, [r1, #0]

	/* Check if this is the first hook in the list */
	if (_events_inst.hook_list == NULL) {
    1582:	4b0a      	ldr	r3, [pc, #40]	; (15ac <events_add_hook+0x2c>)
    1584:	691a      	ldr	r2, [r3, #16]
    1586:	2a00      	cmp	r2, #0
    1588:	d102      	bne.n	1590 <events_add_hook+0x10>
		_events_inst.hook_list = hook;
    158a:	6119      	str	r1, [r3, #16]
    158c:	e004      	b.n	1598 <events_add_hook+0x18>
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
			tmp_hook = tmp_hook->next;
    158e:	1c1a      	adds	r2, r3, #0
		_events_inst.hook_list = hook;
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
    1590:	6893      	ldr	r3, [r2, #8]
    1592:	2b00      	cmp	r3, #0
    1594:	d1fb      	bne.n	158e <events_add_hook+0xe>
			tmp_hook = tmp_hook->next;
		}

		/* Put the hook into the next free place in the list */
		tmp_hook->next = hook;
    1596:	6091      	str	r1, [r2, #8]
 *
 */
static inline bool system_interrupt_is_enabled(
		const enum system_interrupt_vector vector)
{
	return (bool)((NVIC->ISER[0] >> (uint32_t)vector) & 0x00000001);
    1598:	4b05      	ldr	r3, [pc, #20]	; (15b0 <events_add_hook+0x30>)
    159a:	681b      	ldr	r3, [r3, #0]
	}

	/* Check if interrupts from the EVSYS module is enabled in the interrupt controller */
	if (!system_interrupt_is_enabled(SYSTEM_INTERRUPT_MODULE_EVSYS)) {
    159c:	05db      	lsls	r3, r3, #23
    159e:	d403      	bmi.n	15a8 <events_add_hook+0x28>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    15a0:	2280      	movs	r2, #128	; 0x80
    15a2:	0052      	lsls	r2, r2, #1
    15a4:	4b02      	ldr	r3, [pc, #8]	; (15b0 <events_add_hook+0x30>)
    15a6:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EVSYS);
	}

	return STATUS_OK;
}
    15a8:	2000      	movs	r0, #0
    15aa:	4770      	bx	lr
    15ac:	200000ec 	.word	0x200000ec
    15b0:	e000e100 	.word	0xe000e100

000015b4 <events_enable_interrupt_source>:

	return STATUS_OK;
}

enum status_code events_enable_interrupt_source(struct events_resource *resource, enum events_interrupt_source source)
{
    15b4:	b508      	push	{r3, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
    15b6:	2901      	cmp	r1, #1
    15b8:	d107      	bne.n	15ca <events_enable_interrupt_source+0x16>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
    15ba:	7800      	ldrb	r0, [r0, #0]
    15bc:	3107      	adds	r1, #7
    15be:	4b08      	ldr	r3, [pc, #32]	; (15e0 <events_enable_interrupt_source+0x2c>)
    15c0:	4798      	blx	r3
    15c2:	4b08      	ldr	r3, [pc, #32]	; (15e4 <events_enable_interrupt_source+0x30>)
    15c4:	6158      	str	r0, [r3, #20]
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    15c6:	2300      	movs	r3, #0
    15c8:	e008      	b.n	15dc <events_enable_interrupt_source+0x28>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
    15ca:	2317      	movs	r3, #23
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
    15cc:	2900      	cmp	r1, #0
    15ce:	d105      	bne.n	15dc <events_enable_interrupt_source+0x28>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
    15d0:	7800      	ldrb	r0, [r0, #0]
    15d2:	4b03      	ldr	r3, [pc, #12]	; (15e0 <events_enable_interrupt_source+0x2c>)
    15d4:	4798      	blx	r3
    15d6:	4b03      	ldr	r3, [pc, #12]	; (15e4 <events_enable_interrupt_source+0x30>)
    15d8:	6158      	str	r0, [r3, #20]
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    15da:	2300      	movs	r3, #0
}
    15dc:	1c18      	adds	r0, r3, #0
    15de:	bd08      	pop	{r3, pc}
    15e0:	0000168d 	.word	0x0000168d
    15e4:	42000400 	.word	0x42000400

000015e8 <events_is_interrupt_set>:
	return STATUS_OK;
}


bool events_is_interrupt_set(struct events_resource *resource, enum events_interrupt_source source)
{
    15e8:	b508      	push	{r3, lr}
    15ea:	1c03      	adds	r3, r0, #0
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
    15ec:	2901      	cmp	r1, #1
    15ee:	d104      	bne.n	15fa <events_is_interrupt_set+0x12>
		bitpos = _events_find_bit_position(resource->channel,
    15f0:	7800      	ldrb	r0, [r0, #0]
    15f2:	3107      	adds	r1, #7
    15f4:	4b07      	ldr	r3, [pc, #28]	; (1614 <events_is_interrupt_set+0x2c>)
    15f6:	4798      	blx	r3
    15f8:	e005      	b.n	1606 <events_is_interrupt_set+0x1e>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
    15fa:	2000      	movs	r0, #0
	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
    15fc:	2900      	cmp	r1, #0
    15fe:	d108      	bne.n	1612 <events_is_interrupt_set+0x2a>
		bitpos = _events_find_bit_position(resource->channel,
    1600:	7818      	ldrb	r0, [r3, #0]
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <events_is_interrupt_set+0x2c>)
    1604:	4798      	blx	r3
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
	}

	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
    1606:	4b04      	ldr	r3, [pc, #16]	; (1618 <events_is_interrupt_set+0x30>)
    1608:	689b      	ldr	r3, [r3, #8]
    160a:	4018      	ands	r0, r3
    160c:	1e43      	subs	r3, r0, #1
    160e:	4198      	sbcs	r0, r3
    1610:	b2c0      	uxtb	r0, r0
}
    1612:	bd08      	pop	{r3, pc}
    1614:	0000168d 	.word	0x0000168d
    1618:	200000ec 	.word	0x200000ec

0000161c <events_ack_interrupt>:

enum status_code events_ack_interrupt(struct events_resource *resource, enum events_interrupt_source source)
{
    161c:	b508      	push	{r3, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
    161e:	2901      	cmp	r1, #1
    1620:	d104      	bne.n	162c <events_ack_interrupt+0x10>
		bitpos = _events_find_bit_position(resource->channel,
    1622:	7800      	ldrb	r0, [r0, #0]
    1624:	3107      	adds	r1, #7
    1626:	4b08      	ldr	r3, [pc, #32]	; (1648 <events_ack_interrupt+0x2c>)
    1628:	4798      	blx	r3
    162a:	e005      	b.n	1638 <events_ack_interrupt+0x1c>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
    162c:	2317      	movs	r3, #23
	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
    162e:	2900      	cmp	r1, #0
    1630:	d107      	bne.n	1642 <events_ack_interrupt+0x26>
		bitpos = _events_find_bit_position(resource->channel,
    1632:	7800      	ldrb	r0, [r0, #0]
    1634:	4b04      	ldr	r3, [pc, #16]	; (1648 <events_ack_interrupt+0x2c>)
    1636:	4798      	blx	r3
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	_events_inst.interrupt_flag_ack_buffer |= bitpos;
    1638:	4a04      	ldr	r2, [pc, #16]	; (164c <events_ack_interrupt+0x30>)
    163a:	68d3      	ldr	r3, [r2, #12]
    163c:	4318      	orrs	r0, r3
    163e:	60d0      	str	r0, [r2, #12]

	return STATUS_OK;
    1640:	2300      	movs	r3, #0
}
    1642:	1c18      	adds	r0, r3, #0
    1644:	bd08      	pop	{r3, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	0000168d 	.word	0x0000168d
    164c:	200000ec 	.word	0x200000ec

00001650 <EVSYS_Handler>:

void EVSYS_Handler(void)
{
    1650:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
    1652:	4b0b      	ldr	r3, [pc, #44]	; (1680 <EVSYS_Handler+0x30>)
    1654:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    1656:	490b      	ldr	r1, [pc, #44]	; (1684 <EVSYS_Handler+0x34>)
    1658:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
    165a:	6898      	ldr	r0, [r3, #8]
    165c:	4302      	orrs	r2, r0
    165e:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    1660:	4b09      	ldr	r3, [pc, #36]	; (1688 <EVSYS_Handler+0x38>)
    1662:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    1664:	2c00      	cmp	r4, #0
    1666:	d005      	beq.n	1674 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
    1668:	6820      	ldr	r0, [r4, #0]
    166a:	6863      	ldr	r3, [r4, #4]
    166c:	4798      	blx	r3
		current_hook = current_hook->next;
    166e:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
    1670:	2c00      	cmp	r4, #0
    1672:	d1f9      	bne.n	1668 <EVSYS_Handler+0x18>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    1674:	4b02      	ldr	r3, [pc, #8]	; (1680 <EVSYS_Handler+0x30>)
    1676:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
    1678:	689a      	ldr	r2, [r3, #8]
    167a:	438a      	bics	r2, r1
    167c:	609a      	str	r2, [r3, #8]
}
    167e:	bd10      	pop	{r4, pc}
    1680:	200000ec 	.word	0x200000ec
    1684:	42000400 	.word	0x42000400
    1688:	0f0fffff 	.word	0x0f0fffff

0000168c <_events_find_bit_position>:
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	if (channel < _EVENTS_START_OFFSET_BUSY_BITS) {
    168c:	2807      	cmp	r0, #7
    168e:	d804      	bhi.n	169a <_events_find_bit_position+0xe>
		pos = 0x01UL << (start_offset + channel);
    1690:	1808      	adds	r0, r1, r0
    1692:	2101      	movs	r1, #1
    1694:	4081      	lsls	r1, r0
    1696:	1c08      	adds	r0, r1, #0
    1698:	e004      	b.n	16a4 <_events_find_bit_position+0x18>
	} else {
		pos = 0x01UL << (start_offset + channel + _EVENTS_START_OFFSET_BUSY_BITS);
    169a:	1808      	adds	r0, r1, r0
    169c:	3008      	adds	r0, #8
    169e:	2101      	movs	r1, #1
    16a0:	4081      	lsls	r1, r0
    16a2:	1c08      	adds	r0, r1, #0
	}

	return pos;
}
    16a4:	4770      	bx	lr
    16a6:	46c0      	nop			; (mov r8, r8)

000016a8 <_system_events_init>:
    16a8:	4a06      	ldr	r2, [pc, #24]	; (16c4 <_system_events_init+0x1c>)
    16aa:	6a11      	ldr	r1, [r2, #32]
    16ac:	2302      	movs	r3, #2
    16ae:	430b      	orrs	r3, r1
    16b0:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    16b2:	2201      	movs	r2, #1
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <_system_events_init+0x20>)
    16b6:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    16b8:	1c19      	adds	r1, r3, #0
    16ba:	780b      	ldrb	r3, [r1, #0]
    16bc:	4213      	tst	r3, r2
    16be:	d1fc      	bne.n	16ba <_system_events_init+0x12>
	}
}
    16c0:	4770      	bx	lr
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	40000400 	.word	0x40000400
    16c8:	42000400 	.word	0x42000400

000016cc <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
    16cc:	2301      	movs	r3, #1
    16ce:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
    16d0:	2300      	movs	r3, #0
    16d2:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
    16d4:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
    16d6:	70c3      	strb	r3, [r0, #3]
}
    16d8:	4770      	bx	lr
    16da:	46c0      	nop			; (mov r8, r8)

000016dc <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
    16dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16de:	b083      	sub	sp, #12
    16e0:	1c06      	adds	r6, r0, #0
    16e2:	1c0d      	adds	r5, r1, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16e4:	4b29      	ldr	r3, [pc, #164]	; (178c <events_allocate+0xb0>)
    16e6:	4798      	blx	r3
	uint32_t tmp;
	bool allocated = false;

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;
    16e8:	4b29      	ldr	r3, [pc, #164]	; (1790 <events_allocate+0xb4>)
    16ea:	681b      	ldr	r3, [r3, #0]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {

		if(!(tmp & 0x00000001)) {
    16ec:	07da      	lsls	r2, r3, #31
    16ee:	d447      	bmi.n	1780 <events_allocate+0xa4>
    16f0:	e002      	b.n	16f8 <events_allocate+0x1c>
    16f2:	421a      	tst	r2, r3
    16f4:	d110      	bne.n	1718 <events_allocate+0x3c>
    16f6:	e000      	b.n	16fa <events_allocate+0x1e>

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    16f8:	2400      	movs	r4, #0

		if(!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
    16fa:	4b25      	ldr	r3, [pc, #148]	; (1790 <events_allocate+0xb4>)
    16fc:	6819      	ldr	r1, [r3, #0]
    16fe:	2201      	movs	r2, #1
    1700:	40a2      	lsls	r2, r4
    1702:	430a      	orrs	r2, r1
    1704:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
    1706:	791a      	ldrb	r2, [r3, #4]
    1708:	3a01      	subs	r2, #1
    170a:	711a      	strb	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    170c:	4b21      	ldr	r3, [pc, #132]	; (1794 <events_allocate+0xb8>)
    170e:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
    1710:	2014      	movs	r0, #20

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
    1712:	2cff      	cmp	r4, #255	; 0xff
    1714:	d106      	bne.n	1724 <events_allocate+0x48>
    1716:	e037      	b.n	1788 <events_allocate+0xac>

			break;

		}

		tmp = tmp >> 1;
    1718:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    171a:	3401      	adds	r4, #1
    171c:	b2e4      	uxtb	r4, r4
    171e:	2c0c      	cmp	r4, #12
    1720:	d1e7      	bne.n	16f2 <events_allocate+0x16>
    1722:	e029      	b.n	1778 <events_allocate+0x9c>

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
	}

	resource->channel = new_channel;
    1724:	7034      	strb	r4, [r6, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
    1726:	786b      	ldrb	r3, [r5, #1]
    1728:	2b02      	cmp	r3, #2
    172a:	d00a      	beq.n	1742 <events_allocate+0x66>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator =
    172c:	a901      	add	r1, sp, #4
    172e:	78eb      	ldrb	r3, [r5, #3]
    1730:	700b      	strb	r3, [r1, #0]
				(enum gclk_generator)config->clock_source;
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    1732:	1de7      	adds	r7, r4, #7
    1734:	b2ff      	uxtb	r7, r7
    1736:	1c38      	adds	r0, r7, #0
    1738:	4b17      	ldr	r3, [pc, #92]	; (1798 <events_allocate+0xbc>)
    173a:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
    173c:	1c38      	adds	r0, r7, #0
    173e:	4b17      	ldr	r3, [pc, #92]	; (179c <events_allocate+0xc0>)
    1740:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
			     EVSYS_CHANNEL_PATH(config->path)         |
    1742:	786a      	ldrb	r2, [r5, #1]
    1744:	0612      	lsls	r2, r2, #24
    1746:	23c0      	movs	r3, #192	; 0xc0
    1748:	049b      	lsls	r3, r3, #18
    174a:	401a      	ands	r2, r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    174c:	78a8      	ldrb	r0, [r5, #2]
    174e:	0400      	lsls	r0, r0, #16
    1750:	21fe      	movs	r1, #254	; 0xfe
    1752:	03c9      	lsls	r1, r1, #15
    1754:	1c03      	adds	r3, r0, #0
    1756:	400b      	ands	r3, r1
    1758:	431a      	orrs	r2, r3
    175a:	1c10      	adds	r0, r2, #0
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    175c:	782a      	ldrb	r2, [r5, #0]
    175e:	0692      	lsls	r2, r2, #26
    1760:	21c0      	movs	r1, #192	; 0xc0
    1762:	0509      	lsls	r1, r1, #20
    1764:	1c13      	adds	r3, r2, #0
    1766:	400b      	ands	r3, r1
    1768:	1c02      	adds	r2, r0, #0
    176a:	431a      	orrs	r2, r3
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    176c:	230f      	movs	r3, #15
    176e:	401c      	ands	r4, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
			     EVSYS_CHANNEL_PATH(config->path)         |
    1770:	4314      	orrs	r4, r2
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    1772:	6074      	str	r4, [r6, #4]
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
    1774:	2000      	movs	r0, #0
    1776:	e007      	b.n	1788 <events_allocate+0xac>
    1778:	4b06      	ldr	r3, [pc, #24]	; (1794 <events_allocate+0xb8>)
    177a:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
    177c:	2014      	movs	r0, #20
    177e:	e003      	b.n	1788 <events_allocate+0xac>

			break;

		}

		tmp = tmp >> 1;
    1780:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    1782:	2401      	movs	r4, #1

		if(!(tmp & 0x00000001)) {
    1784:	2201      	movs	r2, #1
    1786:	e7b4      	b.n	16f2 <events_allocate+0x16>
			     EVSYS_CHANNEL_PATH(config->path)         |
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);


	return STATUS_OK;
}
    1788:	b003      	add	sp, #12
    178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    178c:	000014cd 	.word	0x000014cd
    1790:	200000ec 	.word	0x200000ec
    1794:	0000150d 	.word	0x0000150d
    1798:	00002cc9 	.word	0x00002cc9
    179c:	00002c3d 	.word	0x00002c3d

000017a0 <events_is_busy>:

	return STATUS_OK;
}

bool events_is_busy(struct events_resource *resource)
{
    17a0:	b510      	push	{r4, lr}
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <events_is_busy+0x18>)
    17a4:	68dc      	ldr	r4, [r3, #12]
    17a6:	7800      	ldrb	r0, [r0, #0]
    17a8:	2108      	movs	r1, #8
    17aa:	4b04      	ldr	r3, [pc, #16]	; (17bc <events_is_busy+0x1c>)
    17ac:	4798      	blx	r3
    17ae:	4020      	ands	r0, r4
    17b0:	1e43      	subs	r3, r0, #1
    17b2:	4198      	sbcs	r0, r3
    17b4:	b2c0      	uxtb	r0, r0
			_EVENTS_START_OFFSET_BUSY_BITS));
}
    17b6:	bd10      	pop	{r4, pc}
    17b8:	42000400 	.word	0x42000400
    17bc:	0000168d 	.word	0x0000168d

000017c0 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    17c0:	231f      	movs	r3, #31
    17c2:	4019      	ands	r1, r3
    17c4:	7803      	ldrb	r3, [r0, #0]
    17c6:	3301      	adds	r3, #1
    17c8:	021b      	lsls	r3, r3, #8
    17ca:	22f8      	movs	r2, #248	; 0xf8
    17cc:	0152      	lsls	r2, r2, #5
    17ce:	4013      	ands	r3, r2
    17d0:	4319      	orrs	r1, r3
    17d2:	4b03      	ldr	r3, [pc, #12]	; (17e0 <events_attach_user+0x20>)
    17d4:	8119      	strh	r1, [r3, #8]
			  EVSYS_USER_USER(user_id);

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
    17d6:	6842      	ldr	r2, [r0, #4]
    17d8:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
}
    17da:	2000      	movs	r0, #0
    17dc:	4770      	bx	lr
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	42000400 	.word	0x42000400

000017e4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    17e4:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    17e6:	2a00      	cmp	r2, #0
    17e8:	d10d      	bne.n	1806 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    17ea:	008b      	lsls	r3, r1, #2
    17ec:	4a07      	ldr	r2, [pc, #28]	; (180c <extint_register_callback+0x28>)
    17ee:	589b      	ldr	r3, [r3, r2]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d103      	bne.n	17fc <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    17f4:	0089      	lsls	r1, r1, #2
    17f6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    17f8:	2300      	movs	r3, #0
    17fa:	e004      	b.n	1806 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    17fc:	4283      	cmp	r3, r0
    17fe:	d001      	beq.n	1804 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1800:	231d      	movs	r3, #29
    1802:	e000      	b.n	1806 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1804:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1806:	1c18      	adds	r0, r3, #0
    1808:	4770      	bx	lr
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	200007f8 	.word	0x200007f8

00001810 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1810:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1812:	2900      	cmp	r1, #0
    1814:	d107      	bne.n	1826 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1816:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1818:	281f      	cmp	r0, #31
    181a:	d800      	bhi.n	181e <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    181c:	4a03      	ldr	r2, [pc, #12]	; (182c <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    181e:	2301      	movs	r3, #1
    1820:	4083      	lsls	r3, r0
    1822:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1824:	2300      	movs	r3, #0
}
    1826:	1c18      	adds	r0, r3, #0
    1828:	4770      	bx	lr
    182a:	46c0      	nop			; (mov r8, r8)
    182c:	40001800 	.word	0x40001800

00001830 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1830:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1832:	2900      	cmp	r1, #0
    1834:	d107      	bne.n	1846 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    1836:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1838:	281f      	cmp	r0, #31
    183a:	d800      	bhi.n	183e <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    183c:	4a03      	ldr	r2, [pc, #12]	; (184c <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    183e:	2301      	movs	r3, #1
    1840:	4083      	lsls	r3, r0
    1842:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1844:	2300      	movs	r3, #0
}
    1846:	1c18      	adds	r0, r3, #0
    1848:	4770      	bx	lr
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	40001800 	.word	0x40001800

00001850 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1850:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1852:	2200      	movs	r2, #0
    1854:	4b15      	ldr	r3, [pc, #84]	; (18ac <EIC_Handler+0x5c>)
    1856:	701a      	strb	r2, [r3, #0]
    1858:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    185a:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    185c:	4e14      	ldr	r6, [pc, #80]	; (18b0 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    185e:	4c13      	ldr	r4, [pc, #76]	; (18ac <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1860:	2b1f      	cmp	r3, #31
    1862:	d919      	bls.n	1898 <EIC_Handler+0x48>
    1864:	e00f      	b.n	1886 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1866:	2100      	movs	r1, #0
    1868:	e000      	b.n	186c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    186a:	4912      	ldr	r1, [pc, #72]	; (18b4 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    186c:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    186e:	009b      	lsls	r3, r3, #2
    1870:	599b      	ldr	r3, [r3, r6]
    1872:	2b00      	cmp	r3, #0
    1874:	d000      	beq.n	1878 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1876:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1878:	7823      	ldrb	r3, [r4, #0]
    187a:	3301      	adds	r3, #1
    187c:	b2db      	uxtb	r3, r3
    187e:	7023      	strb	r3, [r4, #0]
    1880:	2b0f      	cmp	r3, #15
    1882:	d9ed      	bls.n	1860 <EIC_Handler+0x10>
    1884:	e011      	b.n	18aa <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1886:	1c29      	adds	r1, r5, #0
    1888:	4019      	ands	r1, r3
    188a:	2201      	movs	r2, #1
    188c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    188e:	2100      	movs	r1, #0
    1890:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1892:	4211      	tst	r1, r2
    1894:	d1e7      	bne.n	1866 <EIC_Handler+0x16>
    1896:	e7ef      	b.n	1878 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1898:	1c29      	adds	r1, r5, #0
    189a:	4019      	ands	r1, r3
    189c:	2201      	movs	r2, #1
    189e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    18a0:	4904      	ldr	r1, [pc, #16]	; (18b4 <EIC_Handler+0x64>)
    18a2:	6909      	ldr	r1, [r1, #16]
    18a4:	4211      	tst	r1, r2
    18a6:	d1e0      	bne.n	186a <EIC_Handler+0x1a>
    18a8:	e7e6      	b.n	1878 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    18aa:	bd70      	pop	{r4, r5, r6, pc}
    18ac:	200007f5 	.word	0x200007f5
    18b0:	200007f8 	.word	0x200007f8
    18b4:	40001800 	.word	0x40001800

000018b8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    18b8:	4a04      	ldr	r2, [pc, #16]	; (18cc <_extint_enable+0x14>)
    18ba:	7811      	ldrb	r1, [r2, #0]
    18bc:	2302      	movs	r3, #2
    18be:	430b      	orrs	r3, r1
    18c0:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    18c2:	7853      	ldrb	r3, [r2, #1]
    18c4:	b25b      	sxtb	r3, r3
    18c6:	2b00      	cmp	r3, #0
    18c8:	dbfb      	blt.n	18c2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    18ca:	4770      	bx	lr
    18cc:	40001800 	.word	0x40001800

000018d0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    18d0:	b500      	push	{lr}
    18d2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    18d4:	4a12      	ldr	r2, [pc, #72]	; (1920 <_system_extint_init+0x50>)
    18d6:	6991      	ldr	r1, [r2, #24]
    18d8:	2340      	movs	r3, #64	; 0x40
    18da:	430b      	orrs	r3, r1
    18dc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    18de:	a901      	add	r1, sp, #4
    18e0:	2300      	movs	r3, #0
    18e2:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    18e4:	2005      	movs	r0, #5
    18e6:	4b0f      	ldr	r3, [pc, #60]	; (1924 <_system_extint_init+0x54>)
    18e8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    18ea:	2005      	movs	r0, #5
    18ec:	4b0e      	ldr	r3, [pc, #56]	; (1928 <_system_extint_init+0x58>)
    18ee:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    18f0:	4a0e      	ldr	r2, [pc, #56]	; (192c <_system_extint_init+0x5c>)
    18f2:	7811      	ldrb	r1, [r2, #0]
    18f4:	2301      	movs	r3, #1
    18f6:	430b      	orrs	r3, r1
    18f8:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    18fa:	7853      	ldrb	r3, [r2, #1]
    18fc:	b25b      	sxtb	r3, r3
    18fe:	2b00      	cmp	r3, #0
    1900:	dbfb      	blt.n	18fa <_system_extint_init+0x2a>
    1902:	4b0b      	ldr	r3, [pc, #44]	; (1930 <_system_extint_init+0x60>)
    1904:	1c19      	adds	r1, r3, #0
    1906:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    1908:	2200      	movs	r2, #0
    190a:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    190c:	428b      	cmp	r3, r1
    190e:	d1fc      	bne.n	190a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1910:	2210      	movs	r2, #16
    1912:	4b08      	ldr	r3, [pc, #32]	; (1934 <_system_extint_init+0x64>)
    1914:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1916:	4b08      	ldr	r3, [pc, #32]	; (1938 <_system_extint_init+0x68>)
    1918:	4798      	blx	r3
}
    191a:	b003      	add	sp, #12
    191c:	bd00      	pop	{pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	40000400 	.word	0x40000400
    1924:	00002cc9 	.word	0x00002cc9
    1928:	00002c3d 	.word	0x00002c3d
    192c:	40001800 	.word	0x40001800
    1930:	200007f8 	.word	0x200007f8
    1934:	e000e100 	.word	0xe000e100
    1938:	000018b9 	.word	0x000018b9

0000193c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    193c:	2300      	movs	r3, #0
    193e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1940:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1942:	2201      	movs	r2, #1
    1944:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1946:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1948:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    194a:	3302      	adds	r3, #2
    194c:	72c3      	strb	r3, [r0, #11]
}
    194e:	4770      	bx	lr

00001950 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1950:	b5f0      	push	{r4, r5, r6, r7, lr}
    1952:	b083      	sub	sp, #12
    1954:	1c05      	adds	r5, r0, #0
    1956:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1958:	a901      	add	r1, sp, #4
    195a:	2300      	movs	r3, #0
    195c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    195e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1960:	7923      	ldrb	r3, [r4, #4]
    1962:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1964:	7a23      	ldrb	r3, [r4, #8]
    1966:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1968:	7820      	ldrb	r0, [r4, #0]
    196a:	4b15      	ldr	r3, [pc, #84]	; (19c0 <extint_chan_set_config+0x70>)
    196c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    196e:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1970:	2d1f      	cmp	r5, #31
    1972:	d800      	bhi.n	1976 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1974:	4e13      	ldr	r6, [pc, #76]	; (19c4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1976:	2207      	movs	r2, #7
    1978:	402a      	ands	r2, r5
    197a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    197c:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    197e:	7aa3      	ldrb	r3, [r4, #10]
    1980:	2b00      	cmp	r3, #0
    1982:	d001      	beq.n	1988 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    1984:	2308      	movs	r3, #8
    1986:	4318      	orrs	r0, r3
    1988:	08eb      	lsrs	r3, r5, #3
    198a:	009b      	lsls	r3, r3, #2
    198c:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    198e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    1990:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1992:	270f      	movs	r7, #15
    1994:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1996:	43b9      	bics	r1, r7
    1998:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    199a:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    199c:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    199e:	7a63      	ldrb	r3, [r4, #9]
    19a0:	2b00      	cmp	r3, #0
    19a2:	d006      	beq.n	19b2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    19a4:	6973      	ldr	r3, [r6, #20]
    19a6:	2201      	movs	r2, #1
    19a8:	40aa      	lsls	r2, r5
    19aa:	1c15      	adds	r5, r2, #0
    19ac:	431d      	orrs	r5, r3
    19ae:	6175      	str	r5, [r6, #20]
    19b0:	e004      	b.n	19bc <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    19b2:	6973      	ldr	r3, [r6, #20]
    19b4:	2201      	movs	r2, #1
    19b6:	40aa      	lsls	r2, r5
    19b8:	4393      	bics	r3, r2
    19ba:	6173      	str	r3, [r6, #20]
	}
}
    19bc:	b003      	add	sp, #12
    19be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c0:	00002dc1 	.word	0x00002dc1
    19c4:	40001800 	.word	0x40001800

000019c8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    19c8:	b500      	push	{lr}
    19ca:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    19cc:	ab01      	add	r3, sp, #4
    19ce:	2280      	movs	r2, #128	; 0x80
    19d0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    19d2:	780a      	ldrb	r2, [r1, #0]
    19d4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    19d6:	784a      	ldrb	r2, [r1, #1]
    19d8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    19da:	788a      	ldrb	r2, [r1, #2]
    19dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    19de:	1c19      	adds	r1, r3, #0
    19e0:	4b01      	ldr	r3, [pc, #4]	; (19e8 <port_pin_set_config+0x20>)
    19e2:	4798      	blx	r3
}
    19e4:	b003      	add	sp, #12
    19e6:	bd00      	pop	{pc}
    19e8:	00002dc1 	.word	0x00002dc1

000019ec <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19ec:	6801      	ldr	r1, [r0, #0]
    19ee:	2208      	movs	r2, #8
    19f0:	4b05      	ldr	r3, [pc, #20]	; (1a08 <rtc_calendar_enable+0x1c>)
    19f2:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    19f4:	6802      	ldr	r2, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    19f6:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    19f8:	b25b      	sxtb	r3, r3
    19fa:	2b00      	cmp	r3, #0
    19fc:	dbfb      	blt.n	19f6 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    19fe:	880a      	ldrh	r2, [r1, #0]
    1a00:	2302      	movs	r3, #2
    1a02:	4313      	orrs	r3, r2
    1a04:	800b      	strh	r3, [r1, #0]
}
    1a06:	4770      	bx	lr
    1a08:	e000e100 	.word	0xe000e100

00001a0c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    1a0c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a0e:	6801      	ldr	r1, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a10:	2408      	movs	r4, #8
    1a12:	2380      	movs	r3, #128	; 0x80
    1a14:	4a05      	ldr	r2, [pc, #20]	; (1a2c <rtc_calendar_disable+0x20>)
    1a16:	50d4      	str	r4, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a18:	6802      	ldr	r2, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a1a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a1c:	b25b      	sxtb	r3, r3
    1a1e:	2b00      	cmp	r3, #0
    1a20:	dbfb      	blt.n	1a1a <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1a22:	880b      	ldrh	r3, [r1, #0]
    1a24:	2202      	movs	r2, #2
    1a26:	4393      	bics	r3, r2
    1a28:	800b      	strh	r3, [r1, #0]
}
    1a2a:	bd10      	pop	{r4, pc}
    1a2c:	e000e100 	.word	0xe000e100

00001a30 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1a30:	b538      	push	{r3, r4, r5, lr}
    1a32:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a34:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1a36:	4b07      	ldr	r3, [pc, #28]	; (1a54 <rtc_calendar_reset+0x24>)
    1a38:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    1a3a:	2300      	movs	r3, #0
    1a3c:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
    1a3e:	82e3      	strh	r3, [r4, #22]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a40:	6822      	ldr	r2, [r4, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a42:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a44:	b25b      	sxtb	r3, r3
    1a46:	2b00      	cmp	r3, #0
    1a48:	dbfb      	blt.n	1a42 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1a4a:	882a      	ldrh	r2, [r5, #0]
    1a4c:	2301      	movs	r3, #1
    1a4e:	4313      	orrs	r3, r2
    1a50:	802b      	strh	r3, [r5, #0]
}
    1a52:	bd38      	pop	{r3, r4, r5, pc}
    1a54:	00001a0d 	.word	0x00001a0d

00001a58 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1a58:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1a5a:	88cb      	ldrh	r3, [r1, #6]
    1a5c:	88c2      	ldrh	r2, [r0, #6]
    1a5e:	1a9b      	subs	r3, r3, r2
    1a60:	069a      	lsls	r2, r3, #26

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1a62:	790b      	ldrb	r3, [r1, #4]
    1a64:	045c      	lsls	r4, r3, #17
	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1a66:	794b      	ldrb	r3, [r1, #5]
    1a68:	059b      	lsls	r3, r3, #22
    1a6a:	4323      	orrs	r3, r4

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1a6c:	788c      	ldrb	r4, [r1, #2]
    1a6e:	0324      	lsls	r4, r4, #12
    1a70:	4323      	orrs	r3, r4
    1a72:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1a74:	7902      	ldrb	r2, [r0, #4]
    1a76:	2a00      	cmp	r2, #0
    1a78:	d105      	bne.n	1a86 <rtc_calendar_time_to_register_value+0x2e>
    1a7a:	78ca      	ldrb	r2, [r1, #3]
    1a7c:	2a00      	cmp	r2, #0
    1a7e:	d002      	beq.n	1a86 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1a80:	2280      	movs	r2, #128	; 0x80
    1a82:	0252      	lsls	r2, r2, #9
    1a84:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1a86:	7848      	ldrb	r0, [r1, #1]
    1a88:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1a8a:	780a      	ldrb	r2, [r1, #0]
    1a8c:	4310      	orrs	r0, r2
    1a8e:	4318      	orrs	r0, r3

	return register_value;
}
    1a90:	bd10      	pop	{r4, pc}
    1a92:	46c0      	nop			; (mov r8, r8)

00001a94 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1a94:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1a96:	0e8c      	lsrs	r4, r1, #26
    1a98:	88c3      	ldrh	r3, [r0, #6]
    1a9a:	18e3      	adds	r3, r4, r3
    1a9c:	80d3      	strh	r3, [r2, #6]
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1a9e:	018b      	lsls	r3, r1, #6
    1aa0:	0f1b      	lsrs	r3, r3, #28
    1aa2:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1aa4:	028b      	lsls	r3, r1, #10
    1aa6:	0edb      	lsrs	r3, r3, #27
    1aa8:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1aaa:	7903      	ldrb	r3, [r0, #4]
    1aac:	2b00      	cmp	r3, #0
    1aae:	d003      	beq.n	1ab8 <rtc_calendar_register_value_to_time+0x24>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1ab0:	03cb      	lsls	r3, r1, #15
    1ab2:	0edb      	lsrs	r3, r3, #27
    1ab4:	7093      	strb	r3, [r2, #2]
    1ab6:	e005      	b.n	1ac4 <rtc_calendar_register_value_to_time+0x30>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    1ab8:	040b      	lsls	r3, r1, #16
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1aba:	0f1b      	lsrs	r3, r3, #28
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
    1abc:	7093      	strb	r3, [r2, #2]
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1abe:	03cb      	lsls	r3, r1, #15
    1ac0:	0fdb      	lsrs	r3, r3, #31
    1ac2:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1ac4:	050b      	lsls	r3, r1, #20
    1ac6:	0e9b      	lsrs	r3, r3, #26
    1ac8:	7053      	strb	r3, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1aca:	233f      	movs	r3, #63	; 0x3f
    1acc:	4019      	ands	r1, r3
    1ace:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1ad0:	bd10      	pop	{r4, pc}
    1ad2:	46c0      	nop			; (mov r8, r8)

00001ad4 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1ad4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1ad6:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    1ad8:	4b03      	ldr	r3, [pc, #12]	; (1ae8 <rtc_calendar_set_time+0x14>)
    1ada:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1adc:	7aa3      	ldrb	r3, [r4, #10]

	Rtc *const rtc_module = module->hw;

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);

	while (rtc_calendar_is_syncing(module)) {
    1ade:	b25b      	sxtb	r3, r3
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	dbfb      	blt.n	1adc <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    1ae4:	6120      	str	r0, [r4, #16]
}
    1ae6:	bd10      	pop	{r4, pc}
    1ae8:	00001a59 	.word	0x00001a59

00001aec <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1aec:	b510      	push	{r4, lr}
    1aee:	1c0a      	adds	r2, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1af0:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1af2:	7941      	ldrb	r1, [r0, #5]
    1af4:	2900      	cmp	r1, #0
    1af6:	d106      	bne.n	1b06 <rtc_calendar_get_time+0x1a>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1af8:	4905      	ldr	r1, [pc, #20]	; (1b10 <rtc_calendar_get_time+0x24>)
    1afa:	8059      	strh	r1, [r3, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1afc:	6804      	ldr	r4, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1afe:	7aa1      	ldrb	r1, [r4, #10]
	 * the configuration structure. */
	if (!(module->continuously_update)) {
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
    1b00:	b249      	sxtb	r1, r1
    1b02:	2900      	cmp	r1, #0
    1b04:	dbfb      	blt.n	1afe <rtc_calendar_get_time+0x12>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1b06:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1b08:	4b02      	ldr	r3, [pc, #8]	; (1b14 <rtc_calendar_get_time+0x28>)
    1b0a:	4798      	blx	r3
}
    1b0c:	bd10      	pop	{r4, pc}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	ffff8000 	.word	0xffff8000
    1b14:	00001a95 	.word	0x00001a95

00001b18 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1b18:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b1a:	6804      	ldr	r4, [r0, #0]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1b1c:	2317      	movs	r3, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1b1e:	2a01      	cmp	r2, #1
    1b20:	d80d      	bhi.n	1b3e <rtc_calendar_set_alarm+0x26>
    1b22:	1c16      	adds	r6, r2, #0
    1b24:	1c0d      	adds	r5, r1, #0
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1b26:	4b07      	ldr	r3, [pc, #28]	; (1b44 <rtc_calendar_set_alarm+0x2c>)
    1b28:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b2a:	7aa3      	ldrb	r3, [r4, #10]
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));

	while (rtc_calendar_is_syncing(module)) {
    1b2c:	b25b      	sxtb	r3, r3
    1b2e:	2b00      	cmp	r3, #0
    1b30:	dbfb      	blt.n	1b2a <rtc_calendar_set_alarm+0x12>
    1b32:	00f2      	lsls	r2, r6, #3
    1b34:	18a4      	adds	r4, r4, r2
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1b36:	61a0      	str	r0, [r4, #24]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1b38:	7a2b      	ldrb	r3, [r5, #8]
    1b3a:	7723      	strb	r3, [r4, #28]

	return STATUS_OK;
    1b3c:	2300      	movs	r3, #0
}
    1b3e:	1c18      	adds	r0, r3, #0
    1b40:	bd70      	pop	{r4, r5, r6, pc}
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	00001a59 	.word	0x00001a59

00001b48 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    1b48:	b530      	push	{r4, r5, lr}
    1b4a:	b083      	sub	sp, #12
    1b4c:	1c05      	adds	r5, r0, #0
    1b4e:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1b50:	6001      	str	r1, [r0, #0]
    1b52:	4a1c      	ldr	r2, [pc, #112]	; (1bc4 <rtc_calendar_init+0x7c>)
    1b54:	6991      	ldr	r1, [r2, #24]
    1b56:	2320      	movs	r3, #32
    1b58:	430b      	orrs	r3, r1
    1b5a:	6193      	str	r3, [r2, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1b5c:	a901      	add	r1, sp, #4
    1b5e:	2302      	movs	r3, #2
    1b60:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1b62:	2004      	movs	r0, #4
    1b64:	4b18      	ldr	r3, [pc, #96]	; (1bc8 <rtc_calendar_init+0x80>)
    1b66:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1b68:	2004      	movs	r0, #4
    1b6a:	4b18      	ldr	r3, [pc, #96]	; (1bcc <rtc_calendar_init+0x84>)
    1b6c:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    1b6e:	1c28      	adds	r0, r5, #0
    1b70:	4b17      	ldr	r3, [pc, #92]	; (1bd0 <rtc_calendar_init+0x88>)
    1b72:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    1b74:	7923      	ldrb	r3, [r4, #4]
    1b76:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1b78:	78e3      	ldrb	r3, [r4, #3]
    1b7a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1b7c:	88e3      	ldrh	r3, [r4, #6]
    1b7e:	80eb      	strh	r3, [r5, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    1b80:	4b14      	ldr	r3, [pc, #80]	; (1bd4 <rtc_calendar_init+0x8c>)
    1b82:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b84:	682a      	ldr	r2, [r5, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1b86:	8823      	ldrh	r3, [r4, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    1b88:	7921      	ldrb	r1, [r4, #4]
    1b8a:	2900      	cmp	r1, #0
    1b8c:	d002      	beq.n	1b94 <rtc_calendar_init+0x4c>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1b8e:	2108      	movs	r1, #8
    1b90:	430b      	orrs	r3, r1
    1b92:	e001      	b.n	1b98 <rtc_calendar_init+0x50>

	/* Check clock mode. */
	if (!(config->clock_24h)) {
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1b94:	2148      	movs	r1, #72	; 0x48
    1b96:	430b      	orrs	r3, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    1b98:	78a1      	ldrb	r1, [r4, #2]
    1b9a:	2900      	cmp	r1, #0
    1b9c:	d001      	beq.n	1ba2 <rtc_calendar_init+0x5a>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1b9e:	2180      	movs	r1, #128	; 0x80
    1ba0:	430b      	orrs	r3, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1ba2:	8013      	strh	r3, [r2, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    1ba4:	78e3      	ldrb	r3, [r4, #3]
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d004      	beq.n	1bb4 <rtc_calendar_init+0x6c>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1baa:	8851      	ldrh	r1, [r2, #2]
    1bac:	2380      	movs	r3, #128	; 0x80
    1bae:	01db      	lsls	r3, r3, #7
    1bb0:	430b      	orrs	r3, r1
    1bb2:	8053      	strh	r3, [r2, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1bb4:	1c21      	adds	r1, r4, #0
    1bb6:	3108      	adds	r1, #8
    1bb8:	1c28      	adds	r0, r5, #0
    1bba:	2200      	movs	r2, #0
    1bbc:	4b06      	ldr	r3, [pc, #24]	; (1bd8 <rtc_calendar_init+0x90>)
    1bbe:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
    1bc0:	b003      	add	sp, #12
    1bc2:	bd30      	pop	{r4, r5, pc}
    1bc4:	40000400 	.word	0x40000400
    1bc8:	00002cc9 	.word	0x00002cc9
    1bcc:	00002c3d 	.word	0x00002c3d
    1bd0:	00001a31 	.word	0x00001a31
    1bd4:	20000838 	.word	0x20000838
    1bd8:	00001b19 	.word	0x00001b19

00001bdc <rtc_calendar_register_callback>:
	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
		status = STATUS_OK;
	} else if (callback_type > RTC_NUM_OF_ALARMS) {
    1bdc:	2a02      	cmp	r2, #2
    1bde:	d901      	bls.n	1be4 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
    1be0:	2017      	movs	r0, #23
    1be2:	e00a      	b.n	1bfa <rtc_calendar_register_callback+0x1e>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    1be4:	1c93      	adds	r3, r2, #2
    1be6:	009b      	lsls	r3, r3, #2
    1be8:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    1bea:	8a81      	ldrh	r1, [r0, #20]
    1bec:	2301      	movs	r3, #1
    1bee:	4093      	lsls	r3, r2
    1bf0:	1c1a      	adds	r2, r3, #0
    1bf2:	430a      	orrs	r2, r1
    1bf4:	b292      	uxth	r2, r2
    1bf6:	8282      	strh	r2, [r0, #20]
    1bf8:	2000      	movs	r0, #0
	}

	return status;
}
    1bfa:	4770      	bx	lr

00001bfc <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
    1bfc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1bfe:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
    1c00:	2902      	cmp	r1, #2
    1c02:	d102      	bne.n	1c0a <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
    1c04:	2380      	movs	r3, #128	; 0x80
    1c06:	71d3      	strb	r3, [r2, #7]
    1c08:	e004      	b.n	1c14 <rtc_calendar_enable_callback+0x18>
	} else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << callback_type);
    1c0a:	2301      	movs	r3, #1
    1c0c:	408b      	lsls	r3, r1
    1c0e:	2401      	movs	r4, #1
    1c10:	4023      	ands	r3, r4
    1c12:	71d3      	strb	r3, [r2, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    1c14:	8ac2      	ldrh	r2, [r0, #22]
    1c16:	2301      	movs	r3, #1
    1c18:	408b      	lsls	r3, r1
    1c1a:	1c19      	adds	r1, r3, #0
    1c1c:	4311      	orrs	r1, r2
    1c1e:	b289      	uxth	r1, r1
    1c20:	82c1      	strh	r1, [r0, #22]
}
    1c22:	bd10      	pop	{r4, pc}

00001c24 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    1c24:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
    1c26:	4b0d      	ldr	r3, [pc, #52]	; (1c5c <RTC_Handler+0x38>)
    1c28:	681a      	ldr	r2, [r3, #0]

	Rtc *const rtc_module = module->hw;
    1c2a:	6814      	ldr	r4, [r2, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    1c2c:	8ad3      	ldrh	r3, [r2, #22]
	callback_mask &= module->registered_callback;
    1c2e:	8a91      	ldrh	r1, [r2, #20]
    1c30:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    1c32:	7a23      	ldrb	r3, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    1c34:	79e0      	ldrb	r0, [r4, #7]
    1c36:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    1c38:	09d8      	lsrs	r0, r3, #7
    1c3a:	d006      	beq.n	1c4a <RTC_Handler+0x26>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    1c3c:	074b      	lsls	r3, r1, #29
    1c3e:	d501      	bpl.n	1c44 <RTC_Handler+0x20>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    1c40:	6913      	ldr	r3, [r2, #16]
    1c42:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    1c44:	2380      	movs	r3, #128	; 0x80
    1c46:	7223      	strb	r3, [r4, #8]
    1c48:	e007      	b.n	1c5a <RTC_Handler+0x36>

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    1c4a:	07db      	lsls	r3, r3, #31
    1c4c:	d505      	bpl.n	1c5a <RTC_Handler+0x36>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    1c4e:	07cb      	lsls	r3, r1, #31
    1c50:	d501      	bpl.n	1c56 <RTC_Handler+0x32>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    1c52:	6893      	ldr	r3, [r2, #8]
    1c54:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    1c56:	2301      	movs	r3, #1
    1c58:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
    1c5a:	bd10      	pop	{r4, pc}
    1c5c:	20000838 	.word	0x20000838

00001c60 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1c60:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1c62:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c64:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1c66:	4281      	cmp	r1, r0
    1c68:	d30c      	bcc.n	1c84 <_sercom_get_sync_baud_val+0x24>
    1c6a:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    1c6c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1c6e:	3301      	adds	r3, #1
    1c70:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    1c72:	4288      	cmp	r0, r1
    1c74:	d9fa      	bls.n	1c6c <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    1c76:	3b01      	subs	r3, #1
    1c78:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1c7a:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1c7c:	2bff      	cmp	r3, #255	; 0xff
    1c7e:	d801      	bhi.n	1c84 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    1c80:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    1c82:	2400      	movs	r4, #0
	}
}
    1c84:	1c20      	adds	r0, r4, #0
    1c86:	bd10      	pop	{r4, pc}

00001c88 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c8a:	465f      	mov	r7, fp
    1c8c:	4656      	mov	r6, sl
    1c8e:	464d      	mov	r5, r9
    1c90:	4644      	mov	r4, r8
    1c92:	b4f0      	push	{r4, r5, r6, r7}
    1c94:	b089      	sub	sp, #36	; 0x24
    1c96:	1c1c      	adds	r4, r3, #0
    1c98:	ab12      	add	r3, sp, #72	; 0x48
    1c9a:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1c9c:	1c06      	adds	r6, r0, #0
    1c9e:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ca0:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1ca2:	428e      	cmp	r6, r1
    1ca4:	d900      	bls.n	1ca8 <_sercom_get_async_baud_val+0x20>
    1ca6:	e0c7      	b.n	1e38 <_sercom_get_async_baud_val+0x1b0>
    1ca8:	1c25      	adds	r5, r4, #0
    1caa:	9207      	str	r2, [sp, #28]
    1cac:	1c0c      	adds	r4, r1, #0
    1cae:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1cb0:	2d00      	cmp	r5, #0
    1cb2:	d151      	bne.n	1d58 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1cb4:	1c18      	adds	r0, r3, #0
    1cb6:	2100      	movs	r1, #0
    1cb8:	2300      	movs	r3, #0
    1cba:	4d63      	ldr	r5, [pc, #396]	; (1e48 <_sercom_get_async_baud_val+0x1c0>)
    1cbc:	47a8      	blx	r5
    1cbe:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    1cc0:	1c26      	adds	r6, r4, #0
    1cc2:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1cc4:	2300      	movs	r3, #0
    1cc6:	2400      	movs	r4, #0
    1cc8:	9302      	str	r3, [sp, #8]
    1cca:	9403      	str	r4, [sp, #12]
    1ccc:	2200      	movs	r2, #0
    1cce:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1cd0:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1cd2:	2120      	movs	r1, #32
    1cd4:	468c      	mov	ip, r1
    1cd6:	391f      	subs	r1, #31
    1cd8:	9600      	str	r6, [sp, #0]
    1cda:	9701      	str	r7, [sp, #4]
    1cdc:	2420      	movs	r4, #32
    1cde:	4264      	negs	r4, r4
    1ce0:	1904      	adds	r4, r0, r4
    1ce2:	d403      	bmi.n	1cec <_sercom_get_async_baud_val+0x64>
    1ce4:	1c0d      	adds	r5, r1, #0
    1ce6:	40a5      	lsls	r5, r4
    1ce8:	46a8      	mov	r8, r5
    1cea:	e004      	b.n	1cf6 <_sercom_get_async_baud_val+0x6e>
    1cec:	4664      	mov	r4, ip
    1cee:	1a24      	subs	r4, r4, r0
    1cf0:	1c0d      	adds	r5, r1, #0
    1cf2:	40e5      	lsrs	r5, r4
    1cf4:	46a8      	mov	r8, r5
    1cf6:	1c0c      	adds	r4, r1, #0
    1cf8:	4084      	lsls	r4, r0
    1cfa:	46a1      	mov	r9, r4

		r = r << 1;
    1cfc:	1c14      	adds	r4, r2, #0
    1cfe:	1c1d      	adds	r5, r3, #0
    1d00:	18a4      	adds	r4, r4, r2
    1d02:	415d      	adcs	r5, r3
    1d04:	1c22      	adds	r2, r4, #0
    1d06:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    1d08:	465e      	mov	r6, fp
    1d0a:	4647      	mov	r7, r8
    1d0c:	423e      	tst	r6, r7
    1d0e:	d003      	beq.n	1d18 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    1d10:	1c0e      	adds	r6, r1, #0
    1d12:	4326      	orrs	r6, r4
    1d14:	1c32      	adds	r2, r6, #0
    1d16:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    1d18:	9c01      	ldr	r4, [sp, #4]
    1d1a:	429c      	cmp	r4, r3
    1d1c:	d810      	bhi.n	1d40 <_sercom_get_async_baud_val+0xb8>
    1d1e:	d102      	bne.n	1d26 <_sercom_get_async_baud_val+0x9e>
    1d20:	9c00      	ldr	r4, [sp, #0]
    1d22:	4294      	cmp	r4, r2
    1d24:	d80c      	bhi.n	1d40 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    1d26:	9c00      	ldr	r4, [sp, #0]
    1d28:	9d01      	ldr	r5, [sp, #4]
    1d2a:	1b12      	subs	r2, r2, r4
    1d2c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1d2e:	464d      	mov	r5, r9
    1d30:	9e02      	ldr	r6, [sp, #8]
    1d32:	9f03      	ldr	r7, [sp, #12]
    1d34:	4335      	orrs	r5, r6
    1d36:	1c3c      	adds	r4, r7, #0
    1d38:	4646      	mov	r6, r8
    1d3a:	4334      	orrs	r4, r6
    1d3c:	9502      	str	r5, [sp, #8]
    1d3e:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    1d40:	3801      	subs	r0, #1
    1d42:	d2cb      	bcs.n	1cdc <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1d44:	2200      	movs	r2, #0
    1d46:	2301      	movs	r3, #1
    1d48:	9802      	ldr	r0, [sp, #8]
    1d4a:	9903      	ldr	r1, [sp, #12]
    1d4c:	1a12      	subs	r2, r2, r0
    1d4e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1d50:	0c11      	lsrs	r1, r2, #16
    1d52:	041b      	lsls	r3, r3, #16
    1d54:	4319      	orrs	r1, r3
    1d56:	e06c      	b.n	1e32 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    1d58:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1d5a:	2d01      	cmp	r5, #1
    1d5c:	d169      	bne.n	1e32 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    1d5e:	0f61      	lsrs	r1, r4, #29
    1d60:	1c0f      	adds	r7, r1, #0
    1d62:	00e1      	lsls	r1, r4, #3
    1d64:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    1d66:	1c18      	adds	r0, r3, #0
    1d68:	2100      	movs	r1, #0
    1d6a:	2300      	movs	r3, #0
    1d6c:	4c36      	ldr	r4, [pc, #216]	; (1e48 <_sercom_get_async_baud_val+0x1c0>)
    1d6e:	47a0      	blx	r4
    1d70:	1c04      	adds	r4, r0, #0
    1d72:	1c0d      	adds	r5, r1, #0
    1d74:	2300      	movs	r3, #0
    1d76:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1d78:	3320      	adds	r3, #32
    1d7a:	469b      	mov	fp, r3
    1d7c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    1d7e:	4663      	mov	r3, ip
    1d80:	9305      	str	r3, [sp, #20]
    1d82:	46b9      	mov	r9, r7
    1d84:	466b      	mov	r3, sp
    1d86:	7d1b      	ldrb	r3, [r3, #20]
    1d88:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1d8a:	2300      	movs	r3, #0
    1d8c:	469c      	mov	ip, r3
    1d8e:	2000      	movs	r0, #0
    1d90:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    1d92:	223f      	movs	r2, #63	; 0x3f
    1d94:	9400      	str	r4, [sp, #0]
    1d96:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    1d98:	2320      	movs	r3, #32
    1d9a:	425b      	negs	r3, r3
    1d9c:	18d3      	adds	r3, r2, r3
    1d9e:	d403      	bmi.n	1da8 <_sercom_get_async_baud_val+0x120>
    1da0:	1c34      	adds	r4, r6, #0
    1da2:	409c      	lsls	r4, r3
    1da4:	1c23      	adds	r3, r4, #0
    1da6:	e004      	b.n	1db2 <_sercom_get_async_baud_val+0x12a>
    1da8:	465b      	mov	r3, fp
    1daa:	1a9b      	subs	r3, r3, r2
    1dac:	1c34      	adds	r4, r6, #0
    1dae:	40dc      	lsrs	r4, r3
    1db0:	1c23      	adds	r3, r4, #0
    1db2:	1c37      	adds	r7, r6, #0
    1db4:	4097      	lsls	r7, r2

		r = r << 1;
    1db6:	1c04      	adds	r4, r0, #0
    1db8:	1c0d      	adds	r5, r1, #0
    1dba:	1824      	adds	r4, r4, r0
    1dbc:	414d      	adcs	r5, r1
    1dbe:	1c20      	adds	r0, r4, #0
    1dc0:	1c29      	adds	r1, r5, #0
    1dc2:	9002      	str	r0, [sp, #8]
    1dc4:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    1dc6:	4644      	mov	r4, r8
    1dc8:	403c      	ands	r4, r7
    1dca:	46a2      	mov	sl, r4
    1dcc:	464c      	mov	r4, r9
    1dce:	4023      	ands	r3, r4
    1dd0:	4654      	mov	r4, sl
    1dd2:	4323      	orrs	r3, r4
    1dd4:	d005      	beq.n	1de2 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    1dd6:	9b02      	ldr	r3, [sp, #8]
    1dd8:	9c03      	ldr	r4, [sp, #12]
    1dda:	1c1d      	adds	r5, r3, #0
    1ddc:	4335      	orrs	r5, r6
    1dde:	1c28      	adds	r0, r5, #0
    1de0:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    1de2:	9b01      	ldr	r3, [sp, #4]
    1de4:	428b      	cmp	r3, r1
    1de6:	d80a      	bhi.n	1dfe <_sercom_get_async_baud_val+0x176>
    1de8:	d102      	bne.n	1df0 <_sercom_get_async_baud_val+0x168>
    1dea:	9b00      	ldr	r3, [sp, #0]
    1dec:	4283      	cmp	r3, r0
    1dee:	d806      	bhi.n	1dfe <_sercom_get_async_baud_val+0x176>
			r = r - d;
    1df0:	9b00      	ldr	r3, [sp, #0]
    1df2:	9c01      	ldr	r4, [sp, #4]
    1df4:	1ac0      	subs	r0, r0, r3
    1df6:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    1df8:	4663      	mov	r3, ip
    1dfa:	433b      	orrs	r3, r7
    1dfc:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    1dfe:	3a01      	subs	r2, #1
    1e00:	d2ca      	bcs.n	1d98 <_sercom_get_async_baud_val+0x110>
    1e02:	9c00      	ldr	r4, [sp, #0]
    1e04:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    1e06:	4662      	mov	r2, ip
    1e08:	9905      	ldr	r1, [sp, #20]
    1e0a:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    1e0c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    1e0e:	4a0f      	ldr	r2, [pc, #60]	; (1e4c <_sercom_get_async_baud_val+0x1c4>)
    1e10:	4293      	cmp	r3, r2
    1e12:	d908      	bls.n	1e26 <_sercom_get_async_baud_val+0x19e>
    1e14:	9a06      	ldr	r2, [sp, #24]
    1e16:	3201      	adds	r2, #1
    1e18:	b2d2      	uxtb	r2, r2
    1e1a:	9206      	str	r2, [sp, #24]
    1e1c:	1c0a      	adds	r2, r1, #0
    1e1e:	3201      	adds	r2, #1
    1e20:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    1e22:	2a08      	cmp	r2, #8
    1e24:	d1ae      	bne.n	1d84 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e26:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    1e28:	9a06      	ldr	r2, [sp, #24]
    1e2a:	2a08      	cmp	r2, #8
    1e2c:	d004      	beq.n	1e38 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    1e2e:	0351      	lsls	r1, r2, #13
    1e30:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    1e32:	9b07      	ldr	r3, [sp, #28]
    1e34:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    1e36:	2500      	movs	r5, #0
}
    1e38:	1c28      	adds	r0, r5, #0
    1e3a:	b009      	add	sp, #36	; 0x24
    1e3c:	bc3c      	pop	{r2, r3, r4, r5}
    1e3e:	4690      	mov	r8, r2
    1e40:	4699      	mov	r9, r3
    1e42:	46a2      	mov	sl, r4
    1e44:	46ab      	mov	fp, r5
    1e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e48:	0000664d 	.word	0x0000664d
    1e4c:	00001fff 	.word	0x00001fff

00001e50 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1e50:	b510      	push	{r4, lr}
    1e52:	b082      	sub	sp, #8
    1e54:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1e56:	4b0e      	ldr	r3, [pc, #56]	; (1e90 <sercom_set_gclk_generator+0x40>)
    1e58:	781b      	ldrb	r3, [r3, #0]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d001      	beq.n	1e62 <sercom_set_gclk_generator+0x12>
    1e5e:	2900      	cmp	r1, #0
    1e60:	d00d      	beq.n	1e7e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    1e62:	a901      	add	r1, sp, #4
    1e64:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1e66:	2013      	movs	r0, #19
    1e68:	4b0a      	ldr	r3, [pc, #40]	; (1e94 <sercom_set_gclk_generator+0x44>)
    1e6a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1e6c:	2013      	movs	r0, #19
    1e6e:	4b0a      	ldr	r3, [pc, #40]	; (1e98 <sercom_set_gclk_generator+0x48>)
    1e70:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1e72:	4b07      	ldr	r3, [pc, #28]	; (1e90 <sercom_set_gclk_generator+0x40>)
    1e74:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1e76:	2201      	movs	r2, #1
    1e78:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1e7a:	2000      	movs	r0, #0
    1e7c:	e006      	b.n	1e8c <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    1e7e:	4b04      	ldr	r3, [pc, #16]	; (1e90 <sercom_set_gclk_generator+0x40>)
    1e80:	785b      	ldrb	r3, [r3, #1]
    1e82:	4283      	cmp	r3, r0
    1e84:	d001      	beq.n	1e8a <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1e86:	201d      	movs	r0, #29
    1e88:	e000      	b.n	1e8c <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    1e8a:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1e8c:	b002      	add	sp, #8
    1e8e:	bd10      	pop	{r4, pc}
    1e90:	20000694 	.word	0x20000694
    1e94:	00002cc9 	.word	0x00002cc9
    1e98:	00002c3d 	.word	0x00002c3d

00001e9c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1e9c:	4b44      	ldr	r3, [pc, #272]	; (1fb0 <_sercom_get_default_pad+0x114>)
    1e9e:	4298      	cmp	r0, r3
    1ea0:	d033      	beq.n	1f0a <_sercom_get_default_pad+0x6e>
    1ea2:	d806      	bhi.n	1eb2 <_sercom_get_default_pad+0x16>
    1ea4:	4b43      	ldr	r3, [pc, #268]	; (1fb4 <_sercom_get_default_pad+0x118>)
    1ea6:	4298      	cmp	r0, r3
    1ea8:	d00d      	beq.n	1ec6 <_sercom_get_default_pad+0x2a>
    1eaa:	4b43      	ldr	r3, [pc, #268]	; (1fb8 <_sercom_get_default_pad+0x11c>)
    1eac:	4298      	cmp	r0, r3
    1eae:	d01b      	beq.n	1ee8 <_sercom_get_default_pad+0x4c>
    1eb0:	e06f      	b.n	1f92 <_sercom_get_default_pad+0xf6>
    1eb2:	4b42      	ldr	r3, [pc, #264]	; (1fbc <_sercom_get_default_pad+0x120>)
    1eb4:	4298      	cmp	r0, r3
    1eb6:	d04a      	beq.n	1f4e <_sercom_get_default_pad+0xb2>
    1eb8:	4b41      	ldr	r3, [pc, #260]	; (1fc0 <_sercom_get_default_pad+0x124>)
    1eba:	4298      	cmp	r0, r3
    1ebc:	d058      	beq.n	1f70 <_sercom_get_default_pad+0xd4>
    1ebe:	4b41      	ldr	r3, [pc, #260]	; (1fc4 <_sercom_get_default_pad+0x128>)
    1ec0:	4298      	cmp	r0, r3
    1ec2:	d166      	bne.n	1f92 <_sercom_get_default_pad+0xf6>
    1ec4:	e032      	b.n	1f2c <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ec6:	2901      	cmp	r1, #1
    1ec8:	d006      	beq.n	1ed8 <_sercom_get_default_pad+0x3c>
    1eca:	2900      	cmp	r1, #0
    1ecc:	d063      	beq.n	1f96 <_sercom_get_default_pad+0xfa>
    1ece:	2902      	cmp	r1, #2
    1ed0:	d006      	beq.n	1ee0 <_sercom_get_default_pad+0x44>
    1ed2:	2903      	cmp	r1, #3
    1ed4:	d006      	beq.n	1ee4 <_sercom_get_default_pad+0x48>
    1ed6:	e001      	b.n	1edc <_sercom_get_default_pad+0x40>
    1ed8:	483b      	ldr	r0, [pc, #236]	; (1fc8 <_sercom_get_default_pad+0x12c>)
    1eda:	e067      	b.n	1fac <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1edc:	2000      	movs	r0, #0
    1ede:	e065      	b.n	1fac <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ee0:	483a      	ldr	r0, [pc, #232]	; (1fcc <_sercom_get_default_pad+0x130>)
    1ee2:	e063      	b.n	1fac <_sercom_get_default_pad+0x110>
    1ee4:	483a      	ldr	r0, [pc, #232]	; (1fd0 <_sercom_get_default_pad+0x134>)
    1ee6:	e061      	b.n	1fac <_sercom_get_default_pad+0x110>
    1ee8:	2901      	cmp	r1, #1
    1eea:	d006      	beq.n	1efa <_sercom_get_default_pad+0x5e>
    1eec:	2900      	cmp	r1, #0
    1eee:	d054      	beq.n	1f9a <_sercom_get_default_pad+0xfe>
    1ef0:	2902      	cmp	r1, #2
    1ef2:	d006      	beq.n	1f02 <_sercom_get_default_pad+0x66>
    1ef4:	2903      	cmp	r1, #3
    1ef6:	d006      	beq.n	1f06 <_sercom_get_default_pad+0x6a>
    1ef8:	e001      	b.n	1efe <_sercom_get_default_pad+0x62>
    1efa:	4836      	ldr	r0, [pc, #216]	; (1fd4 <_sercom_get_default_pad+0x138>)
    1efc:	e056      	b.n	1fac <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1efe:	2000      	movs	r0, #0
    1f00:	e054      	b.n	1fac <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f02:	4835      	ldr	r0, [pc, #212]	; (1fd8 <_sercom_get_default_pad+0x13c>)
    1f04:	e052      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f06:	4835      	ldr	r0, [pc, #212]	; (1fdc <_sercom_get_default_pad+0x140>)
    1f08:	e050      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f0a:	2901      	cmp	r1, #1
    1f0c:	d006      	beq.n	1f1c <_sercom_get_default_pad+0x80>
    1f0e:	2900      	cmp	r1, #0
    1f10:	d045      	beq.n	1f9e <_sercom_get_default_pad+0x102>
    1f12:	2902      	cmp	r1, #2
    1f14:	d006      	beq.n	1f24 <_sercom_get_default_pad+0x88>
    1f16:	2903      	cmp	r1, #3
    1f18:	d006      	beq.n	1f28 <_sercom_get_default_pad+0x8c>
    1f1a:	e001      	b.n	1f20 <_sercom_get_default_pad+0x84>
    1f1c:	4830      	ldr	r0, [pc, #192]	; (1fe0 <_sercom_get_default_pad+0x144>)
    1f1e:	e045      	b.n	1fac <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1f20:	2000      	movs	r0, #0
    1f22:	e043      	b.n	1fac <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f24:	482f      	ldr	r0, [pc, #188]	; (1fe4 <_sercom_get_default_pad+0x148>)
    1f26:	e041      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f28:	482f      	ldr	r0, [pc, #188]	; (1fe8 <_sercom_get_default_pad+0x14c>)
    1f2a:	e03f      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f2c:	2901      	cmp	r1, #1
    1f2e:	d006      	beq.n	1f3e <_sercom_get_default_pad+0xa2>
    1f30:	2900      	cmp	r1, #0
    1f32:	d036      	beq.n	1fa2 <_sercom_get_default_pad+0x106>
    1f34:	2902      	cmp	r1, #2
    1f36:	d006      	beq.n	1f46 <_sercom_get_default_pad+0xaa>
    1f38:	2903      	cmp	r1, #3
    1f3a:	d006      	beq.n	1f4a <_sercom_get_default_pad+0xae>
    1f3c:	e001      	b.n	1f42 <_sercom_get_default_pad+0xa6>
    1f3e:	482b      	ldr	r0, [pc, #172]	; (1fec <_sercom_get_default_pad+0x150>)
    1f40:	e034      	b.n	1fac <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1f42:	2000      	movs	r0, #0
    1f44:	e032      	b.n	1fac <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f46:	482a      	ldr	r0, [pc, #168]	; (1ff0 <_sercom_get_default_pad+0x154>)
    1f48:	e030      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f4a:	482a      	ldr	r0, [pc, #168]	; (1ff4 <_sercom_get_default_pad+0x158>)
    1f4c:	e02e      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f4e:	2901      	cmp	r1, #1
    1f50:	d006      	beq.n	1f60 <_sercom_get_default_pad+0xc4>
    1f52:	2900      	cmp	r1, #0
    1f54:	d027      	beq.n	1fa6 <_sercom_get_default_pad+0x10a>
    1f56:	2902      	cmp	r1, #2
    1f58:	d006      	beq.n	1f68 <_sercom_get_default_pad+0xcc>
    1f5a:	2903      	cmp	r1, #3
    1f5c:	d006      	beq.n	1f6c <_sercom_get_default_pad+0xd0>
    1f5e:	e001      	b.n	1f64 <_sercom_get_default_pad+0xc8>
    1f60:	4825      	ldr	r0, [pc, #148]	; (1ff8 <_sercom_get_default_pad+0x15c>)
    1f62:	e023      	b.n	1fac <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1f64:	2000      	movs	r0, #0
    1f66:	e021      	b.n	1fac <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f68:	4824      	ldr	r0, [pc, #144]	; (1ffc <_sercom_get_default_pad+0x160>)
    1f6a:	e01f      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f6c:	4824      	ldr	r0, [pc, #144]	; (2000 <STACK_SIZE>)
    1f6e:	e01d      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f70:	2901      	cmp	r1, #1
    1f72:	d006      	beq.n	1f82 <_sercom_get_default_pad+0xe6>
    1f74:	2900      	cmp	r1, #0
    1f76:	d018      	beq.n	1faa <_sercom_get_default_pad+0x10e>
    1f78:	2902      	cmp	r1, #2
    1f7a:	d006      	beq.n	1f8a <_sercom_get_default_pad+0xee>
    1f7c:	2903      	cmp	r1, #3
    1f7e:	d006      	beq.n	1f8e <_sercom_get_default_pad+0xf2>
    1f80:	e001      	b.n	1f86 <_sercom_get_default_pad+0xea>
    1f82:	4820      	ldr	r0, [pc, #128]	; (2004 <STACK_SIZE+0x4>)
    1f84:	e012      	b.n	1fac <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1f86:	2000      	movs	r0, #0
    1f88:	e010      	b.n	1fac <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f8a:	481f      	ldr	r0, [pc, #124]	; (2008 <STACK_SIZE+0x8>)
    1f8c:	e00e      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f8e:	481f      	ldr	r0, [pc, #124]	; (200c <STACK_SIZE+0xc>)
    1f90:	e00c      	b.n	1fac <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1f92:	2000      	movs	r0, #0
    1f94:	e00a      	b.n	1fac <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f96:	481e      	ldr	r0, [pc, #120]	; (2010 <STACK_SIZE+0x10>)
    1f98:	e008      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f9a:	2003      	movs	r0, #3
    1f9c:	e006      	b.n	1fac <_sercom_get_default_pad+0x110>
    1f9e:	481d      	ldr	r0, [pc, #116]	; (2014 <STACK_SIZE+0x14>)
    1fa0:	e004      	b.n	1fac <_sercom_get_default_pad+0x110>
    1fa2:	481d      	ldr	r0, [pc, #116]	; (2018 <STACK_SIZE+0x18>)
    1fa4:	e002      	b.n	1fac <_sercom_get_default_pad+0x110>
    1fa6:	481d      	ldr	r0, [pc, #116]	; (201c <STACK_SIZE+0x1c>)
    1fa8:	e000      	b.n	1fac <_sercom_get_default_pad+0x110>
    1faa:	481d      	ldr	r0, [pc, #116]	; (2020 <STACK_SIZE+0x20>)
	}

	Assert(false);
	return 0;
}
    1fac:	4770      	bx	lr
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	42001000 	.word	0x42001000
    1fb4:	42000800 	.word	0x42000800
    1fb8:	42000c00 	.word	0x42000c00
    1fbc:	42001800 	.word	0x42001800
    1fc0:	42001c00 	.word	0x42001c00
    1fc4:	42001400 	.word	0x42001400
    1fc8:	00050003 	.word	0x00050003
    1fcc:	00060003 	.word	0x00060003
    1fd0:	00070003 	.word	0x00070003
    1fd4:	00010003 	.word	0x00010003
    1fd8:	001e0003 	.word	0x001e0003
    1fdc:	001f0003 	.word	0x001f0003
    1fe0:	00090003 	.word	0x00090003
    1fe4:	000a0003 	.word	0x000a0003
    1fe8:	000b0003 	.word	0x000b0003
    1fec:	00110003 	.word	0x00110003
    1ff0:	00120003 	.word	0x00120003
    1ff4:	00130003 	.word	0x00130003
    1ff8:	000d0003 	.word	0x000d0003
    1ffc:	000e0003 	.word	0x000e0003
    2000:	000f0003 	.word	0x000f0003
    2004:	00170003 	.word	0x00170003
    2008:	00180003 	.word	0x00180003
    200c:	00190003 	.word	0x00190003
    2010:	00040003 	.word	0x00040003
    2014:	00080003 	.word	0x00080003
    2018:	00100003 	.word	0x00100003
    201c:	000c0003 	.word	0x000c0003
    2020:	00160003 	.word	0x00160003

00002024 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2024:	b530      	push	{r4, r5, lr}
    2026:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2028:	4b0c      	ldr	r3, [pc, #48]	; (205c <_sercom_get_sercom_inst_index+0x38>)
    202a:	466a      	mov	r2, sp
    202c:	cb32      	ldmia	r3!, {r1, r4, r5}
    202e:	c232      	stmia	r2!, {r1, r4, r5}
    2030:	cb32      	ldmia	r3!, {r1, r4, r5}
    2032:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2034:	9b00      	ldr	r3, [sp, #0]
    2036:	4283      	cmp	r3, r0
    2038:	d006      	beq.n	2048 <_sercom_get_sercom_inst_index+0x24>
    203a:	2301      	movs	r3, #1
    203c:	009a      	lsls	r2, r3, #2
    203e:	4669      	mov	r1, sp
    2040:	5852      	ldr	r2, [r2, r1]
    2042:	4282      	cmp	r2, r0
    2044:	d103      	bne.n	204e <_sercom_get_sercom_inst_index+0x2a>
    2046:	e000      	b.n	204a <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2048:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    204a:	b2d8      	uxtb	r0, r3
    204c:	e003      	b.n	2056 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    204e:	3301      	adds	r3, #1
    2050:	2b06      	cmp	r3, #6
    2052:	d1f3      	bne.n	203c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2054:	2000      	movs	r0, #0
}
    2056:	b007      	add	sp, #28
    2058:	bd30      	pop	{r4, r5, pc}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	00008944 	.word	0x00008944

00002060 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2060:	4770      	bx	lr
    2062:	46c0      	nop			; (mov r8, r8)

00002064 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2064:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2066:	4b0a      	ldr	r3, [pc, #40]	; (2090 <_sercom_set_handler+0x2c>)
    2068:	781b      	ldrb	r3, [r3, #0]
    206a:	2b00      	cmp	r3, #0
    206c:	d10c      	bne.n	2088 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    206e:	4f09      	ldr	r7, [pc, #36]	; (2094 <_sercom_set_handler+0x30>)
    2070:	4e09      	ldr	r6, [pc, #36]	; (2098 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2072:	4d0a      	ldr	r5, [pc, #40]	; (209c <_sercom_set_handler+0x38>)
    2074:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2076:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2078:	195a      	adds	r2, r3, r5
    207a:	6014      	str	r4, [r2, #0]
    207c:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    207e:	2b18      	cmp	r3, #24
    2080:	d1f9      	bne.n	2076 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    2082:	2201      	movs	r2, #1
    2084:	4b02      	ldr	r3, [pc, #8]	; (2090 <_sercom_set_handler+0x2c>)
    2086:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2088:	0080      	lsls	r0, r0, #2
    208a:	4b02      	ldr	r3, [pc, #8]	; (2094 <_sercom_set_handler+0x30>)
    208c:	50c1      	str	r1, [r0, r3]
}
    208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2090:	20000696 	.word	0x20000696
    2094:	20000698 	.word	0x20000698
    2098:	00002061 	.word	0x00002061
    209c:	2000083c 	.word	0x2000083c

000020a0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    20a0:	b510      	push	{r4, lr}
    20a2:	b082      	sub	sp, #8
    20a4:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    20a6:	4668      	mov	r0, sp
    20a8:	4905      	ldr	r1, [pc, #20]	; (20c0 <_sercom_get_interrupt_vector+0x20>)
    20aa:	2206      	movs	r2, #6
    20ac:	4b05      	ldr	r3, [pc, #20]	; (20c4 <_sercom_get_interrupt_vector+0x24>)
    20ae:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    20b0:	1c20      	adds	r0, r4, #0
    20b2:	4b05      	ldr	r3, [pc, #20]	; (20c8 <_sercom_get_interrupt_vector+0x28>)
    20b4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    20b6:	466b      	mov	r3, sp
    20b8:	5618      	ldrsb	r0, [r3, r0]
}
    20ba:	b002      	add	sp, #8
    20bc:	bd10      	pop	{r4, pc}
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	0000895c 	.word	0x0000895c
    20c4:	000087fd 	.word	0x000087fd
    20c8:	00002025 	.word	0x00002025

000020cc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    20cc:	b508      	push	{r3, lr}
    20ce:	4b02      	ldr	r3, [pc, #8]	; (20d8 <SERCOM0_Handler+0xc>)
    20d0:	681b      	ldr	r3, [r3, #0]
    20d2:	2000      	movs	r0, #0
    20d4:	4798      	blx	r3
    20d6:	bd08      	pop	{r3, pc}
    20d8:	20000698 	.word	0x20000698

000020dc <SERCOM1_Handler>:
    20dc:	b508      	push	{r3, lr}
    20de:	4b02      	ldr	r3, [pc, #8]	; (20e8 <SERCOM1_Handler+0xc>)
    20e0:	685b      	ldr	r3, [r3, #4]
    20e2:	2001      	movs	r0, #1
    20e4:	4798      	blx	r3
    20e6:	bd08      	pop	{r3, pc}
    20e8:	20000698 	.word	0x20000698

000020ec <SERCOM2_Handler>:
    20ec:	b508      	push	{r3, lr}
    20ee:	4b02      	ldr	r3, [pc, #8]	; (20f8 <SERCOM2_Handler+0xc>)
    20f0:	689b      	ldr	r3, [r3, #8]
    20f2:	2002      	movs	r0, #2
    20f4:	4798      	blx	r3
    20f6:	bd08      	pop	{r3, pc}
    20f8:	20000698 	.word	0x20000698

000020fc <SERCOM3_Handler>:
    20fc:	b508      	push	{r3, lr}
    20fe:	4b02      	ldr	r3, [pc, #8]	; (2108 <SERCOM3_Handler+0xc>)
    2100:	68db      	ldr	r3, [r3, #12]
    2102:	2003      	movs	r0, #3
    2104:	4798      	blx	r3
    2106:	bd08      	pop	{r3, pc}
    2108:	20000698 	.word	0x20000698

0000210c <SERCOM4_Handler>:
    210c:	b508      	push	{r3, lr}
    210e:	4b02      	ldr	r3, [pc, #8]	; (2118 <SERCOM4_Handler+0xc>)
    2110:	691b      	ldr	r3, [r3, #16]
    2112:	2004      	movs	r0, #4
    2114:	4798      	blx	r3
    2116:	bd08      	pop	{r3, pc}
    2118:	20000698 	.word	0x20000698

0000211c <SERCOM5_Handler>:
    211c:	b508      	push	{r3, lr}
    211e:	4b02      	ldr	r3, [pc, #8]	; (2128 <SERCOM5_Handler+0xc>)
    2120:	695b      	ldr	r3, [r3, #20]
    2122:	2005      	movs	r0, #5
    2124:	4798      	blx	r3
    2126:	bd08      	pop	{r3, pc}
    2128:	20000698 	.word	0x20000698

0000212c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    212c:	b5f0      	push	{r4, r5, r6, r7, lr}
    212e:	465f      	mov	r7, fp
    2130:	4656      	mov	r6, sl
    2132:	464d      	mov	r5, r9
    2134:	4644      	mov	r4, r8
    2136:	b4f0      	push	{r4, r5, r6, r7}
    2138:	b091      	sub	sp, #68	; 0x44
    213a:	1c05      	adds	r5, r0, #0
    213c:	1c0c      	adds	r4, r1, #0
    213e:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2140:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2142:	1c08      	adds	r0, r1, #0
    2144:	4bb9      	ldr	r3, [pc, #740]	; (242c <usart_init+0x300>)
    2146:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2148:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    214a:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    214c:	07d2      	lsls	r2, r2, #31
    214e:	d500      	bpl.n	2152 <usart_init+0x26>
    2150:	e163      	b.n	241a <usart_init+0x2ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2152:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2154:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2156:	0792      	lsls	r2, r2, #30
    2158:	d500      	bpl.n	215c <usart_init+0x30>
    215a:	e15e      	b.n	241a <usart_init+0x2ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    215c:	49b4      	ldr	r1, [pc, #720]	; (2430 <usart_init+0x304>)
    215e:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2160:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2162:	3b1b      	subs	r3, #27
    2164:	40bb      	lsls	r3, r7
    2166:	4313      	orrs	r3, r2
    2168:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    216a:	a90f      	add	r1, sp, #60	; 0x3c
    216c:	272d      	movs	r7, #45	; 0x2d
    216e:	5df3      	ldrb	r3, [r6, r7]
    2170:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2172:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2174:	b2c3      	uxtb	r3, r0
    2176:	9302      	str	r3, [sp, #8]
    2178:	1c18      	adds	r0, r3, #0
    217a:	4bae      	ldr	r3, [pc, #696]	; (2434 <usart_init+0x308>)
    217c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    217e:	9802      	ldr	r0, [sp, #8]
    2180:	4bad      	ldr	r3, [pc, #692]	; (2438 <usart_init+0x30c>)
    2182:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2184:	5df0      	ldrb	r0, [r6, r7]
    2186:	2100      	movs	r1, #0
    2188:	4bac      	ldr	r3, [pc, #688]	; (243c <usart_init+0x310>)
    218a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    218c:	7af3      	ldrb	r3, [r6, #11]
    218e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2190:	2324      	movs	r3, #36	; 0x24
    2192:	5cf3      	ldrb	r3, [r6, r3]
    2194:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2196:	2325      	movs	r3, #37	; 0x25
    2198:	5cf3      	ldrb	r3, [r6, r3]
    219a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    219c:	7ef3      	ldrb	r3, [r6, #27]
    219e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    21a0:	7f33      	ldrb	r3, [r6, #28]
    21a2:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    21a4:	682b      	ldr	r3, [r5, #0]
    21a6:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    21a8:	1c18      	adds	r0, r3, #0
    21aa:	4ba0      	ldr	r3, [pc, #640]	; (242c <usart_init+0x300>)
    21ac:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    21ae:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    21b0:	2200      	movs	r2, #0
    21b2:	230e      	movs	r3, #14
    21b4:	a906      	add	r1, sp, #24
    21b6:	468c      	mov	ip, r1
    21b8:	4463      	add	r3, ip
    21ba:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    21bc:	8a33      	ldrh	r3, [r6, #16]
    21be:	4699      	mov	r9, r3
    21c0:	2380      	movs	r3, #128	; 0x80
    21c2:	01db      	lsls	r3, r3, #7
    21c4:	4599      	cmp	r9, r3
    21c6:	d019      	beq.n	21fc <usart_init+0xd0>
    21c8:	d804      	bhi.n	21d4 <usart_init+0xa8>
    21ca:	2380      	movs	r3, #128	; 0x80
    21cc:	019b      	lsls	r3, r3, #6
    21ce:	4599      	cmp	r9, r3
    21d0:	d00a      	beq.n	21e8 <usart_init+0xbc>
    21d2:	e103      	b.n	23dc <usart_init+0x2b0>
    21d4:	23c0      	movs	r3, #192	; 0xc0
    21d6:	01db      	lsls	r3, r3, #7
    21d8:	4599      	cmp	r9, r3
    21da:	d00a      	beq.n	21f2 <usart_init+0xc6>
    21dc:	2380      	movs	r3, #128	; 0x80
    21de:	021b      	lsls	r3, r3, #8
    21e0:	4599      	cmp	r9, r3
    21e2:	d100      	bne.n	21e6 <usart_init+0xba>
    21e4:	e0ff      	b.n	23e6 <usart_init+0x2ba>
    21e6:	e0f9      	b.n	23dc <usart_init+0x2b0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    21e8:	2310      	movs	r3, #16
    21ea:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    21ec:	3b0f      	subs	r3, #15
    21ee:	9307      	str	r3, [sp, #28]
    21f0:	e0fd      	b.n	23ee <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    21f2:	2308      	movs	r3, #8
    21f4:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    21f6:	3b07      	subs	r3, #7
    21f8:	9307      	str	r3, [sp, #28]
    21fa:	e0f8      	b.n	23ee <usart_init+0x2c2>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    21fc:	6833      	ldr	r3, [r6, #0]
    21fe:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    2200:	68f3      	ldr	r3, [r6, #12]
    2202:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2204:	6973      	ldr	r3, [r6, #20]
    2206:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2208:	7e33      	ldrb	r3, [r6, #24]
    220a:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    220c:	2326      	movs	r3, #38	; 0x26
    220e:	5cf3      	ldrb	r3, [r6, r3]
    2210:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2212:	6872      	ldr	r2, [r6, #4]
    2214:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2216:	2a00      	cmp	r2, #0
    2218:	d015      	beq.n	2246 <usart_init+0x11a>
    221a:	2380      	movs	r3, #128	; 0x80
    221c:	055b      	lsls	r3, r3, #21
    221e:	429a      	cmp	r2, r3
    2220:	d136      	bne.n	2290 <usart_init+0x164>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2222:	2327      	movs	r3, #39	; 0x27
    2224:	5cf3      	ldrb	r3, [r6, r3]
    2226:	2b00      	cmp	r3, #0
    2228:	d136      	bne.n	2298 <usart_init+0x16c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    222a:	6a33      	ldr	r3, [r6, #32]
    222c:	4698      	mov	r8, r3
    222e:	b2c0      	uxtb	r0, r0
    2230:	4b83      	ldr	r3, [pc, #524]	; (2440 <usart_init+0x314>)
    2232:	4798      	blx	r3
    2234:	1c01      	adds	r1, r0, #0
    2236:	4640      	mov	r0, r8
    2238:	220e      	movs	r2, #14
    223a:	ab06      	add	r3, sp, #24
    223c:	469c      	mov	ip, r3
    223e:	4462      	add	r2, ip
    2240:	4b80      	ldr	r3, [pc, #512]	; (2444 <usart_init+0x318>)
    2242:	4798      	blx	r3
    2244:	e025      	b.n	2292 <usart_init+0x166>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2246:	2308      	movs	r3, #8
    2248:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    224a:	2300      	movs	r3, #0
    224c:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    224e:	2327      	movs	r3, #39	; 0x27
    2250:	5cf3      	ldrb	r3, [r6, r3]
    2252:	2b00      	cmp	r3, #0
    2254:	d00b      	beq.n	226e <usart_init+0x142>
				status_code =
    2256:	4643      	mov	r3, r8
    2258:	9300      	str	r3, [sp, #0]
    225a:	6a30      	ldr	r0, [r6, #32]
    225c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    225e:	220e      	movs	r2, #14
    2260:	ab06      	add	r3, sp, #24
    2262:	469c      	mov	ip, r3
    2264:	4462      	add	r2, ip
    2266:	9b07      	ldr	r3, [sp, #28]
    2268:	4f77      	ldr	r7, [pc, #476]	; (2448 <usart_init+0x31c>)
    226a:	47b8      	blx	r7
    226c:	e011      	b.n	2292 <usart_init+0x166>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    226e:	6a33      	ldr	r3, [r6, #32]
    2270:	1c1f      	adds	r7, r3, #0
    2272:	b2c0      	uxtb	r0, r0
    2274:	4b72      	ldr	r3, [pc, #456]	; (2440 <usart_init+0x314>)
    2276:	4798      	blx	r3
    2278:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    227a:	4643      	mov	r3, r8
    227c:	9300      	str	r3, [sp, #0]
    227e:	1c38      	adds	r0, r7, #0
    2280:	220e      	movs	r2, #14
    2282:	ab06      	add	r3, sp, #24
    2284:	469c      	mov	ip, r3
    2286:	4462      	add	r2, ip
    2288:	9b07      	ldr	r3, [sp, #28]
    228a:	4f6f      	ldr	r7, [pc, #444]	; (2448 <usart_init+0x31c>)
    228c:	47b8      	blx	r7
    228e:	e000      	b.n	2292 <usart_init+0x166>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2290:	2000      	movs	r0, #0
    2292:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2294:	d000      	beq.n	2298 <usart_init+0x16c>
    2296:	e0c0      	b.n	241a <usart_init+0x2ee>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    2298:	7e73      	ldrb	r3, [r6, #25]
    229a:	2b00      	cmp	r3, #0
    229c:	d002      	beq.n	22a4 <usart_init+0x178>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    229e:	7eb3      	ldrb	r3, [r6, #26]
    22a0:	4652      	mov	r2, sl
    22a2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    22a4:	682a      	ldr	r2, [r5, #0]
    22a6:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    22a8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    22aa:	2b00      	cmp	r3, #0
    22ac:	d1fc      	bne.n	22a8 <usart_init+0x17c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    22ae:	330e      	adds	r3, #14
    22b0:	aa06      	add	r2, sp, #24
    22b2:	4694      	mov	ip, r2
    22b4:	4463      	add	r3, ip
    22b6:	881b      	ldrh	r3, [r3, #0]
    22b8:	4652      	mov	r2, sl
    22ba:	8193      	strh	r3, [r2, #12]
    22bc:	9b02      	ldr	r3, [sp, #8]
    22be:	465a      	mov	r2, fp
    22c0:	4313      	orrs	r3, r2
    22c2:	9a03      	ldr	r2, [sp, #12]
    22c4:	4313      	orrs	r3, r2
    22c6:	433b      	orrs	r3, r7
    22c8:	464a      	mov	r2, r9
    22ca:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    22cc:	9a04      	ldr	r2, [sp, #16]
    22ce:	0212      	lsls	r2, r2, #8
    22d0:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    22d2:	9a05      	ldr	r2, [sp, #20]
    22d4:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
    22d6:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    22d8:	2327      	movs	r3, #39	; 0x27
    22da:	5cf3      	ldrb	r3, [r6, r3]
    22dc:	2b00      	cmp	r3, #0
    22de:	d101      	bne.n	22e4 <usart_init+0x1b8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    22e0:	3304      	adds	r3, #4
    22e2:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    22e4:	7f33      	ldrb	r3, [r6, #28]
    22e6:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    22e8:	7e72      	ldrb	r2, [r6, #25]
    22ea:	0293      	lsls	r3, r2, #10
    22ec:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    22ee:	7f72      	ldrb	r2, [r6, #29]
    22f0:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    22f2:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    22f4:	2224      	movs	r2, #36	; 0x24
    22f6:	5cb2      	ldrb	r2, [r6, r2]
    22f8:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    22fa:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    22fc:	2225      	movs	r2, #37	; 0x25
    22fe:	5cb2      	ldrb	r2, [r6, r2]
    2300:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2302:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    2304:	7af1      	ldrb	r1, [r6, #11]
    2306:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2308:	8933      	ldrh	r3, [r6, #8]
    230a:	2bff      	cmp	r3, #255	; 0xff
    230c:	d004      	beq.n	2318 <usart_init+0x1ec>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    230e:	2280      	movs	r2, #128	; 0x80
    2310:	0452      	lsls	r2, r2, #17
    2312:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2314:	4319      	orrs	r1, r3
    2316:	e005      	b.n	2324 <usart_init+0x1f8>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    2318:	7ef3      	ldrb	r3, [r6, #27]
    231a:	2b00      	cmp	r3, #0
    231c:	d002      	beq.n	2324 <usart_init+0x1f8>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    231e:	2380      	movs	r3, #128	; 0x80
    2320:	04db      	lsls	r3, r3, #19
    2322:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2324:	232c      	movs	r3, #44	; 0x2c
    2326:	5cf3      	ldrb	r3, [r6, r3]
    2328:	2b00      	cmp	r3, #0
    232a:	d103      	bne.n	2334 <usart_init+0x208>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    232c:	4b47      	ldr	r3, [pc, #284]	; (244c <usart_init+0x320>)
    232e:	789b      	ldrb	r3, [r3, #2]
    2330:	079b      	lsls	r3, r3, #30
    2332:	d501      	bpl.n	2338 <usart_init+0x20c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2334:	2380      	movs	r3, #128	; 0x80
    2336:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2338:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    233a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    233c:	2b00      	cmp	r3, #0
    233e:	d1fc      	bne.n	233a <usart_init+0x20e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2340:	4653      	mov	r3, sl
    2342:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2344:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2346:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2348:	2b00      	cmp	r3, #0
    234a:	d1fc      	bne.n	2346 <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    234c:	4653      	mov	r3, sl
    234e:	601f      	str	r7, [r3, #0]
    2350:	ab0e      	add	r3, sp, #56	; 0x38
    2352:	2280      	movs	r2, #128	; 0x80
    2354:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2356:	2200      	movs	r2, #0
    2358:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    235a:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    235c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    235e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2360:	930a      	str	r3, [sp, #40]	; 0x28
    2362:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2364:	930b      	str	r3, [sp, #44]	; 0x2c
    2366:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2368:	930c      	str	r3, [sp, #48]	; 0x30
    236a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    236c:	9302      	str	r3, [sp, #8]
    236e:	930d      	str	r3, [sp, #52]	; 0x34
    2370:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2372:	ae0e      	add	r6, sp, #56	; 0x38
    2374:	b2f9      	uxtb	r1, r7
    2376:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2378:	aa0a      	add	r2, sp, #40	; 0x28
    237a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    237c:	2800      	cmp	r0, #0
    237e:	d102      	bne.n	2386 <usart_init+0x25a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2380:	1c20      	adds	r0, r4, #0
    2382:	4b33      	ldr	r3, [pc, #204]	; (2450 <usart_init+0x324>)
    2384:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2386:	1c43      	adds	r3, r0, #1
    2388:	d005      	beq.n	2396 <usart_init+0x26a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    238a:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    238c:	0c00      	lsrs	r0, r0, #16
    238e:	b2c0      	uxtb	r0, r0
    2390:	1c31      	adds	r1, r6, #0
    2392:	4b30      	ldr	r3, [pc, #192]	; (2454 <usart_init+0x328>)
    2394:	4798      	blx	r3
    2396:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2398:	2f04      	cmp	r7, #4
    239a:	d1eb      	bne.n	2374 <usart_init+0x248>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    239c:	2300      	movs	r3, #0
    239e:	60eb      	str	r3, [r5, #12]
    23a0:	612b      	str	r3, [r5, #16]
    23a2:	616b      	str	r3, [r5, #20]
    23a4:	61ab      	str	r3, [r5, #24]
    23a6:	61eb      	str	r3, [r5, #28]
    23a8:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    23aa:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    23ac:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    23ae:	2200      	movs	r2, #0
    23b0:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    23b2:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    23b4:	3330      	adds	r3, #48	; 0x30
    23b6:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    23b8:	3301      	adds	r3, #1
    23ba:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    23bc:	3301      	adds	r3, #1
    23be:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    23c0:	3301      	adds	r3, #1
    23c2:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    23c4:	6828      	ldr	r0, [r5, #0]
    23c6:	4b19      	ldr	r3, [pc, #100]	; (242c <usart_init+0x300>)
    23c8:	4798      	blx	r3
    23ca:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    23cc:	4922      	ldr	r1, [pc, #136]	; (2458 <usart_init+0x32c>)
    23ce:	4b23      	ldr	r3, [pc, #140]	; (245c <usart_init+0x330>)
    23d0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    23d2:	00a4      	lsls	r4, r4, #2
    23d4:	4b22      	ldr	r3, [pc, #136]	; (2460 <usart_init+0x334>)
    23d6:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    23d8:	2300      	movs	r3, #0
    23da:	e01e      	b.n	241a <usart_init+0x2ee>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    23dc:	2310      	movs	r3, #16
    23de:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    23e0:	2300      	movs	r3, #0
    23e2:	9307      	str	r3, [sp, #28]
    23e4:	e003      	b.n	23ee <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    23e6:	2303      	movs	r3, #3
    23e8:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    23ea:	2300      	movs	r3, #0
    23ec:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    23ee:	6833      	ldr	r3, [r6, #0]
    23f0:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    23f2:	68f3      	ldr	r3, [r6, #12]
    23f4:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    23f6:	6973      	ldr	r3, [r6, #20]
    23f8:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    23fa:	7e33      	ldrb	r3, [r6, #24]
    23fc:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    23fe:	2326      	movs	r3, #38	; 0x26
    2400:	5cf3      	ldrb	r3, [r6, r3]
    2402:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    2404:	6872      	ldr	r2, [r6, #4]
    2406:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2408:	2a00      	cmp	r2, #0
    240a:	d100      	bne.n	240e <usart_init+0x2e2>
    240c:	e71f      	b.n	224e <usart_init+0x122>
    240e:	2380      	movs	r3, #128	; 0x80
    2410:	055b      	lsls	r3, r3, #21
    2412:	429a      	cmp	r2, r3
    2414:	d100      	bne.n	2418 <usart_init+0x2ec>
    2416:	e704      	b.n	2222 <usart_init+0xf6>
    2418:	e73e      	b.n	2298 <usart_init+0x16c>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    241a:	1c18      	adds	r0, r3, #0
    241c:	b011      	add	sp, #68	; 0x44
    241e:	bc3c      	pop	{r2, r3, r4, r5}
    2420:	4690      	mov	r8, r2
    2422:	4699      	mov	r9, r3
    2424:	46a2      	mov	sl, r4
    2426:	46ab      	mov	fp, r5
    2428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	00002025 	.word	0x00002025
    2430:	40000400 	.word	0x40000400
    2434:	00002cc9 	.word	0x00002cc9
    2438:	00002c3d 	.word	0x00002c3d
    243c:	00001e51 	.word	0x00001e51
    2440:	00002ce5 	.word	0x00002ce5
    2444:	00001c61 	.word	0x00001c61
    2448:	00001c89 	.word	0x00001c89
    244c:	41002000 	.word	0x41002000
    2450:	00001e9d 	.word	0x00001e9d
    2454:	00002dc1 	.word	0x00002dc1
    2458:	000024ed 	.word	0x000024ed
    245c:	00002065 	.word	0x00002065
    2460:	2000083c 	.word	0x2000083c

00002464 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2466:	1c04      	adds	r4, r0, #0
    2468:	1c0d      	adds	r5, r1, #0
    246a:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    246c:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    246e:	4b0f      	ldr	r3, [pc, #60]	; (24ac <_usart_read_buffer+0x48>)
    2470:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2472:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2474:	b29b      	uxth	r3, r3
    2476:	2b00      	cmp	r3, #0
    2478:	d003      	beq.n	2482 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    247a:	4b0d      	ldr	r3, [pc, #52]	; (24b0 <_usart_read_buffer+0x4c>)
    247c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    247e:	2005      	movs	r0, #5
    2480:	e013      	b.n	24aa <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    2482:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2484:	4b0a      	ldr	r3, [pc, #40]	; (24b0 <_usart_read_buffer+0x4c>)
    2486:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    2488:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    248a:	2205      	movs	r2, #5
    248c:	2332      	movs	r3, #50	; 0x32
    248e:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2490:	3b2e      	subs	r3, #46	; 0x2e
    2492:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    2494:	7a23      	ldrb	r3, [r4, #8]
    2496:	2b00      	cmp	r3, #0
    2498:	d001      	beq.n	249e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    249a:	2320      	movs	r3, #32
    249c:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    249e:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    24a0:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    24a2:	2b00      	cmp	r3, #0
    24a4:	d001      	beq.n	24aa <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    24a6:	2308      	movs	r3, #8
    24a8:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
    24aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24ac:	000014cd 	.word	0x000014cd
    24b0:	0000150d 	.word	0x0000150d

000024b4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    24b4:	1c93      	adds	r3, r2, #2
    24b6:	009b      	lsls	r3, r3, #2
    24b8:	18c3      	adds	r3, r0, r3
    24ba:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    24bc:	2301      	movs	r3, #1
    24be:	4093      	lsls	r3, r2
    24c0:	1c1a      	adds	r2, r3, #0
    24c2:	2130      	movs	r1, #48	; 0x30
    24c4:	5c43      	ldrb	r3, [r0, r1]
    24c6:	431a      	orrs	r2, r3
    24c8:	5442      	strb	r2, [r0, r1]
}
    24ca:	4770      	bx	lr

000024cc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    24cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    24ce:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    24d0:	2a00      	cmp	r2, #0
    24d2:	d006      	beq.n	24e2 <usart_read_buffer_job+0x16>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    24d4:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    24d6:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    24d8:	2c00      	cmp	r4, #0
    24da:	d002      	beq.n	24e2 <usart_read_buffer_job+0x16>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    24dc:	4b02      	ldr	r3, [pc, #8]	; (24e8 <usart_read_buffer_job+0x1c>)
    24de:	4798      	blx	r3
    24e0:	1c03      	adds	r3, r0, #0
}
    24e2:	1c18      	adds	r0, r3, #0
    24e4:	bd10      	pop	{r4, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	00002465 	.word	0x00002465

000024ec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    24ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    24ee:	0080      	lsls	r0, r0, #2
    24f0:	4b60      	ldr	r3, [pc, #384]	; (2674 <_usart_interrupt_handler+0x188>)
    24f2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    24f4:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    24f6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    24f8:	2b00      	cmp	r3, #0
    24fa:	d1fc      	bne.n	24f6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    24fc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    24fe:	7da6      	ldrb	r6, [r4, #22]
    2500:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    2502:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    2504:	5ceb      	ldrb	r3, [r5, r3]
    2506:	2230      	movs	r2, #48	; 0x30
    2508:	5caf      	ldrb	r7, [r5, r2]
    250a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    250c:	07f3      	lsls	r3, r6, #31
    250e:	d522      	bpl.n	2556 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2510:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2512:	b29b      	uxth	r3, r3
    2514:	2b00      	cmp	r3, #0
    2516:	d01c      	beq.n	2552 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2518:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    251a:	7813      	ldrb	r3, [r2, #0]
    251c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    251e:	1c51      	adds	r1, r2, #1
    2520:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2522:	7969      	ldrb	r1, [r5, #5]
    2524:	2901      	cmp	r1, #1
    2526:	d001      	beq.n	252c <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2528:	b29b      	uxth	r3, r3
    252a:	e004      	b.n	2536 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    252c:	7851      	ldrb	r1, [r2, #1]
    252e:	0209      	lsls	r1, r1, #8
    2530:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2532:	3202      	adds	r2, #2
    2534:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2536:	05db      	lsls	r3, r3, #23
    2538:	0ddb      	lsrs	r3, r3, #23
    253a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    253c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    253e:	3b01      	subs	r3, #1
    2540:	b29b      	uxth	r3, r3
    2542:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2544:	2b00      	cmp	r3, #0
    2546:	d106      	bne.n	2556 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2548:	3301      	adds	r3, #1
    254a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    254c:	3301      	adds	r3, #1
    254e:	75a3      	strb	r3, [r4, #22]
    2550:	e001      	b.n	2556 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2552:	2301      	movs	r3, #1
    2554:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2556:	07b3      	lsls	r3, r6, #30
    2558:	d509      	bpl.n	256e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    255a:	2302      	movs	r3, #2
    255c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    255e:	2200      	movs	r2, #0
    2560:	3331      	adds	r3, #49	; 0x31
    2562:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2564:	07fb      	lsls	r3, r7, #31
    2566:	d502      	bpl.n	256e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2568:	1c28      	adds	r0, r5, #0
    256a:	68eb      	ldr	r3, [r5, #12]
    256c:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    256e:	0773      	lsls	r3, r6, #29
    2570:	d560      	bpl.n	2634 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    2572:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2574:	b29b      	uxth	r3, r3
    2576:	2b00      	cmp	r3, #0
    2578:	d05a      	beq.n	2630 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    257a:	8b63      	ldrh	r3, [r4, #26]
    257c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    257e:	071a      	lsls	r2, r3, #28
    2580:	d402      	bmi.n	2588 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2582:	223f      	movs	r2, #63	; 0x3f
    2584:	4013      	ands	r3, r2
    2586:	e001      	b.n	258c <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2588:	2237      	movs	r2, #55	; 0x37
    258a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    258c:	2b00      	cmp	r3, #0
    258e:	d02d      	beq.n	25ec <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2590:	079a      	lsls	r2, r3, #30
    2592:	d505      	bpl.n	25a0 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2594:	221a      	movs	r2, #26
    2596:	2332      	movs	r3, #50	; 0x32
    2598:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    259a:	3b30      	subs	r3, #48	; 0x30
    259c:	8363      	strh	r3, [r4, #26]
    259e:	e01f      	b.n	25e0 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    25a0:	075a      	lsls	r2, r3, #29
    25a2:	d505      	bpl.n	25b0 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    25a4:	221e      	movs	r2, #30
    25a6:	2332      	movs	r3, #50	; 0x32
    25a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    25aa:	3b2e      	subs	r3, #46	; 0x2e
    25ac:	8363      	strh	r3, [r4, #26]
    25ae:	e017      	b.n	25e0 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    25b0:	07da      	lsls	r2, r3, #31
    25b2:	d505      	bpl.n	25c0 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    25b4:	2213      	movs	r2, #19
    25b6:	2332      	movs	r3, #50	; 0x32
    25b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    25ba:	3b31      	subs	r3, #49	; 0x31
    25bc:	8363      	strh	r3, [r4, #26]
    25be:	e00f      	b.n	25e0 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    25c0:	06da      	lsls	r2, r3, #27
    25c2:	d505      	bpl.n	25d0 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    25c4:	2242      	movs	r2, #66	; 0x42
    25c6:	2332      	movs	r3, #50	; 0x32
    25c8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    25ca:	3b22      	subs	r3, #34	; 0x22
    25cc:	8363      	strh	r3, [r4, #26]
    25ce:	e007      	b.n	25e0 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    25d0:	2220      	movs	r2, #32
    25d2:	421a      	tst	r2, r3
    25d4:	d004      	beq.n	25e0 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    25d6:	3221      	adds	r2, #33	; 0x21
    25d8:	2332      	movs	r3, #50	; 0x32
    25da:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    25dc:	3b12      	subs	r3, #18
    25de:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    25e0:	077b      	lsls	r3, r7, #29
    25e2:	d527      	bpl.n	2634 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    25e4:	1c28      	adds	r0, r5, #0
    25e6:	696b      	ldr	r3, [r5, #20]
    25e8:	4798      	blx	r3
    25ea:	e023      	b.n	2634 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    25ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    25ee:	05db      	lsls	r3, r3, #23
    25f0:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    25f2:	b2da      	uxtb	r2, r3
    25f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    25f6:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    25f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    25fa:	1c51      	adds	r1, r2, #1
    25fc:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    25fe:	7969      	ldrb	r1, [r5, #5]
    2600:	2901      	cmp	r1, #1
    2602:	d104      	bne.n	260e <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2604:	0a1b      	lsrs	r3, r3, #8
    2606:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2608:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    260a:	3301      	adds	r3, #1
    260c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    260e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2610:	3b01      	subs	r3, #1
    2612:	b29b      	uxth	r3, r3
    2614:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2616:	2b00      	cmp	r3, #0
    2618:	d10c      	bne.n	2634 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    261a:	3304      	adds	r3, #4
    261c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    261e:	2200      	movs	r2, #0
    2620:	332e      	adds	r3, #46	; 0x2e
    2622:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2624:	07bb      	lsls	r3, r7, #30
    2626:	d505      	bpl.n	2634 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2628:	1c28      	adds	r0, r5, #0
    262a:	692b      	ldr	r3, [r5, #16]
    262c:	4798      	blx	r3
    262e:	e001      	b.n	2634 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2630:	2304      	movs	r3, #4
    2632:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2634:	06f3      	lsls	r3, r6, #27
    2636:	d507      	bpl.n	2648 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2638:	2310      	movs	r3, #16
    263a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    263c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    263e:	06fb      	lsls	r3, r7, #27
    2640:	d502      	bpl.n	2648 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2642:	1c28      	adds	r0, r5, #0
    2644:	69eb      	ldr	r3, [r5, #28]
    2646:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2648:	06b3      	lsls	r3, r6, #26
    264a:	d507      	bpl.n	265c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    264c:	2320      	movs	r3, #32
    264e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2650:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2652:	073b      	lsls	r3, r7, #28
    2654:	d502      	bpl.n	265c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2656:	1c28      	adds	r0, r5, #0
    2658:	69ab      	ldr	r3, [r5, #24]
    265a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    265c:	0733      	lsls	r3, r6, #28
    265e:	d507      	bpl.n	2670 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2660:	2308      	movs	r3, #8
    2662:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2664:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2666:	06bb      	lsls	r3, r7, #26
    2668:	d502      	bpl.n	2670 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    266a:	6a2b      	ldr	r3, [r5, #32]
    266c:	1c28      	adds	r0, r5, #0
    266e:	4798      	blx	r3
		}
	}
#endif
}
    2670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	2000083c 	.word	0x2000083c

00002678 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2678:	b508      	push	{r3, lr}
	switch (clock_source) {
    267a:	2808      	cmp	r0, #8
    267c:	d803      	bhi.n	2686 <system_clock_source_get_hz+0xe>
    267e:	0080      	lsls	r0, r0, #2
    2680:	4b1b      	ldr	r3, [pc, #108]	; (26f0 <system_clock_source_get_hz+0x78>)
    2682:	581b      	ldr	r3, [r3, r0]
    2684:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2686:	2000      	movs	r0, #0
    2688:	e031      	b.n	26ee <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    268a:	4b1a      	ldr	r3, [pc, #104]	; (26f4 <system_clock_source_get_hz+0x7c>)
    268c:	6918      	ldr	r0, [r3, #16]
    268e:	e02e      	b.n	26ee <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2690:	4b19      	ldr	r3, [pc, #100]	; (26f8 <system_clock_source_get_hz+0x80>)
    2692:	6a18      	ldr	r0, [r3, #32]
    2694:	0580      	lsls	r0, r0, #22
    2696:	0f80      	lsrs	r0, r0, #30
    2698:	4b18      	ldr	r3, [pc, #96]	; (26fc <system_clock_source_get_hz+0x84>)
    269a:	40c3      	lsrs	r3, r0
    269c:	1c18      	adds	r0, r3, #0
    269e:	e026      	b.n	26ee <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    26a0:	4b14      	ldr	r3, [pc, #80]	; (26f4 <system_clock_source_get_hz+0x7c>)
    26a2:	6958      	ldr	r0, [r3, #20]
    26a4:	e023      	b.n	26ee <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    26a6:	4b13      	ldr	r3, [pc, #76]	; (26f4 <system_clock_source_get_hz+0x7c>)
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	2002      	movs	r0, #2
    26ac:	4018      	ands	r0, r3
    26ae:	d01e      	beq.n	26ee <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    26b0:	4911      	ldr	r1, [pc, #68]	; (26f8 <system_clock_source_get_hz+0x80>)
    26b2:	2210      	movs	r2, #16
    26b4:	68cb      	ldr	r3, [r1, #12]
    26b6:	421a      	tst	r2, r3
    26b8:	d0fc      	beq.n	26b4 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    26ba:	4b0e      	ldr	r3, [pc, #56]	; (26f4 <system_clock_source_get_hz+0x7c>)
    26bc:	681b      	ldr	r3, [r3, #0]
    26be:	075b      	lsls	r3, r3, #29
    26c0:	d514      	bpl.n	26ec <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    26c2:	2000      	movs	r0, #0
    26c4:	4b0e      	ldr	r3, [pc, #56]	; (2700 <system_clock_source_get_hz+0x88>)
    26c6:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    26c8:	4b0a      	ldr	r3, [pc, #40]	; (26f4 <system_clock_source_get_hz+0x7c>)
    26ca:	689b      	ldr	r3, [r3, #8]
    26cc:	041b      	lsls	r3, r3, #16
    26ce:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    26d0:	4358      	muls	r0, r3
    26d2:	e00c      	b.n	26ee <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    26d4:	2350      	movs	r3, #80	; 0x50
    26d6:	4a08      	ldr	r2, [pc, #32]	; (26f8 <system_clock_source_get_hz+0x80>)
    26d8:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    26da:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    26dc:	075b      	lsls	r3, r3, #29
    26de:	d506      	bpl.n	26ee <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    26e0:	4b04      	ldr	r3, [pc, #16]	; (26f4 <system_clock_source_get_hz+0x7c>)
    26e2:	68d8      	ldr	r0, [r3, #12]
    26e4:	e003      	b.n	26ee <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    26e6:	2080      	movs	r0, #128	; 0x80
    26e8:	0200      	lsls	r0, r0, #8
    26ea:	e000      	b.n	26ee <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    26ec:	4805      	ldr	r0, [pc, #20]	; (2704 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    26ee:	bd08      	pop	{r3, pc}
    26f0:	00008964 	.word	0x00008964
    26f4:	200006b0 	.word	0x200006b0
    26f8:	40000800 	.word	0x40000800
    26fc:	007a1200 	.word	0x007a1200
    2700:	00002ce5 	.word	0x00002ce5
    2704:	02dc6c00 	.word	0x02dc6c00

00002708 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2708:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    270a:	4c0c      	ldr	r4, [pc, #48]	; (273c <system_clock_source_osc8m_set_config+0x34>)
    270c:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    270e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2710:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2712:	7842      	ldrb	r2, [r0, #1]
    2714:	2001      	movs	r0, #1
    2716:	4002      	ands	r2, r0
    2718:	0192      	lsls	r2, r2, #6
    271a:	2640      	movs	r6, #64	; 0x40
    271c:	43b3      	bics	r3, r6
    271e:	4313      	orrs	r3, r2
    2720:	1c02      	adds	r2, r0, #0
    2722:	402a      	ands	r2, r5
    2724:	01d2      	lsls	r2, r2, #7
    2726:	307f      	adds	r0, #127	; 0x7f
    2728:	4383      	bics	r3, r0
    272a:	4313      	orrs	r3, r2
    272c:	2203      	movs	r2, #3
    272e:	400a      	ands	r2, r1
    2730:	0212      	lsls	r2, r2, #8
    2732:	4903      	ldr	r1, [pc, #12]	; (2740 <system_clock_source_osc8m_set_config+0x38>)
    2734:	400b      	ands	r3, r1
    2736:	4313      	orrs	r3, r2
    2738:	6223      	str	r3, [r4, #32]
}
    273a:	bd70      	pop	{r4, r5, r6, pc}
    273c:	40000800 	.word	0x40000800
    2740:	fffffcff 	.word	0xfffffcff

00002744 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2744:	b5f0      	push	{r4, r5, r6, r7, lr}
    2746:	4657      	mov	r7, sl
    2748:	464e      	mov	r6, r9
    274a:	4645      	mov	r5, r8
    274c:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    274e:	4e1c      	ldr	r6, [pc, #112]	; (27c0 <system_clock_source_osc32k_set_config+0x7c>)
    2750:	69b3      	ldr	r3, [r6, #24]
    2752:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2754:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2756:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2758:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    275a:	78c3      	ldrb	r3, [r0, #3]
    275c:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    275e:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2760:	7883      	ldrb	r3, [r0, #2]
    2762:	2001      	movs	r0, #1
    2764:	4003      	ands	r3, r0
    2766:	009b      	lsls	r3, r3, #2
    2768:	469a      	mov	sl, r3
    276a:	2204      	movs	r2, #4
    276c:	4690      	mov	r8, r2
    276e:	4662      	mov	r2, ip
    2770:	4643      	mov	r3, r8
    2772:	439a      	bics	r2, r3
    2774:	1c13      	adds	r3, r2, #0
    2776:	4652      	mov	r2, sl
    2778:	431a      	orrs	r2, r3
    277a:	1c13      	adds	r3, r2, #0
    277c:	4001      	ands	r1, r0
    277e:	00c9      	lsls	r1, r1, #3
    2780:	2208      	movs	r2, #8
    2782:	4393      	bics	r3, r2
    2784:	430b      	orrs	r3, r1
    2786:	464a      	mov	r2, r9
    2788:	4002      	ands	r2, r0
    278a:	0192      	lsls	r2, r2, #6
    278c:	2140      	movs	r1, #64	; 0x40
    278e:	438b      	bics	r3, r1
    2790:	4313      	orrs	r3, r2
    2792:	4007      	ands	r7, r0
    2794:	01ff      	lsls	r7, r7, #7
    2796:	2280      	movs	r2, #128	; 0x80
    2798:	4393      	bics	r3, r2
    279a:	433b      	orrs	r3, r7
    279c:	3a79      	subs	r2, #121	; 0x79
    279e:	4015      	ands	r5, r2
    27a0:	022d      	lsls	r5, r5, #8
    27a2:	4f08      	ldr	r7, [pc, #32]	; (27c4 <system_clock_source_osc32k_set_config+0x80>)
    27a4:	403b      	ands	r3, r7
    27a6:	432b      	orrs	r3, r5
    27a8:	4004      	ands	r4, r0
    27aa:	0320      	lsls	r0, r4, #12
    27ac:	4c06      	ldr	r4, [pc, #24]	; (27c8 <system_clock_source_osc32k_set_config+0x84>)
    27ae:	401c      	ands	r4, r3
    27b0:	4304      	orrs	r4, r0
    27b2:	61b4      	str	r4, [r6, #24]
}
    27b4:	bc1c      	pop	{r2, r3, r4}
    27b6:	4690      	mov	r8, r2
    27b8:	4699      	mov	r9, r3
    27ba:	46a2      	mov	sl, r4
    27bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	40000800 	.word	0x40000800
    27c4:	fffff8ff 	.word	0xfffff8ff
    27c8:	ffffefff 	.word	0xffffefff

000027cc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    27cc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    27ce:	7a03      	ldrb	r3, [r0, #8]
    27d0:	069b      	lsls	r3, r3, #26
    27d2:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    27d4:	8943      	ldrh	r3, [r0, #10]
    27d6:	059b      	lsls	r3, r3, #22
    27d8:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    27da:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    27dc:	4c19      	ldr	r4, [pc, #100]	; (2844 <system_clock_source_dfll_set_config+0x78>)
    27de:	6063      	str	r3, [r4, #4]
    27e0:	8881      	ldrh	r1, [r0, #4]
    27e2:	8843      	ldrh	r3, [r0, #2]
    27e4:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    27e6:	79c3      	ldrb	r3, [r0, #7]
    27e8:	7982      	ldrb	r2, [r0, #6]
    27ea:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    27ec:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    27ee:	7842      	ldrb	r2, [r0, #1]
    27f0:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    27f2:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    27f4:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    27f6:	7803      	ldrb	r3, [r0, #0]
    27f8:	2b04      	cmp	r3, #4
    27fa:	d10f      	bne.n	281c <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    27fc:	7b03      	ldrb	r3, [r0, #12]
    27fe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2800:	8a02      	ldrh	r2, [r0, #16]
    2802:	4313      	orrs	r3, r2
    2804:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2806:	89c3      	ldrh	r3, [r0, #14]
    2808:	041b      	lsls	r3, r3, #16
    280a:	4a0f      	ldr	r2, [pc, #60]	; (2848 <system_clock_source_dfll_set_config+0x7c>)
    280c:	4013      	ands	r3, r2
    280e:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    2810:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    2812:	6821      	ldr	r1, [r4, #0]
    2814:	2304      	movs	r3, #4
    2816:	430b      	orrs	r3, r1
    2818:	6023      	str	r3, [r4, #0]
    281a:	e011      	b.n	2840 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    281c:	2b20      	cmp	r3, #32
    281e:	d10f      	bne.n	2840 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2820:	7b03      	ldrb	r3, [r0, #12]
    2822:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2824:	8a02      	ldrh	r2, [r0, #16]
    2826:	4313      	orrs	r3, r2
    2828:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    282a:	89c3      	ldrh	r3, [r0, #14]
    282c:	041b      	lsls	r3, r3, #16
    282e:	4a06      	ldr	r2, [pc, #24]	; (2848 <system_clock_source_dfll_set_config+0x7c>)
    2830:	4013      	ands	r3, r2
    2832:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    2834:	4a03      	ldr	r2, [pc, #12]	; (2844 <system_clock_source_dfll_set_config+0x78>)
    2836:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2838:	6813      	ldr	r3, [r2, #0]
    283a:	4904      	ldr	r1, [pc, #16]	; (284c <system_clock_source_dfll_set_config+0x80>)
    283c:	430b      	orrs	r3, r1
    283e:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2840:	bd10      	pop	{r4, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	200006b0 	.word	0x200006b0
    2848:	03ff0000 	.word	0x03ff0000
    284c:	00000424 	.word	0x00000424

00002850 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2850:	2808      	cmp	r0, #8
    2852:	d803      	bhi.n	285c <system_clock_source_enable+0xc>
    2854:	0080      	lsls	r0, r0, #2
    2856:	4b25      	ldr	r3, [pc, #148]	; (28ec <system_clock_source_enable+0x9c>)
    2858:	581b      	ldr	r3, [r3, r0]
    285a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    285c:	2017      	movs	r0, #23
    285e:	e044      	b.n	28ea <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2860:	4a23      	ldr	r2, [pc, #140]	; (28f0 <system_clock_source_enable+0xa0>)
    2862:	6a11      	ldr	r1, [r2, #32]
    2864:	2302      	movs	r3, #2
    2866:	430b      	orrs	r3, r1
    2868:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    286a:	2000      	movs	r0, #0
    286c:	e03d      	b.n	28ea <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    286e:	4a20      	ldr	r2, [pc, #128]	; (28f0 <system_clock_source_enable+0xa0>)
    2870:	6991      	ldr	r1, [r2, #24]
    2872:	2302      	movs	r3, #2
    2874:	430b      	orrs	r3, r1
    2876:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2878:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    287a:	e036      	b.n	28ea <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    287c:	4a1c      	ldr	r2, [pc, #112]	; (28f0 <system_clock_source_enable+0xa0>)
    287e:	8a11      	ldrh	r1, [r2, #16]
    2880:	2302      	movs	r3, #2
    2882:	430b      	orrs	r3, r1
    2884:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2886:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    2888:	e02f      	b.n	28ea <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    288a:	4a19      	ldr	r2, [pc, #100]	; (28f0 <system_clock_source_enable+0xa0>)
    288c:	8a91      	ldrh	r1, [r2, #20]
    288e:	2302      	movs	r3, #2
    2890:	430b      	orrs	r3, r1
    2892:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2894:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    2896:	e028      	b.n	28ea <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2898:	4916      	ldr	r1, [pc, #88]	; (28f4 <system_clock_source_enable+0xa4>)
    289a:	680b      	ldr	r3, [r1, #0]
    289c:	2202      	movs	r2, #2
    289e:	4313      	orrs	r3, r2
    28a0:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    28a2:	4b13      	ldr	r3, [pc, #76]	; (28f0 <system_clock_source_enable+0xa0>)
    28a4:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28a6:	1c19      	adds	r1, r3, #0
    28a8:	320e      	adds	r2, #14
    28aa:	68cb      	ldr	r3, [r1, #12]
    28ac:	421a      	tst	r2, r3
    28ae:	d0fc      	beq.n	28aa <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    28b0:	4a10      	ldr	r2, [pc, #64]	; (28f4 <system_clock_source_enable+0xa4>)
    28b2:	6891      	ldr	r1, [r2, #8]
    28b4:	4b0e      	ldr	r3, [pc, #56]	; (28f0 <system_clock_source_enable+0xa0>)
    28b6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    28b8:	6852      	ldr	r2, [r2, #4]
    28ba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    28bc:	2200      	movs	r2, #0
    28be:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    28c0:	1c19      	adds	r1, r3, #0
    28c2:	3210      	adds	r2, #16
    28c4:	68cb      	ldr	r3, [r1, #12]
    28c6:	421a      	tst	r2, r3
    28c8:	d0fc      	beq.n	28c4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    28ca:	4b0a      	ldr	r3, [pc, #40]	; (28f4 <system_clock_source_enable+0xa4>)
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	b29b      	uxth	r3, r3
    28d0:	4a07      	ldr	r2, [pc, #28]	; (28f0 <system_clock_source_enable+0xa0>)
    28d2:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    28d4:	2000      	movs	r0, #0
    28d6:	e008      	b.n	28ea <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    28d8:	4905      	ldr	r1, [pc, #20]	; (28f0 <system_clock_source_enable+0xa0>)
    28da:	2244      	movs	r2, #68	; 0x44
    28dc:	5c88      	ldrb	r0, [r1, r2]
    28de:	2302      	movs	r3, #2
    28e0:	4303      	orrs	r3, r0
    28e2:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    28e4:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    28e6:	e000      	b.n	28ea <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    28e8:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    28ea:	4770      	bx	lr
    28ec:	00008988 	.word	0x00008988
    28f0:	40000800 	.word	0x40000800
    28f4:	200006b0 	.word	0x200006b0

000028f8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    28f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28fa:	4657      	mov	r7, sl
    28fc:	464e      	mov	r6, r9
    28fe:	4645      	mov	r5, r8
    2900:	b4e0      	push	{r5, r6, r7}
    2902:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2904:	22c2      	movs	r2, #194	; 0xc2
    2906:	00d2      	lsls	r2, r2, #3
    2908:	4b52      	ldr	r3, [pc, #328]	; (2a54 <system_clock_init+0x15c>)
    290a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    290c:	4952      	ldr	r1, [pc, #328]	; (2a58 <system_clock_init+0x160>)
    290e:	684b      	ldr	r3, [r1, #4]
    2910:	221e      	movs	r2, #30
    2912:	4393      	bics	r3, r2
    2914:	3a1a      	subs	r2, #26
    2916:	4313      	orrs	r3, r2
    2918:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
    291a:	ab01      	add	r3, sp, #4
    291c:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    291e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2920:	4d4e      	ldr	r5, [pc, #312]	; (2a5c <system_clock_init+0x164>)
    2922:	b2e0      	uxtb	r0, r4
    2924:	a901      	add	r1, sp, #4
    2926:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2928:	3401      	adds	r4, #1
    292a:	2c25      	cmp	r4, #37	; 0x25
    292c:	d1f9      	bne.n	2922 <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    292e:	4c4c      	ldr	r4, [pc, #304]	; (2a60 <system_clock_init+0x168>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    2930:	6823      	ldr	r3, [r4, #0]
    2932:	04db      	lsls	r3, r3, #19
    2934:	4947      	ldr	r1, [pc, #284]	; (2a54 <system_clock_init+0x15c>)
    2936:	0e5b      	lsrs	r3, r3, #25
    2938:	041a      	lsls	r2, r3, #16
    293a:	6988      	ldr	r0, [r1, #24]
    293c:	4b49      	ldr	r3, [pc, #292]	; (2a64 <system_clock_init+0x16c>)
    293e:	4003      	ands	r3, r0
    2940:	4313      	orrs	r3, r2
    2942:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    2944:	a80a      	add	r0, sp, #40	; 0x28
    2946:	2301      	movs	r3, #1
    2948:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    294a:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    294c:	2500      	movs	r5, #0
    294e:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    2950:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2952:	3306      	adds	r3, #6
    2954:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2956:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2958:	4b43      	ldr	r3, [pc, #268]	; (2a68 <system_clock_init+0x170>)
    295a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    295c:	2004      	movs	r0, #4
    295e:	4b43      	ldr	r3, [pc, #268]	; (2a6c <system_clock_init+0x174>)
    2960:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2962:	ab05      	add	r3, sp, #20
    2964:	2200      	movs	r2, #0
    2966:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2968:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    296a:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    296c:	2120      	movs	r1, #32
    296e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2970:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2972:	6823      	ldr	r3, [r4, #0]
    2974:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2976:	2b3f      	cmp	r3, #63	; 0x3f
    2978:	d100      	bne.n	297c <system_clock_init+0x84>
		coarse = 0x1f;
    297a:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    297c:	a805      	add	r0, sp, #20
    297e:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2980:	2307      	movs	r3, #7
    2982:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2984:	3303      	adds	r3, #3
    2986:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2988:	4b39      	ldr	r3, [pc, #228]	; (2a70 <system_clock_init+0x178>)
    298a:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    298c:	3bff      	subs	r3, #255	; 0xff
    298e:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2990:	4b38      	ldr	r3, [pc, #224]	; (2a74 <system_clock_init+0x17c>)
    2992:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2994:	4b38      	ldr	r3, [pc, #224]	; (2a78 <system_clock_init+0x180>)
    2996:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    2998:	a804      	add	r0, sp, #16
    299a:	2500      	movs	r5, #0
    299c:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    299e:	2301      	movs	r3, #1
    29a0:	4698      	mov	r8, r3
    29a2:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    29a4:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    29a6:	4b35      	ldr	r3, [pc, #212]	; (2a7c <system_clock_init+0x184>)
    29a8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    29aa:	2006      	movs	r0, #6
    29ac:	4b2f      	ldr	r3, [pc, #188]	; (2a6c <system_clock_init+0x174>)
    29ae:	4699      	mov	r9, r3
    29b0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    29b2:	4b33      	ldr	r3, [pc, #204]	; (2a80 <system_clock_init+0x188>)
    29b4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    29b6:	ac01      	add	r4, sp, #4
    29b8:	4643      	mov	r3, r8
    29ba:	6063      	str	r3, [r4, #4]
	config->high_when_disabled = false;
    29bc:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    29be:	3305      	adds	r3, #5
    29c0:	469a      	mov	sl, r3
    29c2:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    29c4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    29c6:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    29c8:	2001      	movs	r0, #1
    29ca:	1c21      	adds	r1, r4, #0
    29cc:	4f2d      	ldr	r7, [pc, #180]	; (2a84 <system_clock_init+0x18c>)
    29ce:	47b8      	blx	r7
    29d0:	2001      	movs	r0, #1
    29d2:	4e2d      	ldr	r6, [pc, #180]	; (2a88 <system_clock_init+0x190>)
    29d4:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    29d6:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    29d8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    29da:	7265      	strb	r5, [r4, #9]
    29dc:	2304      	movs	r3, #4
    29de:	7023      	strb	r3, [r4, #0]
    29e0:	331c      	adds	r3, #28
    29e2:	6063      	str	r3, [r4, #4]
    29e4:	2002      	movs	r0, #2
    29e6:	1c21      	adds	r1, r4, #0
    29e8:	47b8      	blx	r7
    29ea:	2002      	movs	r0, #2
    29ec:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    29ee:	4643      	mov	r3, r8
    29f0:	6063      	str	r3, [r4, #4]
	config->high_when_disabled = false;
    29f2:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    29f4:	4653      	mov	r3, sl
    29f6:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    29f8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    29fa:	7265      	strb	r5, [r4, #9]
    29fc:	2003      	movs	r0, #3
    29fe:	1c21      	adds	r1, r4, #0
    2a00:	47b8      	blx	r7
    2a02:	2003      	movs	r0, #3
    2a04:	47b0      	blx	r6
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2a06:	2007      	movs	r0, #7
    2a08:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2a0a:	4912      	ldr	r1, [pc, #72]	; (2a54 <system_clock_init+0x15c>)
    2a0c:	2210      	movs	r2, #16
    2a0e:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2a10:	421a      	tst	r2, r3
    2a12:	d0fc      	beq.n	2a0e <system_clock_init+0x116>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2a14:	4a0f      	ldr	r2, [pc, #60]	; (2a54 <system_clock_init+0x15c>)
    2a16:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    2a18:	2380      	movs	r3, #128	; 0x80
    2a1a:	430b      	orrs	r3, r1
    2a1c:	8493      	strh	r3, [r2, #36]	; 0x24
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2a1e:	4a1b      	ldr	r2, [pc, #108]	; (2a8c <system_clock_init+0x194>)
    2a20:	2300      	movs	r3, #0
    2a22:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2a24:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2a26:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2a28:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2a2a:	a901      	add	r1, sp, #4
    2a2c:	2201      	movs	r2, #1
    2a2e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2a30:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    2a32:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2a34:	3307      	adds	r3, #7
    2a36:	700b      	strb	r3, [r1, #0]
    2a38:	720a      	strb	r2, [r1, #8]
    2a3a:	2000      	movs	r0, #0
    2a3c:	4b11      	ldr	r3, [pc, #68]	; (2a84 <system_clock_init+0x18c>)
    2a3e:	4798      	blx	r3
    2a40:	2000      	movs	r0, #0
    2a42:	4b11      	ldr	r3, [pc, #68]	; (2a88 <system_clock_init+0x190>)
    2a44:	4798      	blx	r3
#endif
}
    2a46:	b00c      	add	sp, #48	; 0x30
    2a48:	bc1c      	pop	{r2, r3, r4}
    2a4a:	4690      	mov	r8, r2
    2a4c:	4699      	mov	r9, r3
    2a4e:	46a2      	mov	sl, r4
    2a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	40000800 	.word	0x40000800
    2a58:	41004000 	.word	0x41004000
    2a5c:	00002cc9 	.word	0x00002cc9
    2a60:	00806024 	.word	0x00806024
    2a64:	ff80ffff 	.word	0xff80ffff
    2a68:	00002745 	.word	0x00002745
    2a6c:	00002851 	.word	0x00002851
    2a70:	000001ff 	.word	0x000001ff
    2a74:	ffffbb80 	.word	0xffffbb80
    2a78:	000027cd 	.word	0x000027cd
    2a7c:	00002709 	.word	0x00002709
    2a80:	00002a91 	.word	0x00002a91
    2a84:	00002ab5 	.word	0x00002ab5
    2a88:	00002b6d 	.word	0x00002b6d
    2a8c:	40000400 	.word	0x40000400

00002a90 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2a90:	4a06      	ldr	r2, [pc, #24]	; (2aac <system_gclk_init+0x1c>)
    2a92:	6991      	ldr	r1, [r2, #24]
    2a94:	2308      	movs	r3, #8
    2a96:	430b      	orrs	r3, r1
    2a98:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2a9a:	2201      	movs	r2, #1
    2a9c:	4b04      	ldr	r3, [pc, #16]	; (2ab0 <system_gclk_init+0x20>)
    2a9e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2aa0:	1c19      	adds	r1, r3, #0
    2aa2:	780b      	ldrb	r3, [r1, #0]
    2aa4:	4213      	tst	r3, r2
    2aa6:	d1fc      	bne.n	2aa2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2aa8:	4770      	bx	lr
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	40000400 	.word	0x40000400
    2ab0:	40000c00 	.word	0x40000c00

00002ab4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2ab8:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2aba:	780d      	ldrb	r5, [r1, #0]
    2abc:	022d      	lsls	r5, r5, #8
    2abe:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2ac0:	784b      	ldrb	r3, [r1, #1]
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d002      	beq.n	2acc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2ac6:	2380      	movs	r3, #128	; 0x80
    2ac8:	02db      	lsls	r3, r3, #11
    2aca:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2acc:	7a4b      	ldrb	r3, [r1, #9]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d002      	beq.n	2ad8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2ad2:	2380      	movs	r3, #128	; 0x80
    2ad4:	031b      	lsls	r3, r3, #12
    2ad6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2ad8:	6848      	ldr	r0, [r1, #4]
    2ada:	2801      	cmp	r0, #1
    2adc:	d918      	bls.n	2b10 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2ade:	1e43      	subs	r3, r0, #1
    2ae0:	4218      	tst	r0, r3
    2ae2:	d110      	bne.n	2b06 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2ae4:	2802      	cmp	r0, #2
    2ae6:	d906      	bls.n	2af6 <system_gclk_gen_set_config+0x42>
    2ae8:	2302      	movs	r3, #2
    2aea:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2aec:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    2aee:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2af0:	4298      	cmp	r0, r3
    2af2:	d8fb      	bhi.n	2aec <system_gclk_gen_set_config+0x38>
    2af4:	e000      	b.n	2af8 <system_gclk_gen_set_config+0x44>
    2af6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2af8:	0212      	lsls	r2, r2, #8
    2afa:	4332      	orrs	r2, r6
    2afc:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2afe:	2380      	movs	r3, #128	; 0x80
    2b00:	035b      	lsls	r3, r3, #13
    2b02:	431d      	orrs	r5, r3
    2b04:	e004      	b.n	2b10 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2b06:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2b08:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2b0a:	2380      	movs	r3, #128	; 0x80
    2b0c:	029b      	lsls	r3, r3, #10
    2b0e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2b10:	7a0b      	ldrb	r3, [r1, #8]
    2b12:	2b00      	cmp	r3, #0
    2b14:	d002      	beq.n	2b1c <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2b16:	2380      	movs	r3, #128	; 0x80
    2b18:	039b      	lsls	r3, r3, #14
    2b1a:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b1c:	4a0f      	ldr	r2, [pc, #60]	; (2b5c <system_gclk_gen_set_config+0xa8>)
    2b1e:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    2b20:	b25b      	sxtb	r3, r3
    2b22:	2b00      	cmp	r3, #0
    2b24:	dbfb      	blt.n	2b1e <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2b26:	4b0e      	ldr	r3, [pc, #56]	; (2b60 <system_gclk_gen_set_config+0xac>)
    2b28:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2b2a:	4b0e      	ldr	r3, [pc, #56]	; (2b64 <system_gclk_gen_set_config+0xb0>)
    2b2c:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b2e:	4a0b      	ldr	r2, [pc, #44]	; (2b5c <system_gclk_gen_set_config+0xa8>)
    2b30:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2b32:	b25b      	sxtb	r3, r3
    2b34:	2b00      	cmp	r3, #0
    2b36:	dbfb      	blt.n	2b30 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2b38:	4b08      	ldr	r3, [pc, #32]	; (2b5c <system_gclk_gen_set_config+0xa8>)
    2b3a:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b3c:	1c1a      	adds	r2, r3, #0
    2b3e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    2b40:	b25b      	sxtb	r3, r3
    2b42:	2b00      	cmp	r3, #0
    2b44:	dbfb      	blt.n	2b3e <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2b46:	4a05      	ldr	r2, [pc, #20]	; (2b5c <system_gclk_gen_set_config+0xa8>)
    2b48:	6851      	ldr	r1, [r2, #4]
    2b4a:	2380      	movs	r3, #128	; 0x80
    2b4c:	025b      	lsls	r3, r3, #9
    2b4e:	400b      	ands	r3, r1
    2b50:	431d      	orrs	r5, r3
    2b52:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2b54:	4b04      	ldr	r3, [pc, #16]	; (2b68 <system_gclk_gen_set_config+0xb4>)
    2b56:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b58:	bd70      	pop	{r4, r5, r6, pc}
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	40000c00 	.word	0x40000c00
    2b60:	000014cd 	.word	0x000014cd
    2b64:	40000c08 	.word	0x40000c08
    2b68:	0000150d 	.word	0x0000150d

00002b6c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2b6c:	b510      	push	{r4, lr}
    2b6e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b70:	4a0b      	ldr	r2, [pc, #44]	; (2ba0 <system_gclk_gen_enable+0x34>)
    2b72:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2b74:	b25b      	sxtb	r3, r3
    2b76:	2b00      	cmp	r3, #0
    2b78:	dbfb      	blt.n	2b72 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2b7a:	4b0a      	ldr	r3, [pc, #40]	; (2ba4 <system_gclk_gen_enable+0x38>)
    2b7c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b7e:	4b0a      	ldr	r3, [pc, #40]	; (2ba8 <system_gclk_gen_enable+0x3c>)
    2b80:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b82:	4a07      	ldr	r2, [pc, #28]	; (2ba0 <system_gclk_gen_enable+0x34>)
    2b84:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2b86:	b25b      	sxtb	r3, r3
    2b88:	2b00      	cmp	r3, #0
    2b8a:	dbfb      	blt.n	2b84 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2b8c:	4a04      	ldr	r2, [pc, #16]	; (2ba0 <system_gclk_gen_enable+0x34>)
    2b8e:	6853      	ldr	r3, [r2, #4]
    2b90:	2180      	movs	r1, #128	; 0x80
    2b92:	0249      	lsls	r1, r1, #9
    2b94:	430b      	orrs	r3, r1
    2b96:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2b98:	4b04      	ldr	r3, [pc, #16]	; (2bac <system_gclk_gen_enable+0x40>)
    2b9a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b9c:	bd10      	pop	{r4, pc}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	40000c00 	.word	0x40000c00
    2ba4:	000014cd 	.word	0x000014cd
    2ba8:	40000c04 	.word	0x40000c04
    2bac:	0000150d 	.word	0x0000150d

00002bb0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2bb4:	4a1a      	ldr	r2, [pc, #104]	; (2c20 <system_gclk_gen_get_hz+0x70>)
    2bb6:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2bb8:	b25b      	sxtb	r3, r3
    2bba:	2b00      	cmp	r3, #0
    2bbc:	dbfb      	blt.n	2bb6 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2bbe:	4b19      	ldr	r3, [pc, #100]	; (2c24 <system_gclk_gen_get_hz+0x74>)
    2bc0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2bc2:	4b19      	ldr	r3, [pc, #100]	; (2c28 <system_gclk_gen_get_hz+0x78>)
    2bc4:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2bc6:	4a16      	ldr	r2, [pc, #88]	; (2c20 <system_gclk_gen_get_hz+0x70>)
    2bc8:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2bca:	b25b      	sxtb	r3, r3
    2bcc:	2b00      	cmp	r3, #0
    2bce:	dbfb      	blt.n	2bc8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2bd0:	4e13      	ldr	r6, [pc, #76]	; (2c20 <system_gclk_gen_get_hz+0x70>)
    2bd2:	6870      	ldr	r0, [r6, #4]
    2bd4:	04c0      	lsls	r0, r0, #19
    2bd6:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2bd8:	4b14      	ldr	r3, [pc, #80]	; (2c2c <system_gclk_gen_get_hz+0x7c>)
    2bda:	4798      	blx	r3
    2bdc:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2bde:	4b12      	ldr	r3, [pc, #72]	; (2c28 <system_gclk_gen_get_hz+0x78>)
    2be0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2be2:	6876      	ldr	r6, [r6, #4]
    2be4:	02f6      	lsls	r6, r6, #11
    2be6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2be8:	4b11      	ldr	r3, [pc, #68]	; (2c30 <system_gclk_gen_get_hz+0x80>)
    2bea:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2bec:	4a0c      	ldr	r2, [pc, #48]	; (2c20 <system_gclk_gen_get_hz+0x70>)
    2bee:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    2bf0:	b25b      	sxtb	r3, r3
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	dbfb      	blt.n	2bee <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2bf6:	4b0a      	ldr	r3, [pc, #40]	; (2c20 <system_gclk_gen_get_hz+0x70>)
    2bf8:	689c      	ldr	r4, [r3, #8]
    2bfa:	0a24      	lsrs	r4, r4, #8
    2bfc:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2bfe:	4b0d      	ldr	r3, [pc, #52]	; (2c34 <system_gclk_gen_get_hz+0x84>)
    2c00:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2c02:	2e00      	cmp	r6, #0
    2c04:	d107      	bne.n	2c16 <system_gclk_gen_get_hz+0x66>
    2c06:	2c01      	cmp	r4, #1
    2c08:	d907      	bls.n	2c1a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2c0a:	1c28      	adds	r0, r5, #0
    2c0c:	1c21      	adds	r1, r4, #0
    2c0e:	4b0a      	ldr	r3, [pc, #40]	; (2c38 <system_gclk_gen_get_hz+0x88>)
    2c10:	4798      	blx	r3
    2c12:	1c05      	adds	r5, r0, #0
    2c14:	e001      	b.n	2c1a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2c16:	3401      	adds	r4, #1
    2c18:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2c1a:	1c28      	adds	r0, r5, #0
    2c1c:	bd70      	pop	{r4, r5, r6, pc}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	40000c00 	.word	0x40000c00
    2c24:	000014cd 	.word	0x000014cd
    2c28:	40000c04 	.word	0x40000c04
    2c2c:	00002679 	.word	0x00002679
    2c30:	40000c08 	.word	0x40000c08
    2c34:	0000150d 	.word	0x0000150d
    2c38:	0000628d 	.word	0x0000628d

00002c3c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2c3c:	b510      	push	{r4, lr}
    2c3e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2c40:	4b06      	ldr	r3, [pc, #24]	; (2c5c <system_gclk_chan_enable+0x20>)
    2c42:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c44:	4b06      	ldr	r3, [pc, #24]	; (2c60 <system_gclk_chan_enable+0x24>)
    2c46:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2c48:	4a06      	ldr	r2, [pc, #24]	; (2c64 <system_gclk_chan_enable+0x28>)
    2c4a:	8851      	ldrh	r1, [r2, #2]
    2c4c:	2380      	movs	r3, #128	; 0x80
    2c4e:	01db      	lsls	r3, r3, #7
    2c50:	430b      	orrs	r3, r1
    2c52:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2c54:	4b04      	ldr	r3, [pc, #16]	; (2c68 <system_gclk_chan_enable+0x2c>)
    2c56:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c58:	bd10      	pop	{r4, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	000014cd 	.word	0x000014cd
    2c60:	40000c02 	.word	0x40000c02
    2c64:	40000c00 	.word	0x40000c00
    2c68:	0000150d 	.word	0x0000150d

00002c6c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2c6c:	b510      	push	{r4, lr}
    2c6e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2c70:	4b0f      	ldr	r3, [pc, #60]	; (2cb0 <system_gclk_chan_disable+0x44>)
    2c72:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c74:	4b0f      	ldr	r3, [pc, #60]	; (2cb4 <system_gclk_chan_disable+0x48>)
    2c76:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2c78:	4b0f      	ldr	r3, [pc, #60]	; (2cb8 <system_gclk_chan_disable+0x4c>)
    2c7a:	885a      	ldrh	r2, [r3, #2]
    2c7c:	0512      	lsls	r2, r2, #20
    2c7e:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2c80:	8859      	ldrh	r1, [r3, #2]
    2c82:	4a0e      	ldr	r2, [pc, #56]	; (2cbc <system_gclk_chan_disable+0x50>)
    2c84:	400a      	ands	r2, r1
    2c86:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2c88:	8859      	ldrh	r1, [r3, #2]
    2c8a:	4a0d      	ldr	r2, [pc, #52]	; (2cc0 <system_gclk_chan_disable+0x54>)
    2c8c:	400a      	ands	r2, r1
    2c8e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2c90:	1c19      	adds	r1, r3, #0
    2c92:	2280      	movs	r2, #128	; 0x80
    2c94:	01d2      	lsls	r2, r2, #7
    2c96:	884b      	ldrh	r3, [r1, #2]
    2c98:	4213      	tst	r3, r2
    2c9a:	d1fc      	bne.n	2c96 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2c9c:	4906      	ldr	r1, [pc, #24]	; (2cb8 <system_gclk_chan_disable+0x4c>)
    2c9e:	0202      	lsls	r2, r0, #8
    2ca0:	8848      	ldrh	r0, [r1, #2]
    2ca2:	4b06      	ldr	r3, [pc, #24]	; (2cbc <system_gclk_chan_disable+0x50>)
    2ca4:	4003      	ands	r3, r0
    2ca6:	4313      	orrs	r3, r2
    2ca8:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2caa:	4b06      	ldr	r3, [pc, #24]	; (2cc4 <system_gclk_chan_disable+0x58>)
    2cac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2cae:	bd10      	pop	{r4, pc}
    2cb0:	000014cd 	.word	0x000014cd
    2cb4:	40000c02 	.word	0x40000c02
    2cb8:	40000c00 	.word	0x40000c00
    2cbc:	fffff0ff 	.word	0xfffff0ff
    2cc0:	ffffbfff 	.word	0xffffbfff
    2cc4:	0000150d 	.word	0x0000150d

00002cc8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2cc8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2cca:	780c      	ldrb	r4, [r1, #0]
    2ccc:	0224      	lsls	r4, r4, #8
    2cce:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2cd0:	4b02      	ldr	r3, [pc, #8]	; (2cdc <system_gclk_chan_set_config+0x14>)
    2cd2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2cd4:	b2a4      	uxth	r4, r4
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <system_gclk_chan_set_config+0x18>)
    2cd8:	805c      	strh	r4, [r3, #2]
}
    2cda:	bd10      	pop	{r4, pc}
    2cdc:	00002c6d 	.word	0x00002c6d
    2ce0:	40000c00 	.word	0x40000c00

00002ce4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2ce4:	b510      	push	{r4, lr}
    2ce6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2ce8:	4b06      	ldr	r3, [pc, #24]	; (2d04 <system_gclk_chan_get_hz+0x20>)
    2cea:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2cec:	4b06      	ldr	r3, [pc, #24]	; (2d08 <system_gclk_chan_get_hz+0x24>)
    2cee:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2cf0:	4b06      	ldr	r3, [pc, #24]	; (2d0c <system_gclk_chan_get_hz+0x28>)
    2cf2:	885c      	ldrh	r4, [r3, #2]
    2cf4:	0524      	lsls	r4, r4, #20
    2cf6:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2cf8:	4b05      	ldr	r3, [pc, #20]	; (2d10 <system_gclk_chan_get_hz+0x2c>)
    2cfa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2cfc:	1c20      	adds	r0, r4, #0
    2cfe:	4b05      	ldr	r3, [pc, #20]	; (2d14 <system_gclk_chan_get_hz+0x30>)
    2d00:	4798      	blx	r3
}
    2d02:	bd10      	pop	{r4, pc}
    2d04:	000014cd 	.word	0x000014cd
    2d08:	40000c02 	.word	0x40000c02
    2d0c:	40000c00 	.word	0x40000c00
    2d10:	0000150d 	.word	0x0000150d
    2d14:	00002bb1 	.word	0x00002bb1

00002d18 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2d18:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2d1a:	78d3      	ldrb	r3, [r2, #3]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d11e      	bne.n	2d5e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2d20:	7814      	ldrb	r4, [r2, #0]
    2d22:	2c80      	cmp	r4, #128	; 0x80
    2d24:	d004      	beq.n	2d30 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2d26:	0624      	lsls	r4, r4, #24
    2d28:	2380      	movs	r3, #128	; 0x80
    2d2a:	025b      	lsls	r3, r3, #9
    2d2c:	431c      	orrs	r4, r3
    2d2e:	e000      	b.n	2d32 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2d30:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2d32:	7853      	ldrb	r3, [r2, #1]
    2d34:	2502      	movs	r5, #2
    2d36:	43ab      	bics	r3, r5
    2d38:	d10a      	bne.n	2d50 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2d3a:	7893      	ldrb	r3, [r2, #2]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	d103      	bne.n	2d48 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2d40:	2380      	movs	r3, #128	; 0x80
    2d42:	029b      	lsls	r3, r3, #10
    2d44:	431c      	orrs	r4, r3
    2d46:	e002      	b.n	2d4e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2d48:	23c0      	movs	r3, #192	; 0xc0
    2d4a:	02db      	lsls	r3, r3, #11
    2d4c:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2d4e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d50:	7853      	ldrb	r3, [r2, #1]
    2d52:	3b01      	subs	r3, #1
    2d54:	2b01      	cmp	r3, #1
    2d56:	d812      	bhi.n	2d7e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2d58:	4b18      	ldr	r3, [pc, #96]	; (2dbc <_system_pinmux_config+0xa4>)
    2d5a:	401c      	ands	r4, r3
    2d5c:	e00f      	b.n	2d7e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2d5e:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2d60:	040b      	lsls	r3, r1, #16
    2d62:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2d64:	24a0      	movs	r4, #160	; 0xa0
    2d66:	05e4      	lsls	r4, r4, #23
    2d68:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d6a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2d6c:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2d6e:	24d0      	movs	r4, #208	; 0xd0
    2d70:	0624      	lsls	r4, r4, #24
    2d72:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d74:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2d76:	78d3      	ldrb	r3, [r2, #3]
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d018      	beq.n	2dae <_system_pinmux_config+0x96>
    2d7c:	e01c      	b.n	2db8 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2d7e:	040b      	lsls	r3, r1, #16
    2d80:	0c1b      	lsrs	r3, r3, #16
    2d82:	25a0      	movs	r5, #160	; 0xa0
    2d84:	05ed      	lsls	r5, r5, #23
    2d86:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2d88:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d8a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2d8c:	0c0b      	lsrs	r3, r1, #16
    2d8e:	25d0      	movs	r5, #208	; 0xd0
    2d90:	062d      	lsls	r5, r5, #24
    2d92:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2d94:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d96:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2d98:	78d3      	ldrb	r3, [r2, #3]
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d10c      	bne.n	2db8 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2d9e:	0363      	lsls	r3, r4, #13
    2da0:	d505      	bpl.n	2dae <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2da2:	7893      	ldrb	r3, [r2, #2]
    2da4:	2b01      	cmp	r3, #1
    2da6:	d101      	bne.n	2dac <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    2da8:	6181      	str	r1, [r0, #24]
    2daa:	e000      	b.n	2dae <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2dac:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2dae:	7853      	ldrb	r3, [r2, #1]
    2db0:	3b01      	subs	r3, #1
    2db2:	2b01      	cmp	r3, #1
    2db4:	d800      	bhi.n	2db8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2db6:	6081      	str	r1, [r0, #8]
		}
	}
}
    2db8:	bd30      	pop	{r4, r5, pc}
    2dba:	46c0      	nop			; (mov r8, r8)
    2dbc:	fffbffff 	.word	0xfffbffff

00002dc0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2dc0:	b508      	push	{r3, lr}
    2dc2:	1c03      	adds	r3, r0, #0
    2dc4:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2dc6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2dc8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2dca:	2900      	cmp	r1, #0
    2dcc:	d104      	bne.n	2dd8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    2dce:	0958      	lsrs	r0, r3, #5
    2dd0:	01c0      	lsls	r0, r0, #7
    2dd2:	4905      	ldr	r1, [pc, #20]	; (2de8 <system_pinmux_pin_set_config+0x28>)
    2dd4:	468c      	mov	ip, r1
    2dd6:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2dd8:	211f      	movs	r1, #31
    2dda:	400b      	ands	r3, r1
    2ddc:	391e      	subs	r1, #30
    2dde:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    2de0:	4b02      	ldr	r3, [pc, #8]	; (2dec <system_pinmux_pin_set_config+0x2c>)
    2de2:	4798      	blx	r3
}
    2de4:	bd08      	pop	{r3, pc}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	41004400 	.word	0x41004400
    2dec:	00002d19 	.word	0x00002d19

00002df0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2df0:	4770      	bx	lr
    2df2:	46c0      	nop			; (mov r8, r8)

00002df4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2df4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2df6:	4b05      	ldr	r3, [pc, #20]	; (2e0c <system_init+0x18>)
    2df8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2dfa:	4b05      	ldr	r3, [pc, #20]	; (2e10 <system_init+0x1c>)
    2dfc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2dfe:	4b05      	ldr	r3, [pc, #20]	; (2e14 <system_init+0x20>)
    2e00:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2e02:	4b05      	ldr	r3, [pc, #20]	; (2e18 <system_init+0x24>)
    2e04:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2e06:	4b05      	ldr	r3, [pc, #20]	; (2e1c <system_init+0x28>)
    2e08:	4798      	blx	r3
}
    2e0a:	bd08      	pop	{r3, pc}
    2e0c:	000028f9 	.word	0x000028f9
    2e10:	0000153d 	.word	0x0000153d
    2e14:	000016a9 	.word	0x000016a9
    2e18:	000018d1 	.word	0x000018d1
    2e1c:	00002df1 	.word	0x00002df1

00002e20 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    2e20:	4b08      	ldr	r3, [pc, #32]	; (2e44 <_tcc_get_inst_index+0x24>)
    2e22:	4298      	cmp	r0, r3
    2e24:	d00a      	beq.n	2e3c <_tcc_get_inst_index+0x1c>
    2e26:	4b08      	ldr	r3, [pc, #32]	; (2e48 <_tcc_get_inst_index+0x28>)
    2e28:	4298      	cmp	r0, r3
    2e2a:	d005      	beq.n	2e38 <_tcc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2e2c:	2300      	movs	r3, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    2e2e:	4a07      	ldr	r2, [pc, #28]	; (2e4c <_tcc_get_inst_index+0x2c>)
    2e30:	4290      	cmp	r0, r2
    2e32:	d105      	bne.n	2e40 <_tcc_get_inst_index+0x20>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2e34:	3302      	adds	r3, #2
    2e36:	e002      	b.n	2e3e <_tcc_get_inst_index+0x1e>
    2e38:	2301      	movs	r3, #1
    2e3a:	e000      	b.n	2e3e <_tcc_get_inst_index+0x1e>
    2e3c:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
			return i;
    2e3e:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2e40:	1c18      	adds	r0, r3, #0
    2e42:	4770      	bx	lr
    2e44:	42002000 	.word	0x42002000
    2e48:	42002400 	.word	0x42002400
    2e4c:	42002800 	.word	0x42002800

00002e50 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    2e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e52:	1c0f      	adds	r7, r1, #0
    2e54:	1c15      	adds	r5, r2, #0
    2e56:	1c1e      	adds	r6, r3, #0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2e58:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    2e5a:	1c20      	adds	r0, r4, #0
    2e5c:	4b13      	ldr	r3, [pc, #76]	; (2eac <_tcc_set_compare_value+0x5c>)
    2e5e:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2e60:	4b13      	ldr	r3, [pc, #76]	; (2eb0 <_tcc_set_compare_value+0x60>)
    2e62:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
    2e64:	2317      	movs	r3, #23
	Tcc *const tcc_module = module_inst->hw;
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2e66:	42ba      	cmp	r2, r7
    2e68:	d91d      	bls.n	2ea6 <_tcc_set_compare_value+0x56>
		return STATUS_ERR_INVALID_ARG;
	}

	uint32_t max_count = _tcc_maxs[module_index];
    2e6a:	0080      	lsls	r0, r0, #2

	/* Check compare value */
	if (compare > max_count) {
    2e6c:	4b11      	ldr	r3, [pc, #68]	; (2eb4 <_tcc_set_compare_value+0x64>)
    2e6e:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    2e70:	2317      	movs	r3, #23
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
    2e72:	42aa      	cmp	r2, r5
    2e74:	d317      	bcc.n	2ea6 <_tcc_set_compare_value+0x56>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
    2e76:	2e00      	cmp	r6, #0
    2e78:	d00a      	beq.n	2e90 <_tcc_set_compare_value+0x40>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    2e7a:	2280      	movs	r2, #128	; 0x80
    2e7c:	0312      	lsls	r2, r2, #12
    2e7e:	40ba      	lsls	r2, r7

	if (double_buffering_enabled) {
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    2e80:	68a3      	ldr	r3, [r4, #8]
    2e82:	4213      	tst	r3, r2
    2e84:	d1fc      	bne.n	2e80 <_tcc_set_compare_value+0x30>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    2e86:	371c      	adds	r7, #28
    2e88:	00bf      	lsls	r7, r7, #2
    2e8a:	513d      	str	r5, [r7, r4]
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
    2e8c:	2300      	movs	r3, #0
    2e8e:	e00a      	b.n	2ea6 <_tcc_set_compare_value+0x56>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    2e90:	2280      	movs	r2, #128	; 0x80
    2e92:	0052      	lsls	r2, r2, #1
    2e94:	40ba      	lsls	r2, r7
    2e96:	68a3      	ldr	r3, [r4, #8]
    2e98:	4213      	tst	r3, r2
    2e9a:	d1fc      	bne.n	2e96 <_tcc_set_compare_value+0x46>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    2e9c:	3710      	adds	r7, #16
    2e9e:	00bf      	lsls	r7, r7, #2
    2ea0:	19e4      	adds	r4, r4, r7
    2ea2:	6065      	str	r5, [r4, #4]
	}
	return STATUS_OK;
    2ea4:	2300      	movs	r3, #0
}
    2ea6:	1c18      	adds	r0, r3, #0
    2ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	00002e21 	.word	0x00002e21
    2eb0:	000089c8 	.word	0x000089c8
    2eb4:	000089bc 	.word	0x000089bc

00002eb8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    2eb8:	b510      	push	{r4, lr}
    2eba:	1c04      	adds	r4, r0, #0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    2ebc:	1c08      	adds	r0, r1, #0
    2ebe:	4b50      	ldr	r3, [pc, #320]	; (3000 <tcc_get_config_defaults+0x148>)
    2ec0:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    2ec2:	2300      	movs	r3, #0
    2ec4:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    2ec6:	0080      	lsls	r0, r0, #2
    2ec8:	4a4e      	ldr	r2, [pc, #312]	; (3004 <tcc_get_config_defaults+0x14c>)
    2eca:	5882      	ldr	r2, [r0, r2]
    2ecc:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    2ece:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV8;
    2ed0:	2203      	movs	r2, #3
    2ed2:	72e2      	strb	r2, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    2ed4:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    2ed6:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    2ed8:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2eda:	61e3      	str	r3, [r4, #28]
    2edc:	6223      	str	r3, [r4, #32]
    2ede:	6263      	str	r3, [r4, #36]	; 0x24
    2ee0:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2ee2:	7523      	strb	r3, [r4, #20]
    2ee4:	7563      	strb	r3, [r4, #21]
    2ee6:	75a3      	strb	r3, [r4, #22]
    2ee8:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    2eea:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    2eec:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2eee:	7423      	strb	r3, [r4, #16]
    2ef0:	7463      	strb	r3, [r4, #17]
    2ef2:	74a3      	strb	r3, [r4, #18]
    2ef4:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    2ef6:	3229      	adds	r2, #41	; 0x29
    2ef8:	54a3      	strb	r3, [r4, r2]
    2efa:	3201      	adds	r2, #1
    2efc:	54a3      	strb	r3, [r4, r2]
    2efe:	3201      	adds	r2, #1
    2f00:	54a3      	strb	r3, [r4, r2]
    2f02:	3201      	adds	r2, #1
    2f04:	54a3      	strb	r3, [r4, r2]
    2f06:	3201      	adds	r2, #1
    2f08:	54a3      	strb	r3, [r4, r2]
    2f0a:	3201      	adds	r2, #1
    2f0c:	54a3      	strb	r3, [r4, r2]
    2f0e:	3201      	adds	r2, #1
    2f10:	54a3      	strb	r3, [r4, r2]
    2f12:	3201      	adds	r2, #1
    2f14:	54a3      	strb	r3, [r4, r2]
    2f16:	3201      	adds	r2, #1
    2f18:	54a3      	strb	r3, [r4, r2]
    2f1a:	3201      	adds	r2, #1
    2f1c:	54a3      	strb	r3, [r4, r2]
    2f1e:	3201      	adds	r2, #1
    2f20:	54a3      	strb	r3, [r4, r2]
    2f22:	3201      	adds	r2, #1
    2f24:	54a3      	strb	r3, [r4, r2]
    2f26:	3201      	adds	r2, #1
    2f28:	54a3      	strb	r3, [r4, r2]
    2f2a:	3201      	adds	r2, #1
    2f2c:	54a3      	strb	r3, [r4, r2]
    2f2e:	3201      	adds	r2, #1
    2f30:	54a3      	strb	r3, [r4, r2]
    2f32:	3201      	adds	r2, #1
    2f34:	54a3      	strb	r3, [r4, r2]
    2f36:	3201      	adds	r2, #1
    2f38:	54a3      	strb	r3, [r4, r2]
    2f3a:	3201      	adds	r2, #1
    2f3c:	54a3      	strb	r3, [r4, r2]
    2f3e:	3201      	adds	r2, #1
    2f40:	54a3      	strb	r3, [r4, r2]
    2f42:	3201      	adds	r2, #1
    2f44:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    2f46:	3201      	adds	r2, #1
    2f48:	54a3      	strb	r3, [r4, r2]
    2f4a:	3201      	adds	r2, #1
    2f4c:	54a3      	strb	r3, [r4, r2]
    2f4e:	3201      	adds	r2, #1
    2f50:	54a3      	strb	r3, [r4, r2]
    2f52:	3201      	adds	r2, #1
    2f54:	54a3      	strb	r3, [r4, r2]
    2f56:	3201      	adds	r2, #1
    2f58:	54a3      	strb	r3, [r4, r2]
    2f5a:	3201      	adds	r2, #1
    2f5c:	54a3      	strb	r3, [r4, r2]
    2f5e:	3201      	adds	r2, #1
    2f60:	54a3      	strb	r3, [r4, r2]
    2f62:	3201      	adds	r2, #1
    2f64:	54a3      	strb	r3, [r4, r2]
    2f66:	3201      	adds	r2, #1
    2f68:	54a3      	strb	r3, [r4, r2]
    2f6a:	3201      	adds	r2, #1
    2f6c:	54a3      	strb	r3, [r4, r2]
    2f6e:	3201      	adds	r2, #1
    2f70:	54a3      	strb	r3, [r4, r2]
    2f72:	3201      	adds	r2, #1
    2f74:	54a3      	strb	r3, [r4, r2]
    2f76:	3201      	adds	r2, #1
    2f78:	54a3      	strb	r3, [r4, r2]
    2f7a:	3201      	adds	r2, #1
    2f7c:	54a3      	strb	r3, [r4, r2]
    2f7e:	3201      	adds	r2, #1
    2f80:	54a3      	strb	r3, [r4, r2]
    2f82:	3201      	adds	r2, #1
    2f84:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2f86:	3201      	adds	r2, #1
    2f88:	54a3      	strb	r3, [r4, r2]
    2f8a:	3201      	adds	r2, #1
    2f8c:	54a3      	strb	r3, [r4, r2]
    2f8e:	3201      	adds	r2, #1
    2f90:	54a3      	strb	r3, [r4, r2]
    2f92:	3201      	adds	r2, #1
    2f94:	54a3      	strb	r3, [r4, r2]
    2f96:	3201      	adds	r2, #1
    2f98:	54a3      	strb	r3, [r4, r2]
    2f9a:	3201      	adds	r2, #1
    2f9c:	54a3      	strb	r3, [r4, r2]
    2f9e:	3201      	adds	r2, #1
    2fa0:	54a3      	strb	r3, [r4, r2]
    2fa2:	3201      	adds	r2, #1
    2fa4:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    2fa6:	3241      	adds	r2, #65	; 0x41
    2fa8:	54a3      	strb	r3, [r4, r2]
    2faa:	65a3      	str	r3, [r4, #88]	; 0x58
    2fac:	67a3      	str	r3, [r4, #120]	; 0x78
    2fae:	3201      	adds	r2, #1
    2fb0:	54a3      	strb	r3, [r4, r2]
    2fb2:	65e3      	str	r3, [r4, #92]	; 0x5c
    2fb4:	67e3      	str	r3, [r4, #124]	; 0x7c
    2fb6:	3201      	adds	r2, #1
    2fb8:	54a3      	strb	r3, [r4, r2]
    2fba:	6623      	str	r3, [r4, #96]	; 0x60
    2fbc:	3a1a      	subs	r2, #26
    2fbe:	50a3      	str	r3, [r4, r2]
    2fc0:	321b      	adds	r2, #27
    2fc2:	54a3      	strb	r3, [r4, r2]
    2fc4:	6663      	str	r3, [r4, #100]	; 0x64
    2fc6:	3a17      	subs	r2, #23
    2fc8:	50a3      	str	r3, [r4, r2]
    2fca:	3218      	adds	r2, #24
    2fcc:	54a3      	strb	r3, [r4, r2]
    2fce:	66a3      	str	r3, [r4, #104]	; 0x68
    2fd0:	3a14      	subs	r2, #20
    2fd2:	50a3      	str	r3, [r4, r2]
    2fd4:	3215      	adds	r2, #21
    2fd6:	54a3      	strb	r3, [r4, r2]
    2fd8:	66e3      	str	r3, [r4, #108]	; 0x6c
    2fda:	3a11      	subs	r2, #17
    2fdc:	50a3      	str	r3, [r4, r2]
    2fde:	3212      	adds	r2, #18
    2fe0:	54a3      	strb	r3, [r4, r2]
    2fe2:	6723      	str	r3, [r4, #112]	; 0x70
    2fe4:	3a0e      	subs	r2, #14
    2fe6:	50a3      	str	r3, [r4, r2]
    2fe8:	320f      	adds	r2, #15
    2fea:	54a3      	strb	r3, [r4, r2]
    2fec:	6763      	str	r3, [r4, #116]	; 0x74
    2fee:	3a0b      	subs	r2, #11
    2ff0:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    2ff2:	2101      	movs	r1, #1
    2ff4:	320c      	adds	r2, #12
    2ff6:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    2ff8:	3201      	adds	r2, #1
    2ffa:	54a3      	strb	r3, [r4, r2]
}
    2ffc:	bd10      	pop	{r4, pc}
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	00002e21 	.word	0x00002e21
    3004:	000089bc 	.word	0x000089bc

00003008 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    3008:	b5f0      	push	{r4, r5, r6, r7, lr}
    300a:	465f      	mov	r7, fp
    300c:	4656      	mov	r6, sl
    300e:	464d      	mov	r5, r9
    3010:	4644      	mov	r4, r8
    3012:	b4f0      	push	{r4, r5, r6, r7}
    3014:	b08f      	sub	sp, #60	; 0x3c
    3016:	9000      	str	r0, [sp, #0]
    3018:	1c0c      	adds	r4, r1, #0
    301a:	1c17      	adds	r7, r2, #0
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    301c:	1c08      	adds	r0, r1, #0
    301e:	4b87      	ldr	r3, [pc, #540]	; (323c <tcc_init+0x234>)
    3020:	4798      	blx	r3
    3022:	1c05      	adds	r5, r0, #0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3024:	1c06      	adds	r6, r0, #0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3026:	4a86      	ldr	r2, [pc, #536]	; (3240 <tcc_init+0x238>)
    3028:	6a11      	ldr	r1, [r2, #32]
    302a:	0080      	lsls	r0, r0, #2
    302c:	4b85      	ldr	r3, [pc, #532]	; (3244 <tcc_init+0x23c>)
    302e:	58c3      	ldr	r3, [r0, r3]
    3030:	430b      	orrs	r3, r1
    3032:	6213      	str	r3, [r2, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    3034:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    3036:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    3038:	079b      	lsls	r3, r3, #30
    303a:	d500      	bpl.n	303e <tcc_init+0x36>
    303c:	e1dd      	b.n	33fa <tcc_init+0x3f2>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    303e:	6823      	ldr	r3, [r4, #0]
    3040:	2201      	movs	r2, #1
    3042:	4013      	ands	r3, r2
    3044:	d000      	beq.n	3048 <tcc_init+0x40>
    3046:	e1d8      	b.n	33fa <tcc_init+0x3f2>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    3048:	00aa      	lsls	r2, r5, #2
    304a:	497f      	ldr	r1, [pc, #508]	; (3248 <tcc_init+0x240>)
    304c:	5852      	ldr	r2, [r2, r1]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
    304e:	3805      	subs	r0, #5

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
    3050:	6839      	ldr	r1, [r7, #0]
    3052:	428a      	cmp	r2, r1
    3054:	d200      	bcs.n	3058 <tcc_init+0x50>
    3056:	e1d0      	b.n	33fa <tcc_init+0x3f2>
		|| (config->counter.period > count_max)
    3058:	6879      	ldr	r1, [r7, #4]
    305a:	428a      	cmp	r2, r1
    305c:	d200      	bcs.n	3060 <tcc_init+0x58>
    305e:	e1cc      	b.n	33fa <tcc_init+0x3f2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
    3060:	69f9      	ldr	r1, [r7, #28]
    3062:	428a      	cmp	r2, r1
    3064:	d200      	bcs.n	3068 <tcc_init+0x60>
    3066:	e1b3      	b.n	33d0 <tcc_init+0x3c8>
    3068:	6a39      	ldr	r1, [r7, #32]
    306a:	4291      	cmp	r1, r2
    306c:	d900      	bls.n	3070 <tcc_init+0x68>
    306e:	e1b1      	b.n	33d4 <tcc_init+0x3cc>
    3070:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3072:	428a      	cmp	r2, r1
    3074:	d200      	bcs.n	3078 <tcc_init+0x70>
    3076:	e1af      	b.n	33d8 <tcc_init+0x3d0>
    3078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    307a:	428a      	cmp	r2, r1
    307c:	d200      	bcs.n	3080 <tcc_init+0x78>
    307e:	e1ad      	b.n	33dc <tcc_init+0x3d4>
    3080:	2298      	movs	r2, #152	; 0x98
    3082:	4694      	mov	ip, r2
    3084:	44bc      	add	ip, r7
    3086:	4662      	mov	r2, ip
    3088:	9204      	str	r2, [sp, #16]
    308a:	4661      	mov	r1, ip
    308c:	2200      	movs	r2, #0
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
    308e:	7808      	ldrb	r0, [r1, #0]
    3090:	2800      	cmp	r0, #0
    3092:	d004      	beq.n	309e <tcc_init+0x96>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    3094:	486d      	ldr	r0, [pc, #436]	; (324c <tcc_init+0x244>)
    3096:	5d80      	ldrb	r0, [r0, r6]
    3098:	4290      	cmp	r0, r2
    309a:	dc00      	bgt.n	309e <tcc_init+0x96>
    309c:	e1a0      	b.n	33e0 <tcc_init+0x3d8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    309e:	3201      	adds	r2, #1
    30a0:	3101      	adds	r1, #1
    30a2:	2a08      	cmp	r2, #8
    30a4:	d1f3      	bne.n	308e <tcc_init+0x86>
    30a6:	2200      	movs	r2, #0
    30a8:	4690      	mov	r8, r2

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    30aa:	2180      	movs	r1, #128	; 0x80
    30ac:	0449      	lsls	r1, r1, #17
    30ae:	468c      	mov	ip, r1
    30b0:	18b9      	adds	r1, r7, r2
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
    30b2:	7c09      	ldrb	r1, [r1, #16]
    30b4:	2901      	cmp	r1, #1
    30b6:	d109      	bne.n	30cc <tcc_init+0xc4>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    30b8:	4965      	ldr	r1, [pc, #404]	; (3250 <tcc_init+0x248>)
    30ba:	5d89      	ldrb	r1, [r1, r6]
    30bc:	4291      	cmp	r1, r2
    30be:	da00      	bge.n	30c2 <tcc_init+0xba>
    30c0:	e190      	b.n	33e4 <tcc_init+0x3dc>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    30c2:	4661      	mov	r1, ip
    30c4:	4091      	lsls	r1, r2
    30c6:	4640      	mov	r0, r8
    30c8:	4308      	orrs	r0, r1
    30ca:	4680      	mov	r8, r0
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    30cc:	3201      	adds	r2, #1
    30ce:	2a04      	cmp	r2, #4
    30d0:	d1ee      	bne.n	30b0 <tcc_init+0xa8>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    30d2:	329d      	adds	r2, #157	; 0x9d
    30d4:	5cba      	ldrb	r2, [r7, r2]
    30d6:	2a00      	cmp	r2, #0
    30d8:	d004      	beq.n	30e4 <tcc_init+0xdc>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    30da:	2280      	movs	r2, #128	; 0x80
    30dc:	0112      	lsls	r2, r2, #4
    30de:	4641      	mov	r1, r8
    30e0:	4311      	orrs	r1, r2
    30e2:	4688      	mov	r8, r1
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    30e4:	7b3a      	ldrb	r2, [r7, #12]
    30e6:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    30e8:	7afa      	ldrb	r2, [r7, #11]
    30ea:	9207      	str	r2, [sp, #28]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
    30ec:	7a3a      	ldrb	r2, [r7, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    30ee:	1e51      	subs	r1, r2, #1
    30f0:	418a      	sbcs	r2, r1
    30f2:	0092      	lsls	r2, r2, #2
    30f4:	9203      	str	r2, [sp, #12]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    30f6:	7a7a      	ldrb	r2, [r7, #9]
    30f8:	2a01      	cmp	r2, #1
    30fa:	d102      	bne.n	3102 <tcc_init+0xfa>
		ctrlb |= TCC_CTRLBSET_DIR;
    30fc:	9903      	ldr	r1, [sp, #12]
    30fe:	4311      	orrs	r1, r2
    3100:	9103      	str	r1, [sp, #12]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    3102:	4a53      	ldr	r2, [pc, #332]	; (3250 <tcc_init+0x248>)
    3104:	5d52      	ldrb	r2, [r2, r5]
    3106:	1c11      	adds	r1, r2, #0
    3108:	9205      	str	r2, [sp, #20]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    310a:	2235      	movs	r2, #53	; 0x35
    310c:	5cb8      	ldrb	r0, [r7, r2]
    310e:	4281      	cmp	r1, r0
    3110:	d800      	bhi.n	3114 <tcc_init+0x10c>
    3112:	e171      	b.n	33f8 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    3114:	222c      	movs	r2, #44	; 0x2c
    3116:	5cba      	ldrb	r2, [r7, r2]
    3118:	2a0f      	cmp	r2, #15
    311a:	d900      	bls.n	311e <tcc_init+0x116>
    311c:	e16c      	b.n	33f8 <tcc_init+0x3f0>
    311e:	212d      	movs	r1, #45	; 0x2d
    3120:	468c      	mov	ip, r1
    3122:	44bc      	add	ip, r7
    3124:	4661      	mov	r1, ip
    3126:	9101      	str	r1, [sp, #4]
    3128:	2100      	movs	r1, #0
    312a:	9608      	str	r6, [sp, #32]
    312c:	4699      	mov	r9, r3
    312e:	46bb      	mov	fp, r7
    3130:	1c0f      	adds	r7, r1, #0
    3132:	46a2      	mov	sl, r4
    3134:	9509      	str	r5, [sp, #36]	; 0x24
    3136:	e00c      	b.n	3152 <tcc_init+0x14a>
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    3138:	7c90      	ldrb	r0, [r2, #18]
    313a:	9b05      	ldr	r3, [sp, #20]
    313c:	4283      	cmp	r3, r0
    313e:	d800      	bhi.n	3142 <tcc_init+0x13a>
    3140:	e15a      	b.n	33f8 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    3142:	7a52      	ldrb	r2, [r2, #9]
    3144:	9b01      	ldr	r3, [sp, #4]
    3146:	330a      	adds	r3, #10
    3148:	9301      	str	r3, [sp, #4]
    314a:	3704      	adds	r7, #4
    314c:	2a0f      	cmp	r2, #15
    314e:	d900      	bls.n	3152 <tcc_init+0x14a>
    3150:	e152      	b.n	33f8 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    3152:	0611      	lsls	r1, r2, #24
    3154:	23f0      	movs	r3, #240	; 0xf0
    3156:	051b      	lsls	r3, r3, #20
    3158:	4019      	ands	r1, r3
    315a:	9b01      	ldr	r3, [sp, #4]
    315c:	1c1a      	adds	r2, r3, #0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    315e:	781d      	ldrb	r5, [r3, #0]
    3160:	042d      	lsls	r5, r5, #16
    3162:	24ff      	movs	r4, #255	; 0xff
    3164:	0424      	lsls	r4, r4, #16
    3166:	4025      	ands	r5, r4
    3168:	9502      	str	r5, [sp, #8]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    316a:	785b      	ldrb	r3, [r3, #1]
    316c:	2480      	movs	r4, #128	; 0x80
    316e:	2b00      	cmp	r3, #0
    3170:	d100      	bne.n	3174 <tcc_init+0x16c>
    3172:	464c      	mov	r4, r9
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    3174:	7896      	ldrb	r6, [r2, #2]
    3176:	2308      	movs	r3, #8
    3178:	2e00      	cmp	r6, #0
    317a:	d100      	bne.n	317e <tcc_init+0x176>
    317c:	464b      	mov	r3, r9
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    317e:	78d6      	ldrb	r6, [r2, #3]
    3180:	46b4      	mov	ip, r6
    3182:	2610      	movs	r6, #16
    3184:	4665      	mov	r5, ip
    3186:	2d00      	cmp	r5, #0
    3188:	d100      	bne.n	318c <tcc_init+0x184>
    318a:	464e      	mov	r6, r9
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    318c:	0280      	lsls	r0, r0, #10
    318e:	25c0      	movs	r5, #192	; 0xc0
    3190:	012d      	lsls	r5, r5, #4
    3192:	4028      	ands	r0, r5
    3194:	4301      	orrs	r1, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
    3196:	7910      	ldrb	r0, [r2, #4]
    3198:	2503      	movs	r5, #3
    319a:	4028      	ands	r0, r5
    319c:	4301      	orrs	r1, r0
    319e:	9802      	ldr	r0, [sp, #8]
    31a0:	4301      	orrs	r1, r0
				| TCC_FCTRLA_BLANK(cfg->blanking)
    31a2:	7955      	ldrb	r5, [r2, #5]
    31a4:	016d      	lsls	r5, r5, #5
    31a6:	2060      	movs	r0, #96	; 0x60
    31a8:	4028      	ands	r0, r5
    31aa:	4301      	orrs	r1, r0
    31ac:	1c0d      	adds	r5, r1, #0
				| TCC_FCTRLA_HALT(cfg->halt_action)
    31ae:	7990      	ldrb	r0, [r2, #6]
    31b0:	0200      	lsls	r0, r0, #8
    31b2:	21c0      	movs	r1, #192	; 0xc0
    31b4:	0089      	lsls	r1, r1, #2
    31b6:	4001      	ands	r1, r0
    31b8:	430d      	orrs	r5, r1
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    31ba:	79d0      	ldrb	r0, [r2, #7]
    31bc:	0300      	lsls	r0, r0, #12
    31be:	21e0      	movs	r1, #224	; 0xe0
    31c0:	01c9      	lsls	r1, r1, #7
    31c2:	4001      	ands	r1, r0
    31c4:	430d      	orrs	r5, r1
    31c6:	432c      	orrs	r4, r5
    31c8:	4323      	orrs	r3, r4
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    31ca:	431e      	orrs	r6, r3
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    31cc:	ab0c      	add	r3, sp, #48	; 0x30
    31ce:	50fe      	str	r6, [r7, r3]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    31d0:	2f04      	cmp	r7, #4
    31d2:	d1b1      	bne.n	3138 <tcc_init+0x130>
    31d4:	9e08      	ldr	r6, [sp, #32]
    31d6:	4654      	mov	r4, sl
    31d8:	465f      	mov	r7, fp
    31da:	9d09      	ldr	r5, [sp, #36]	; 0x24
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    31dc:	4b1b      	ldr	r3, [pc, #108]	; (324c <tcc_init+0x244>)
    31de:	5d5b      	ldrb	r3, [r3, r5]
    31e0:	469c      	mov	ip, r3
    31e2:	4658      	mov	r0, fp
    31e4:	3050      	adds	r0, #80	; 0x50
    31e6:	465a      	mov	r2, fp
    31e8:	3241      	adds	r2, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
    31ea:	2300      	movs	r3, #0
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    31ec:	2101      	movs	r1, #1
    31ee:	468b      	mov	fp, r1
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    31f0:	2180      	movs	r1, #128	; 0x80
    31f2:	0249      	lsls	r1, r1, #9
    31f4:	468a      	mov	sl, r1
    31f6:	9401      	str	r4, [sp, #4]
    31f8:	1c34      	adds	r4, r6, #0
    31fa:	4666      	mov	r6, ip
    31fc:	1c29      	adds	r1, r5, #0
    31fe:	1c1d      	adds	r5, r3, #0
    3200:	46b9      	mov	r9, r7
    3202:	1c0f      	adds	r7, r1, #0
    3204:	9901      	ldr	r1, [sp, #4]
    3206:	468c      	mov	ip, r1
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
    3208:	7801      	ldrb	r1, [r0, #0]
    320a:	2900      	cmp	r1, #0
    320c:	d009      	beq.n	3222 <tcc_init+0x21a>
			if (i >= ow_num) {
    320e:	429e      	cmp	r6, r3
    3210:	d800      	bhi.n	3214 <tcc_init+0x20c>
    3212:	e0e9      	b.n	33e8 <tcc_init+0x3e0>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    3214:	4651      	mov	r1, sl
    3216:	4099      	lsls	r1, r3
    3218:	430d      	orrs	r5, r1
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    321a:	7811      	ldrb	r1, [r2, #0]
    321c:	2900      	cmp	r1, #0
    321e:	d106      	bne.n	322e <tcc_init+0x226>
    3220:	e01b      	b.n	325a <tcc_init+0x252>
    3222:	7811      	ldrb	r1, [r2, #0]
    3224:	2900      	cmp	r1, #0
    3226:	d018      	beq.n	325a <tcc_init+0x252>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    3228:	429e      	cmp	r6, r3
    322a:	d800      	bhi.n	322e <tcc_init+0x226>
    322c:	e0de      	b.n	33ec <tcc_init+0x3e4>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    322e:	2902      	cmp	r1, #2
    3230:	d110      	bne.n	3254 <tcc_init+0x24c>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    3232:	2102      	movs	r1, #2
    3234:	31ff      	adds	r1, #255	; 0xff
    3236:	4099      	lsls	r1, r3
    3238:	430d      	orrs	r5, r1
    323a:	e00e      	b.n	325a <tcc_init+0x252>
    323c:	00002e21 	.word	0x00002e21
    3240:	40000400 	.word	0x40000400
    3244:	000089b0 	.word	0x000089b0
    3248:	000089bc 	.word	0x000089bc
    324c:	000089cc 	.word	0x000089cc
    3250:	000089c8 	.word	0x000089c8
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    3254:	4659      	mov	r1, fp
    3256:	4099      	lsls	r1, r3
    3258:	430d      	orrs	r5, r1
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    325a:	3301      	adds	r3, #1
    325c:	3001      	adds	r0, #1
    325e:	3202      	adds	r2, #2
    3260:	2b08      	cmp	r3, #8
    3262:	d1d1      	bne.n	3208 <tcc_init+0x200>
    3264:	1c26      	adds	r6, r4, #0
    3266:	4664      	mov	r4, ip
    3268:	1c3b      	adds	r3, r7, #0
    326a:	464f      	mov	r7, r9
    326c:	46a9      	mov	r9, r5
    326e:	1c1d      	adds	r5, r3, #0
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    3270:	4b65      	ldr	r3, [pc, #404]	; (3408 <tcc_init+0x400>)
    3272:	5d5b      	ldrb	r3, [r3, r5]
    3274:	9301      	str	r3, [sp, #4]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    3276:	7e7b      	ldrb	r3, [r7, #25]
    3278:	011b      	lsls	r3, r3, #4
    327a:	2230      	movs	r2, #48	; 0x30
    327c:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    327e:	7e3a      	ldrb	r2, [r7, #24]
    3280:	2107      	movs	r1, #7
    3282:	400a      	ands	r2, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    3284:	4313      	orrs	r3, r2
    3286:	1c18      	adds	r0, r3, #0
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    3288:	2300      	movs	r3, #0
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    328a:	2180      	movs	r1, #128	; 0x80
    328c:	0249      	lsls	r1, r1, #9
    328e:	18fa      	adds	r2, r7, r3

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    3290:	7d12      	ldrb	r2, [r2, #20]
    3292:	2a00      	cmp	r2, #0
    3294:	d006      	beq.n	32a4 <tcc_init+0x29c>
			if (n >= cc_num) {
    3296:	9a01      	ldr	r2, [sp, #4]
    3298:	429a      	cmp	r2, r3
    329a:	dc00      	bgt.n	329e <tcc_init+0x296>
    329c:	e0a8      	b.n	33f0 <tcc_init+0x3e8>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    329e:	1c0a      	adds	r2, r1, #0
    32a0:	409a      	lsls	r2, r3
    32a2:	4310      	orrs	r0, r2
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    32a4:	3301      	adds	r3, #1
    32a6:	2b04      	cmp	r3, #4
    32a8:	d1f1      	bne.n	328e <tcc_init+0x286>
    32aa:	9002      	str	r0, [sp, #8]
    32ac:	9900      	ldr	r1, [sp, #0]
    32ae:	1c0b      	adds	r3, r1, #0
    32b0:	3304      	adds	r3, #4
    32b2:	3134      	adds	r1, #52	; 0x34

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
    32b4:	2200      	movs	r2, #0
    32b6:	c304      	stmia	r3!, {r2}
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    32b8:	428b      	cmp	r3, r1
    32ba:	d1fc      	bne.n	32b6 <tcc_init+0x2ae>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    32bc:	2300      	movs	r3, #0
    32be:	9900      	ldr	r1, [sp, #0]
    32c0:	634b      	str	r3, [r1, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    32c2:	638b      	str	r3, [r1, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    32c4:	00aa      	lsls	r2, r5, #2
    32c6:	4b51      	ldr	r3, [pc, #324]	; (340c <tcc_init+0x404>)
    32c8:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    32ca:	600c      	str	r4, [r1, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    32cc:	23a0      	movs	r3, #160	; 0xa0
    32ce:	5cfa      	ldrb	r2, [r7, r3]
    32d0:	3b64      	subs	r3, #100	; 0x64
    32d2:	54ca      	strb	r2, [r1, r3]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
    32d4:	a90b      	add	r1, sp, #44	; 0x2c
    32d6:	7abb      	ldrb	r3, [r7, #10]
    32d8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    32da:	4b4d      	ldr	r3, [pc, #308]	; (3410 <tcc_init+0x408>)
    32dc:	5d5b      	ldrb	r3, [r3, r5]
    32de:	9300      	str	r3, [sp, #0]
    32e0:	1c18      	adds	r0, r3, #0
    32e2:	4b4c      	ldr	r3, [pc, #304]	; (3414 <tcc_init+0x40c>)
    32e4:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    32e6:	9800      	ldr	r0, [sp, #0]
    32e8:	4b4b      	ldr	r3, [pc, #300]	; (3418 <tcc_init+0x410>)
    32ea:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    32ec:	4b4b      	ldr	r3, [pc, #300]	; (341c <tcc_init+0x414>)
    32ee:	5d5b      	ldrb	r3, [r3, r5]
    32f0:	2b00      	cmp	r3, #0
    32f2:	dd29      	ble.n	3348 <tcc_init+0x340>
    32f4:	1c3d      	adds	r5, r7, #0
    32f6:	3558      	adds	r5, #88	; 0x58
    32f8:	2397      	movs	r3, #151	; 0x97
    32fa:	425b      	negs	r3, r3
    32fc:	1bdb      	subs	r3, r3, r7
    32fe:	469b      	mov	fp, r3
    3300:	4b46      	ldr	r3, [pc, #280]	; (341c <tcc_init+0x414>)
    3302:	469a      	mov	sl, r3
    3304:	4643      	mov	r3, r8
    3306:	9300      	str	r3, [sp, #0]
    3308:	46a0      	mov	r8, r4
    330a:	1c34      	adds	r4, r6, #0
    330c:	9e04      	ldr	r6, [sp, #16]
    330e:	465b      	mov	r3, fp
    3310:	46bb      	mov	fp, r7
    3312:	1c1f      	adds	r7, r3, #0
		if (!config->pins.enable_wave_out_pin[i]) {
    3314:	7833      	ldrb	r3, [r6, #0]
    3316:	2b00      	cmp	r3, #0
    3318:	d00b      	beq.n	3332 <tcc_init+0x32a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    331a:	2301      	movs	r3, #1
    331c:	aa0a      	add	r2, sp, #40	; 0x28
    331e:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    3320:	2200      	movs	r2, #0
    3322:	a90a      	add	r1, sp, #40	; 0x28
    3324:	70ca      	strb	r2, [r1, #3]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    3326:	6a2a      	ldr	r2, [r5, #32]
    3328:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    332a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    332c:	7828      	ldrb	r0, [r5, #0]
    332e:	4b3c      	ldr	r3, [pc, #240]	; (3420 <tcc_init+0x418>)
    3330:	4798      	blx	r3
    3332:	19bb      	adds	r3, r7, r6
    3334:	3601      	adds	r6, #1
    3336:	3504      	adds	r5, #4
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    3338:	4652      	mov	r2, sl
    333a:	5d12      	ldrb	r2, [r2, r4]
    333c:	429a      	cmp	r2, r3
    333e:	dce9      	bgt.n	3314 <tcc_init+0x30c>
    3340:	4644      	mov	r4, r8
    3342:	9b00      	ldr	r3, [sp, #0]
    3344:	4698      	mov	r8, r3
    3346:	465f      	mov	r7, fp
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    3348:	9b06      	ldr	r3, [sp, #24]
    334a:	031a      	lsls	r2, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    334c:	9b07      	ldr	r3, [sp, #28]
    334e:	021b      	lsls	r3, r3, #8
    3350:	4313      	orrs	r3, r2
    3352:	4642      	mov	r2, r8
    3354:	4313      	orrs	r3, r2
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    3356:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3358:	2204      	movs	r2, #4
    335a:	68a3      	ldr	r3, [r4, #8]
    335c:	421a      	tst	r2, r3
    335e:	d1fc      	bne.n	335a <tcc_init+0x352>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    3360:	23ff      	movs	r3, #255	; 0xff
    3362:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3364:	2204      	movs	r2, #4
    3366:	68a3      	ldr	r3, [r4, #8]
    3368:	421a      	tst	r2, r3
    336a:	d1fc      	bne.n	3366 <tcc_init+0x35e>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    336c:	466b      	mov	r3, sp
    336e:	7b1b      	ldrb	r3, [r3, #12]
    3370:	7163      	strb	r3, [r4, #5]

	hw->FCTRLA.reg = faults[0];
    3372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3374:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    3376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3378:	6123      	str	r3, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
    337a:	464b      	mov	r3, r9
    337c:	61a3      	str	r3, [r4, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    337e:	4a29      	ldr	r2, [pc, #164]	; (3424 <tcc_init+0x41c>)
    3380:	68a3      	ldr	r3, [r4, #8]
    3382:	4213      	tst	r3, r2
    3384:	d1fc      	bne.n	3380 <tcc_init+0x378>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    3386:	9b02      	ldr	r3, [sp, #8]
    3388:	63e3      	str	r3, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    338a:	2210      	movs	r2, #16
    338c:	68a3      	ldr	r3, [r4, #8]
    338e:	421a      	tst	r2, r3
    3390:	d1fc      	bne.n	338c <tcc_init+0x384>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    3392:	683b      	ldr	r3, [r7, #0]
    3394:	6363      	str	r3, [r4, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    3396:	4a24      	ldr	r2, [pc, #144]	; (3428 <tcc_init+0x420>)
    3398:	68a3      	ldr	r3, [r4, #8]
    339a:	4213      	tst	r3, r2
    339c:	d1fc      	bne.n	3398 <tcc_init+0x390>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	6423      	str	r3, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    33a2:	9801      	ldr	r0, [sp, #4]
    33a4:	2800      	cmp	r0, #0
    33a6:	dd25      	ble.n	33f4 <tcc_init+0x3ec>
    33a8:	1c3d      	adds	r5, r7, #0
    33aa:	351c      	adds	r5, #28
    33ac:	2100      	movs	r1, #0
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    33ae:	4e1f      	ldr	r6, [pc, #124]	; (342c <tcc_init+0x424>)
    33b0:	1c32      	adds	r2, r6, #0
    33b2:	408a      	lsls	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    33b4:	68a3      	ldr	r3, [r4, #8]
    33b6:	4213      	tst	r3, r2
    33b8:	d1fc      	bne.n	33b4 <tcc_init+0x3ac>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    33ba:	cd04      	ldmia	r5!, {r2}
    33bc:	1c0b      	adds	r3, r1, #0
    33be:	3310      	adds	r3, #16
    33c0:	009b      	lsls	r3, r3, #2
    33c2:	18e3      	adds	r3, r4, r3
    33c4:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    33c6:	3101      	adds	r1, #1
    33c8:	4288      	cmp	r0, r1
    33ca:	dcf1      	bgt.n	33b0 <tcc_init+0x3a8>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    33cc:	2000      	movs	r0, #0
    33ce:	e014      	b.n	33fa <tcc_init+0x3f2>

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    33d0:	2017      	movs	r0, #23
    33d2:	e012      	b.n	33fa <tcc_init+0x3f2>
    33d4:	2017      	movs	r0, #23
    33d6:	e010      	b.n	33fa <tcc_init+0x3f2>
    33d8:	2017      	movs	r0, #23
    33da:	e00e      	b.n	33fa <tcc_init+0x3f2>
    33dc:	2017      	movs	r0, #23
    33de:	e00c      	b.n	33fa <tcc_init+0x3f2>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
    33e0:	2017      	movs	r0, #23
    33e2:	e00a      	b.n	33fa <tcc_init+0x3f2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    33e4:	2017      	movs	r0, #23
    33e6:	e008      	b.n	33fa <tcc_init+0x3f2>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
    33e8:	2017      	movs	r0, #23
    33ea:	e006      	b.n	33fa <tcc_init+0x3f2>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    33ec:	2017      	movs	r0, #23
    33ee:	e004      	b.n	33fa <tcc_init+0x3f2>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
    33f0:	2017      	movs	r0, #23
    33f2:	e002      	b.n	33fa <tcc_init+0x3f2>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    33f4:	2000      	movs	r0, #0
    33f6:	e000      	b.n	33fa <tcc_init+0x3f2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    33f8:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    33fa:	b00f      	add	sp, #60	; 0x3c
    33fc:	bc3c      	pop	{r2, r3, r4, r5}
    33fe:	4690      	mov	r8, r2
    3400:	4699      	mov	r9, r3
    3402:	46a2      	mov	sl, r4
    3404:	46ab      	mov	fp, r5
    3406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3408:	000089c8 	.word	0x000089c8
    340c:	20000854 	.word	0x20000854
    3410:	000089ac 	.word	0x000089ac
    3414:	00002cc9 	.word	0x00002cc9
    3418:	00002c3d 	.word	0x00002c3d
    341c:	000089cc 	.word	0x000089cc
    3420:	00002dc1 	.word	0x00002dc1
    3424:	00020040 	.word	0x00020040
    3428:	00040080 	.word	0x00040080
    342c:	00080100 	.word	0x00080100

00003430 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    3430:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    3432:	233c      	movs	r3, #60	; 0x3c
    3434:	5cc3      	ldrb	r3, [r0, r3]
    3436:	4c01      	ldr	r4, [pc, #4]	; (343c <tcc_set_compare_value+0xc>)
    3438:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    343a:	bd10      	pop	{r4, pc}
    343c:	00002e51 	.word	0x00002e51

00003440 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3440:	0092      	lsls	r2, r2, #2
    3442:	1883      	adds	r3, r0, r2
    3444:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    3446:	4b03      	ldr	r3, [pc, #12]	; (3454 <tcc_register_callback+0x14>)
    3448:	58d3      	ldr	r3, [r2, r3]
    344a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    344c:	4313      	orrs	r3, r2
    344e:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    3450:	2000      	movs	r0, #0
    3452:	4770      	bx	lr
    3454:	000089d4 	.word	0x000089d4

00003458 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    3458:	b538      	push	{r3, r4, r5, lr}
    345a:	1c04      	adds	r4, r0, #0
    345c:	1c0d      	adds	r5, r1, #0
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    345e:	6800      	ldr	r0, [r0, #0]
    3460:	4b09      	ldr	r3, [pc, #36]	; (3488 <tcc_enable_callback+0x30>)
    3462:	4798      	blx	r3
{
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    3464:	4b09      	ldr	r3, [pc, #36]	; (348c <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3466:	5c1b      	ldrb	r3, [r3, r0]
    3468:	221f      	movs	r2, #31
    346a:	4013      	ands	r3, r2
    346c:	3a1e      	subs	r2, #30
    346e:	409a      	lsls	r2, r3
    3470:	1c13      	adds	r3, r2, #0
    3472:	4a07      	ldr	r2, [pc, #28]	; (3490 <tcc_enable_callback+0x38>)
    3474:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    3476:	00ad      	lsls	r5, r5, #2
    3478:	4b06      	ldr	r3, [pc, #24]	; (3494 <tcc_enable_callback+0x3c>)
    347a:	58ea      	ldr	r2, [r5, r3]
    347c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    347e:	4313      	orrs	r3, r2
    3480:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    3482:	6823      	ldr	r3, [r4, #0]
    3484:	629a      	str	r2, [r3, #40]	; 0x28
}
    3486:	bd38      	pop	{r3, r4, r5, pc}
    3488:	00002e21 	.word	0x00002e21
    348c:	000089d0 	.word	0x000089d0
    3490:	e000e100 	.word	0xe000e100
    3494:	000089d4 	.word	0x000089d4

00003498 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3498:	b5f0      	push	{r4, r5, r6, r7, lr}
    349a:	4647      	mov	r7, r8
    349c:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    349e:	0080      	lsls	r0, r0, #2
    34a0:	4b0d      	ldr	r3, [pc, #52]	; (34d8 <_tcc_interrupt_handler+0x40>)
    34a2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    34a4:	683b      	ldr	r3, [r7, #0]
    34a6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    34a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34aa:	401e      	ands	r6, r3
    34ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34ae:	401e      	ands	r6, r3
    34b0:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    34b2:	4b0a      	ldr	r3, [pc, #40]	; (34dc <_tcc_interrupt_handler+0x44>)
    34b4:	4698      	mov	r8, r3
    34b6:	4643      	mov	r3, r8
    34b8:	58e5      	ldr	r5, [r4, r3]
    34ba:	422e      	tst	r6, r5
    34bc:	d005      	beq.n	34ca <_tcc_interrupt_handler+0x32>
    34be:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    34c0:	685b      	ldr	r3, [r3, #4]
    34c2:	1c38      	adds	r0, r7, #0
    34c4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    34c6:	683b      	ldr	r3, [r7, #0]
    34c8:	62dd      	str	r5, [r3, #44]	; 0x2c
    34ca:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    34cc:	2c30      	cmp	r4, #48	; 0x30
    34ce:	d1f2      	bne.n	34b6 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    34d0:	bc04      	pop	{r2}
    34d2:	4690      	mov	r8, r2
    34d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	20000854 	.word	0x20000854
    34dc:	000089d4 	.word	0x000089d4

000034e0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    34e0:	b508      	push	{r3, lr}
    34e2:	2000      	movs	r0, #0
    34e4:	4b01      	ldr	r3, [pc, #4]	; (34ec <TCC0_Handler+0xc>)
    34e6:	4798      	blx	r3
    34e8:	bd08      	pop	{r3, pc}
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	00003499 	.word	0x00003499

000034f0 <TCC1_Handler>:
    34f0:	b508      	push	{r3, lr}
    34f2:	2001      	movs	r0, #1
    34f4:	4b01      	ldr	r3, [pc, #4]	; (34fc <TCC1_Handler+0xc>)
    34f6:	4798      	blx	r3
    34f8:	bd08      	pop	{r3, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	00003499 	.word	0x00003499

00003500 <TCC2_Handler>:
    3500:	b508      	push	{r3, lr}
    3502:	2002      	movs	r0, #2
    3504:	4b01      	ldr	r3, [pc, #4]	; (350c <TCC2_Handler+0xc>)
    3506:	4798      	blx	r3
    3508:	bd08      	pop	{r3, pc}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	00003499 	.word	0x00003499

00003510 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    3510:	b510      	push	{r4, lr}
    3512:	b084      	sub	sp, #16
    3514:	1c04      	adds	r4, r0, #0
	enum sleepmgr_mode sleep_mode[] = {
    3516:	a803      	add	r0, sp, #12
    3518:	4927      	ldr	r1, [pc, #156]	; (35b8 <udd_sleep_mode+0xa8>)
    351a:	2204      	movs	r2, #4
    351c:	4b27      	ldr	r3, [pc, #156]	; (35bc <udd_sleep_mode+0xac>)
    351e:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    3520:	4b27      	ldr	r3, [pc, #156]	; (35c0 <udd_sleep_mode+0xb0>)
    3522:	781b      	ldrb	r3, [r3, #0]
    3524:	42a3      	cmp	r3, r4
    3526:	d045      	beq.n	35b4 <udd_sleep_mode+0xa4>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    3528:	2c00      	cmp	r4, #0
    352a:	d01e      	beq.n	356a <udd_sleep_mode+0x5a>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    352c:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    352e:	5d1b      	ldrb	r3, [r3, r4]
    3530:	4a24      	ldr	r2, [pc, #144]	; (35c4 <udd_sleep_mode+0xb4>)
    3532:	5cd2      	ldrb	r2, [r2, r3]
    3534:	2aff      	cmp	r2, #255	; 0xff
    3536:	d100      	bne.n	353a <udd_sleep_mode+0x2a>
    3538:	e7fe      	b.n	3538 <udd_sleep_mode+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    353a:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    353e:	4251      	negs	r1, r2
    3540:	414a      	adcs	r2, r1
    3542:	9201      	str	r2, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3544:	b672      	cpsid	i
    3546:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    354a:	2100      	movs	r1, #0
    354c:	4a1e      	ldr	r2, [pc, #120]	; (35c8 <udd_sleep_mode+0xb8>)
    354e:	7011      	strb	r1, [r2, #0]
	return flags;
    3550:	9801      	ldr	r0, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3552:	491c      	ldr	r1, [pc, #112]	; (35c4 <udd_sleep_mode+0xb4>)
    3554:	5cca      	ldrb	r2, [r1, r3]
    3556:	3201      	adds	r2, #1
    3558:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    355a:	2800      	cmp	r0, #0
    355c:	d005      	beq.n	356a <udd_sleep_mode+0x5a>
		cpu_irq_enable();
    355e:	2201      	movs	r2, #1
    3560:	4b19      	ldr	r3, [pc, #100]	; (35c8 <udd_sleep_mode+0xb8>)
    3562:	701a      	strb	r2, [r3, #0]
    3564:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3568:	b662      	cpsie	i
	}
	if (udd_state != UDD_STATE_OFF) {
    356a:	4b15      	ldr	r3, [pc, #84]	; (35c0 <udd_sleep_mode+0xb0>)
    356c:	781b      	ldrb	r3, [r3, #0]
    356e:	2b00      	cmp	r3, #0
    3570:	d01e      	beq.n	35b0 <udd_sleep_mode+0xa0>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    3572:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    3574:	5cd3      	ldrb	r3, [r2, r3]
    3576:	4a13      	ldr	r2, [pc, #76]	; (35c4 <udd_sleep_mode+0xb4>)
    3578:	5cd2      	ldrb	r2, [r2, r3]
    357a:	2a00      	cmp	r2, #0
    357c:	d100      	bne.n	3580 <udd_sleep_mode+0x70>
    357e:	e7fe      	b.n	357e <udd_sleep_mode+0x6e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3580:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3584:	4251      	negs	r1, r2
    3586:	414a      	adcs	r2, r1
    3588:	9202      	str	r2, [sp, #8]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    358a:	b672      	cpsid	i
    358c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3590:	2100      	movs	r1, #0
    3592:	4a0d      	ldr	r2, [pc, #52]	; (35c8 <udd_sleep_mode+0xb8>)
    3594:	7011      	strb	r1, [r2, #0]
	return flags;
    3596:	9802      	ldr	r0, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3598:	490a      	ldr	r1, [pc, #40]	; (35c4 <udd_sleep_mode+0xb4>)
    359a:	5cca      	ldrb	r2, [r1, r3]
    359c:	3a01      	subs	r2, #1
    359e:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    35a0:	2800      	cmp	r0, #0
    35a2:	d005      	beq.n	35b0 <udd_sleep_mode+0xa0>
		cpu_irq_enable();
    35a4:	2201      	movs	r2, #1
    35a6:	4b08      	ldr	r3, [pc, #32]	; (35c8 <udd_sleep_mode+0xb8>)
    35a8:	701a      	strb	r2, [r3, #0]
    35aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    35ae:	b662      	cpsie	i
	}
	udd_state = new_state;
    35b0:	4b03      	ldr	r3, [pc, #12]	; (35c0 <udd_sleep_mode+0xb0>)
    35b2:	701c      	strb	r4, [r3, #0]
}
    35b4:	b004      	add	sp, #16
    35b6:	bd10      	pop	{r4, pc}
    35b8:	00008a04 	.word	0x00008a04
    35bc:	000087fd 	.word	0x000087fd
    35c0:	20000744 	.word	0x20000744
    35c4:	200007f0 	.word	0x200007f0
    35c8:	200000e8 	.word	0x200000e8

000035cc <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    35cc:	230f      	movs	r3, #15
    35ce:	4003      	ands	r3, r0
    35d0:	005b      	lsls	r3, r3, #1
    35d2:	09c0      	lsrs	r0, r0, #7
    35d4:	1818      	adds	r0, r3, r0
    35d6:	3802      	subs	r0, #2
    35d8:	0083      	lsls	r3, r0, #2
    35da:	1818      	adds	r0, r3, r0
    35dc:	0080      	lsls	r0, r0, #2
    35de:	4b01      	ldr	r3, [pc, #4]	; (35e4 <udd_ep_get_job+0x18>)
    35e0:	1818      	adds	r0, r3, r0
}
    35e2:	4770      	bx	lr
    35e4:	200006cc 	.word	0x200006cc

000035e8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    35e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ea:	4657      	mov	r7, sl
    35ec:	464e      	mov	r6, r9
    35ee:	4645      	mov	r5, r8
    35f0:	b4e0      	push	{r5, r6, r7}
    35f2:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    35f4:	798e      	ldrb	r6, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    35f6:	b273      	sxtb	r3, r6
    35f8:	2b00      	cmp	r3, #0
    35fa:	da51      	bge.n	36a0 <udd_ep_transfer_process+0xb8>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    35fc:	1c30      	adds	r0, r6, #0
    35fe:	4b5d      	ldr	r3, [pc, #372]	; (3774 <udd_ep_transfer_process+0x18c>)
    3600:	4798      	blx	r3
    3602:	1c04      	adds	r4, r0, #0
	ep_num = ep & USB_EP_ADDR_MASK;
    3604:	230f      	movs	r3, #15
    3606:	4033      	ands	r3, r6
    3608:	4698      	mov	r8, r3

	ep_size = ptr_job->ep_size;
    360a:	8a03      	ldrh	r3, [r0, #16]
    360c:	469a      	mov	sl, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
	ptr_job->nb_trans += nb_trans;
    360e:	464b      	mov	r3, r9
    3610:	885f      	ldrh	r7, [r3, #2]
    3612:	68c3      	ldr	r3, [r0, #12]
    3614:	469c      	mov	ip, r3
    3616:	4467      	add	r7, ip
    3618:	60c7      	str	r7, [r0, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    361a:	6885      	ldr	r5, [r0, #8]
    361c:	42af      	cmp	r7, r5
    361e:	d024      	beq.n	366a <udd_ep_transfer_process+0x82>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3620:	1bed      	subs	r5, r5, r7
    3622:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3624:	4b54      	ldr	r3, [pc, #336]	; (3778 <udd_ep_transfer_process+0x190>)
    3626:	429d      	cmp	r5, r3
    3628:	d906      	bls.n	3638 <udd_ep_transfer_process+0x50>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    362a:	1c1d      	adds	r5, r3, #0
    362c:	1c18      	adds	r0, r3, #0
    362e:	4651      	mov	r1, sl
    3630:	4b52      	ldr	r3, [pc, #328]	; (377c <udd_ep_transfer_process+0x194>)
    3632:	4798      	blx	r3
    3634:	1a6d      	subs	r5, r5, r1
    3636:	b2ad      	uxth	r5, r5
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    3638:	7ca3      	ldrb	r3, [r4, #18]
    363a:	2200      	movs	r2, #0
    363c:	079b      	lsls	r3, r3, #30
    363e:	d506      	bpl.n	364e <udd_ep_transfer_process+0x66>
    3640:	1c28      	adds	r0, r5, #0
    3642:	4651      	mov	r1, sl
    3644:	4b4e      	ldr	r3, [pc, #312]	; (3780 <udd_ep_transfer_process+0x198>)
    3646:	4798      	blx	r3
    3648:	b289      	uxth	r1, r1
    364a:	424a      	negs	r2, r1
    364c:	414a      	adcs	r2, r1
    364e:	0051      	lsls	r1, r2, #1
    3650:	7ca3      	ldrb	r3, [r4, #18]
    3652:	2202      	movs	r2, #2
    3654:	4393      	bics	r3, r2
    3656:	4319      	orrs	r1, r3
    3658:	74a1      	strb	r1, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    365a:	6862      	ldr	r2, [r4, #4]
    365c:	19d2      	adds	r2, r2, r7
    365e:	4849      	ldr	r0, [pc, #292]	; (3784 <udd_ep_transfer_process+0x19c>)
    3660:	4641      	mov	r1, r8
    3662:	1c2b      	adds	r3, r5, #0
    3664:	4c48      	ldr	r4, [pc, #288]	; (3788 <udd_ep_transfer_process+0x1a0>)
    3666:	47a0      	blx	r4
    3668:	e07e      	b.n	3768 <udd_ep_transfer_process+0x180>
		return;
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    366a:	7c83      	ldrb	r3, [r0, #18]
    366c:	079b      	lsls	r3, r3, #30
    366e:	d50b      	bpl.n	3688 <udd_ep_transfer_process+0xa0>
		ptr_job->b_shortpacket = false;
    3670:	7c83      	ldrb	r3, [r0, #18]
    3672:	2202      	movs	r2, #2
    3674:	4393      	bics	r3, r2
    3676:	7483      	strb	r3, [r0, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    3678:	6842      	ldr	r2, [r0, #4]
    367a:	19d2      	adds	r2, r2, r7
    367c:	4841      	ldr	r0, [pc, #260]	; (3784 <udd_ep_transfer_process+0x19c>)
    367e:	4641      	mov	r1, r8
    3680:	2300      	movs	r3, #0
    3682:	4c41      	ldr	r4, [pc, #260]	; (3788 <udd_ep_transfer_process+0x1a0>)
    3684:	47a0      	blx	r4
    3686:	e06f      	b.n	3768 <udd_ep_transfer_process+0x180>
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    3688:	7c83      	ldrb	r3, [r0, #18]
    368a:	2201      	movs	r2, #1
    368c:	4393      	bics	r3, r2
    368e:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3690:	6803      	ldr	r3, [r0, #0]
    3692:	2b00      	cmp	r3, #0
    3694:	d068      	beq.n	3768 <udd_ep_transfer_process+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3696:	2000      	movs	r0, #0
    3698:	1c39      	adds	r1, r7, #0
    369a:	1c32      	adds	r2, r6, #0
    369c:	4798      	blx	r3
    369e:	e063      	b.n	3768 <udd_ep_transfer_process+0x180>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    36a0:	1c30      	adds	r0, r6, #0
    36a2:	4b34      	ldr	r3, [pc, #208]	; (3774 <udd_ep_transfer_process+0x18c>)
    36a4:	4798      	blx	r3
    36a6:	1c04      	adds	r4, r0, #0
	ep_num = ep & USB_EP_ADDR_MASK;
    36a8:	270f      	movs	r7, #15
    36aa:	4037      	ands	r7, r6
    36ac:	46ba      	mov	sl, r7

	ep_size = ptr_job->ep_size;
    36ae:	8a03      	ldrh	r3, [r0, #16]
    36b0:	4698      	mov	r8, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    36b2:	464b      	mov	r3, r9
    36b4:	881f      	ldrh	r7, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    36b6:	7c83      	ldrb	r3, [r0, #18]
    36b8:	075b      	lsls	r3, r3, #29
    36ba:	d511      	bpl.n	36e0 <udd_ep_transfer_process+0xf8>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    36bc:	6843      	ldr	r3, [r0, #4]
    36be:	68c2      	ldr	r2, [r0, #12]
    36c0:	4694      	mov	ip, r2
    36c2:	4463      	add	r3, ip
    36c4:	1c1d      	adds	r5, r3, #0
    36c6:	6880      	ldr	r0, [r0, #8]
    36c8:	4641      	mov	r1, r8
    36ca:	4b2d      	ldr	r3, [pc, #180]	; (3780 <udd_ep_transfer_process+0x198>)
    36cc:	4798      	blx	r3
    36ce:	1c0a      	adds	r2, r1, #0
    36d0:	4653      	mov	r3, sl
    36d2:	1e59      	subs	r1, r3, #1
    36d4:	0189      	lsls	r1, r1, #6
    36d6:	4b2d      	ldr	r3, [pc, #180]	; (378c <udd_ep_transfer_process+0x1a4>)
    36d8:	18c9      	adds	r1, r1, r3
    36da:	1c28      	adds	r0, r5, #0
    36dc:	4b2c      	ldr	r3, [pc, #176]	; (3790 <udd_ep_transfer_process+0x1a8>)
    36de:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    36e0:	68e3      	ldr	r3, [r4, #12]
    36e2:	18fd      	adds	r5, r7, r3
    36e4:	60e5      	str	r5, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    36e6:	68a3      	ldr	r3, [r4, #8]
    36e8:	429d      	cmp	r5, r3
    36ea:	d901      	bls.n	36f0 <udd_ep_transfer_process+0x108>
		ptr_job->nb_trans = ptr_job->buf_size;
    36ec:	60e3      	str	r3, [r4, #12]
    36ee:	e030      	b.n	3752 <udd_ep_transfer_process+0x16a>
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    36f0:	464a      	mov	r2, r9
    36f2:	8892      	ldrh	r2, [r2, #4]
    36f4:	42ba      	cmp	r2, r7
    36f6:	d12c      	bne.n	3752 <udd_ep_transfer_process+0x16a>
    36f8:	429d      	cmp	r5, r3
    36fa:	d02a      	beq.n	3752 <udd_ep_transfer_process+0x16a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    36fc:	1b5b      	subs	r3, r3, r5
    36fe:	b29e      	uxth	r6, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3700:	4b1d      	ldr	r3, [pc, #116]	; (3778 <udd_ep_transfer_process+0x190>)
    3702:	429e      	cmp	r6, r3
    3704:	d907      	bls.n	3716 <udd_ep_transfer_process+0x12e>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    3706:	1c1e      	adds	r6, r3, #0
    3708:	1c18      	adds	r0, r3, #0
    370a:	4641      	mov	r1, r8
    370c:	4b1b      	ldr	r3, [pc, #108]	; (377c <udd_ep_transfer_process+0x194>)
    370e:	4798      	blx	r3
    3710:	1a73      	subs	r3, r6, r1
    3712:	b29b      	uxth	r3, r3
    3714:	e005      	b.n	3722 <udd_ep_transfer_process+0x13a>
		} else {
			next_trans -= next_trans % ep_size;
    3716:	1c30      	adds	r0, r6, #0
    3718:	4641      	mov	r1, r8
    371a:	4b19      	ldr	r3, [pc, #100]	; (3780 <udd_ep_transfer_process+0x198>)
    371c:	4798      	blx	r3
    371e:	1a73      	subs	r3, r6, r1
    3720:	b29b      	uxth	r3, r3
		}

		if (next_trans < ep_size) {
    3722:	4598      	cmp	r8, r3
    3724:	d90e      	bls.n	3744 <udd_ep_transfer_process+0x15c>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    3726:	7ca2      	ldrb	r2, [r4, #18]
    3728:	2304      	movs	r3, #4
    372a:	4313      	orrs	r3, r2
    372c:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    372e:	4653      	mov	r3, sl
    3730:	1e5a      	subs	r2, r3, #1
    3732:	0192      	lsls	r2, r2, #6
    3734:	4b15      	ldr	r3, [pc, #84]	; (378c <udd_ep_transfer_process+0x1a4>)
    3736:	18d2      	adds	r2, r2, r3
    3738:	4812      	ldr	r0, [pc, #72]	; (3784 <udd_ep_transfer_process+0x19c>)
    373a:	4651      	mov	r1, sl
    373c:	4643      	mov	r3, r8
    373e:	4c15      	ldr	r4, [pc, #84]	; (3794 <udd_ep_transfer_process+0x1ac>)
    3740:	47a0      	blx	r4
    3742:	e011      	b.n	3768 <udd_ep_transfer_process+0x180>
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    3744:	6862      	ldr	r2, [r4, #4]
    3746:	1952      	adds	r2, r2, r5
    3748:	480e      	ldr	r0, [pc, #56]	; (3784 <udd_ep_transfer_process+0x19c>)
    374a:	4651      	mov	r1, sl
    374c:	4c11      	ldr	r4, [pc, #68]	; (3794 <udd_ep_transfer_process+0x1ac>)
    374e:	47a0      	blx	r4
    3750:	e00a      	b.n	3768 <udd_ep_transfer_process+0x180>
		}
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    3752:	7ca3      	ldrb	r3, [r4, #18]
    3754:	2201      	movs	r2, #1
    3756:	4393      	bics	r3, r2
    3758:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    375a:	6823      	ldr	r3, [r4, #0]
    375c:	2b00      	cmp	r3, #0
    375e:	d003      	beq.n	3768 <udd_ep_transfer_process+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3760:	68e1      	ldr	r1, [r4, #12]
    3762:	2000      	movs	r0, #0
    3764:	1c32      	adds	r2, r6, #0
    3766:	4798      	blx	r3
	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    3768:	bc1c      	pop	{r2, r3, r4}
    376a:	4690      	mov	r8, r2
    376c:	4699      	mov	r9, r3
    376e:	46a2      	mov	sl, r4
    3770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3772:	46c0      	nop			; (mov r8, r8)
    3774:	000035cd 	.word	0x000035cd
    3778:	00001fff 	.word	0x00001fff
    377c:	00006579 	.word	0x00006579
    3780:	00006399 	.word	0x00006399
    3784:	20000920 	.word	0x20000920
    3788:	000048f9 	.word	0x000048f9
    378c:	20000860 	.word	0x20000860
    3790:	000087fd 	.word	0x000087fd
    3794:	00004949 	.word	0x00004949

00003798 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    3798:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    379a:	2205      	movs	r2, #5
    379c:	4b05      	ldr	r3, [pc, #20]	; (37b4 <udd_ctrl_stall_data+0x1c>)
    379e:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    37a0:	4c05      	ldr	r4, [pc, #20]	; (37b8 <udd_ctrl_stall_data+0x20>)
    37a2:	1c20      	adds	r0, r4, #0
    37a4:	2180      	movs	r1, #128	; 0x80
    37a6:	4b05      	ldr	r3, [pc, #20]	; (37bc <udd_ctrl_stall_data+0x24>)
    37a8:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    37aa:	1c20      	adds	r0, r4, #0
    37ac:	2100      	movs	r1, #0
    37ae:	4b04      	ldr	r3, [pc, #16]	; (37c0 <udd_ctrl_stall_data+0x28>)
    37b0:	4798      	blx	r3
}
    37b2:	bd10      	pop	{r4, pc}
    37b4:	20000748 	.word	0x20000748
    37b8:	20000920 	.word	0x20000920
    37bc:	00004849 	.word	0x00004849
    37c0:	00004871 	.word	0x00004871

000037c4 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    37c4:	b570      	push	{r4, r5, r6, lr}
    37c6:	1c0e      	adds	r6, r1, #0
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    37c8:	4c0d      	ldr	r4, [pc, #52]	; (3800 <_usb_device_lpm_suspend+0x3c>)
    37ca:	1c20      	adds	r0, r4, #0
    37cc:	2106      	movs	r1, #6
    37ce:	4d0d      	ldr	r5, [pc, #52]	; (3804 <_usb_device_lpm_suspend+0x40>)
    37d0:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    37d2:	1c20      	adds	r0, r4, #0
    37d4:	2104      	movs	r1, #4
    37d6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    37d8:	1c20      	adds	r0, r4, #0
    37da:	2102      	movs	r1, #2
    37dc:	4b0a      	ldr	r3, [pc, #40]	; (3808 <_usb_device_lpm_suspend+0x44>)
    37de:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    37e0:	2002      	movs	r0, #2
    37e2:	4b0a      	ldr	r3, [pc, #40]	; (380c <_usb_device_lpm_suspend+0x48>)
    37e4:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    37e6:	6833      	ldr	r3, [r6, #0]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d004      	beq.n	37f6 <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    37ec:	4b08      	ldr	r3, [pc, #32]	; (3810 <_usb_device_lpm_suspend+0x4c>)
    37ee:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    37f0:	6833      	ldr	r3, [r6, #0]
    37f2:	2b00      	cmp	r3, #0
    37f4:	d101      	bne.n	37fa <_usb_device_lpm_suspend+0x36>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    37f6:	4b07      	ldr	r3, [pc, #28]	; (3814 <_usb_device_lpm_suspend+0x50>)
    37f8:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    37fa:	4b07      	ldr	r3, [pc, #28]	; (3818 <_usb_device_lpm_suspend+0x54>)
    37fc:	4798      	blx	r3
}
    37fe:	bd70      	pop	{r4, r5, r6, pc}
    3800:	20000920 	.word	0x20000920
    3804:	0000435d 	.word	0x0000435d
    3808:	0000433d 	.word	0x0000433d
    380c:	00003511 	.word	0x00003511
    3810:	00005dad 	.word	0x00005dad
    3814:	00005da1 	.word	0x00005da1
    3818:	00005d95 	.word	0x00005d95

0000381c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    381c:	b538      	push	{r3, r4, r5, lr}
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    381e:	4b13      	ldr	r3, [pc, #76]	; (386c <_usb_on_wakeup+0x50>)
    3820:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3822:	069b      	lsls	r3, r3, #26
    3824:	d406      	bmi.n	3834 <_usb_on_wakeup+0x18>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3826:	4911      	ldr	r1, [pc, #68]	; (386c <_usb_on_wakeup+0x50>)
    3828:	22d0      	movs	r2, #208	; 0xd0
    382a:	68cb      	ldr	r3, [r1, #12]
    382c:	4013      	ands	r3, r2
    382e:	2bd0      	cmp	r3, #208	; 0xd0
    3830:	d1fb      	bne.n	382a <_usb_on_wakeup+0xe>
    3832:	e004      	b.n	383e <_usb_on_wakeup+0x22>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3834:	490d      	ldr	r1, [pc, #52]	; (386c <_usb_on_wakeup+0x50>)
    3836:	2210      	movs	r2, #16
    3838:	68cb      	ldr	r3, [r1, #12]
    383a:	421a      	tst	r2, r3
    383c:	d0fc      	beq.n	3838 <_usb_on_wakeup+0x1c>
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    383e:	4c0c      	ldr	r4, [pc, #48]	; (3870 <_usb_on_wakeup+0x54>)
    3840:	1c20      	adds	r0, r4, #0
    3842:	2102      	movs	r1, #2
    3844:	4b0b      	ldr	r3, [pc, #44]	; (3874 <_usb_on_wakeup+0x58>)
    3846:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3848:	1c20      	adds	r0, r4, #0
    384a:	2104      	movs	r1, #4
    384c:	4d0a      	ldr	r5, [pc, #40]	; (3878 <_usb_on_wakeup+0x5c>)
    384e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3850:	1c20      	adds	r0, r4, #0
    3852:	2106      	movs	r1, #6
    3854:	4a09      	ldr	r2, [pc, #36]	; (387c <_usb_on_wakeup+0x60>)
    3856:	4b0a      	ldr	r3, [pc, #40]	; (3880 <_usb_on_wakeup+0x64>)
    3858:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    385a:	1c20      	adds	r0, r4, #0
    385c:	2106      	movs	r1, #6
    385e:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3860:	2003      	movs	r0, #3
    3862:	4b08      	ldr	r3, [pc, #32]	; (3884 <_usb_on_wakeup+0x68>)
    3864:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3866:	4b08      	ldr	r3, [pc, #32]	; (3888 <_usb_on_wakeup+0x6c>)
    3868:	4798      	blx	r3
#endif
}
    386a:	bd38      	pop	{r3, r4, r5, pc}
    386c:	40000800 	.word	0x40000800
    3870:	20000920 	.word	0x20000920
    3874:	0000435d 	.word	0x0000435d
    3878:	0000433d 	.word	0x0000433d
    387c:	000037c5 	.word	0x000037c5
    3880:	0000431d 	.word	0x0000431d
    3884:	00003511 	.word	0x00003511
    3888:	00005d69 	.word	0x00005d69

0000388c <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    388c:	b530      	push	{r4, r5, lr}
    388e:	b083      	sub	sp, #12
    3890:	1c04      	adds	r4, r0, #0
	// Reset USB Device Stack Core
	udc_reset();
    3892:	4b1e      	ldr	r3, [pc, #120]	; (390c <_usb_on_bus_reset+0x80>)
    3894:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3896:	2380      	movs	r3, #128	; 0x80
    3898:	6822      	ldr	r2, [r4, #0]
    389a:	7293      	strb	r3, [r2, #10]
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    389c:	ad01      	add	r5, sp, #4
    389e:	1c28      	adds	r0, r5, #0
    38a0:	4b1b      	ldr	r3, [pc, #108]	; (3910 <_usb_on_bus_reset+0x84>)
    38a2:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    38a4:	2303      	movs	r3, #3
    38a6:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    38a8:	1c20      	adds	r0, r4, #0
    38aa:	1c29      	adds	r1, r5, #0
    38ac:	4b19      	ldr	r3, [pc, #100]	; (3914 <_usb_on_bus_reset+0x88>)
    38ae:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    38b0:	1c20      	adds	r0, r4, #0
    38b2:	4919      	ldr	r1, [pc, #100]	; (3918 <_usb_on_bus_reset+0x8c>)
    38b4:	4b19      	ldr	r3, [pc, #100]	; (391c <_usb_on_bus_reset+0x90>)
    38b6:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    38b8:	1c20      	adds	r0, r4, #0
    38ba:	2100      	movs	r1, #0
    38bc:	2202      	movs	r2, #2
    38be:	4b18      	ldr	r3, [pc, #96]	; (3920 <_usb_on_bus_reset+0x94>)
    38c0:	4d18      	ldr	r5, [pc, #96]	; (3924 <_usb_on_bus_reset+0x98>)
    38c2:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    38c4:	1c20      	adds	r0, r4, #0
    38c6:	2100      	movs	r1, #0
    38c8:	2200      	movs	r2, #0
    38ca:	4b17      	ldr	r3, [pc, #92]	; (3928 <_usb_on_bus_reset+0x9c>)
    38cc:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    38ce:	1c20      	adds	r0, r4, #0
    38d0:	2100      	movs	r1, #0
    38d2:	2201      	movs	r2, #1
    38d4:	4b15      	ldr	r3, [pc, #84]	; (392c <_usb_on_bus_reset+0xa0>)
    38d6:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    38d8:	1c20      	adds	r0, r4, #0
    38da:	2100      	movs	r1, #0
    38dc:	2202      	movs	r2, #2
    38de:	4d14      	ldr	r5, [pc, #80]	; (3930 <_usb_on_bus_reset+0xa4>)
    38e0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    38e2:	1c20      	adds	r0, r4, #0
    38e4:	2100      	movs	r1, #0
    38e6:	2200      	movs	r2, #0
    38e8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    38ea:	1c20      	adds	r0, r4, #0
    38ec:	2100      	movs	r1, #0
    38ee:	2201      	movs	r2, #1
    38f0:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    38f2:	6822      	ldr	r2, [r4, #0]
    38f4:	8911      	ldrh	r1, [r2, #8]
    38f6:	4b0f      	ldr	r3, [pc, #60]	; (3934 <_usb_on_bus_reset+0xa8>)
    38f8:	400b      	ands	r3, r1
    38fa:	2180      	movs	r1, #128	; 0x80
    38fc:	00c9      	lsls	r1, r1, #3
    38fe:	430b      	orrs	r3, r1
    3900:	8113      	strh	r3, [r2, #8]
#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3902:	2200      	movs	r2, #0
    3904:	4b0c      	ldr	r3, [pc, #48]	; (3938 <_usb_on_bus_reset+0xac>)
    3906:	701a      	strb	r2, [r3, #0]
{
	// Reset USB Device Stack Core
	udc_reset();
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    3908:	b003      	add	sp, #12
    390a:	bd30      	pop	{r4, r5, pc}
    390c:	00001019 	.word	0x00001019
    3910:	00004581 	.word	0x00004581
    3914:	00004591 	.word	0x00004591
    3918:	20000aa0 	.word	0x20000aa0
    391c:	00004995 	.word	0x00004995
    3920:	00003a71 	.word	0x00003a71
    3924:	00004379 	.word	0x00004379
    3928:	00003da1 	.word	0x00003da1
    392c:	00003979 	.word	0x00003979
    3930:	000043c9 	.word	0x000043c9
    3934:	fffff3ff 	.word	0xfffff3ff
    3938:	20000748 	.word	0x20000748

0000393c <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    393c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    393e:	2203      	movs	r2, #3
    3940:	4b07      	ldr	r3, [pc, #28]	; (3960 <udd_ctrl_send_zlp_in+0x24>)
    3942:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3944:	4c07      	ldr	r4, [pc, #28]	; (3964 <udd_ctrl_send_zlp_in+0x28>)
    3946:	1c20      	adds	r0, r4, #0
    3948:	4907      	ldr	r1, [pc, #28]	; (3968 <udd_ctrl_send_zlp_in+0x2c>)
    394a:	4b08      	ldr	r3, [pc, #32]	; (396c <udd_ctrl_send_zlp_in+0x30>)
    394c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    394e:	4b08      	ldr	r3, [pc, #32]	; (3970 <udd_ctrl_send_zlp_in+0x34>)
    3950:	689a      	ldr	r2, [r3, #8]
    3952:	1c20      	adds	r0, r4, #0
    3954:	2100      	movs	r1, #0
    3956:	2300      	movs	r3, #0
    3958:	4c06      	ldr	r4, [pc, #24]	; (3974 <udd_ctrl_send_zlp_in+0x38>)
    395a:	47a0      	blx	r4
}
    395c:	bd10      	pop	{r4, pc}
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	20000748 	.word	0x20000748
    3964:	20000920 	.word	0x20000920
    3968:	20000aa0 	.word	0x20000aa0
    396c:	00004995 	.word	0x00004995
    3970:	20000a88 	.word	0x20000a88
    3974:	000048f9 	.word	0x000048f9

00003978 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    3978:	b508      	push	{r3, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    397a:	7989      	ldrb	r1, [r1, #6]
    397c:	b24b      	sxtb	r3, r1
    397e:	2b00      	cmp	r3, #0
    3980:	da0c      	bge.n	399c <_usb_ep0_on_tansfer_fail+0x24>
 */
static void udd_ctrl_underflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3982:	4b0d      	ldr	r3, [pc, #52]	; (39b8 <_usb_ep0_on_tansfer_fail+0x40>)
    3984:	781b      	ldrb	r3, [r3, #0]
    3986:	2b01      	cmp	r3, #1
    3988:	d102      	bne.n	3990 <_usb_ep0_on_tansfer_fail+0x18>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    398a:	4b0c      	ldr	r3, [pc, #48]	; (39bc <_usb_ep0_on_tansfer_fail+0x44>)
    398c:	4798      	blx	r3
    398e:	e012      	b.n	39b6 <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    3990:	2b04      	cmp	r3, #4
    3992:	d110      	bne.n	39b6 <_usb_ep0_on_tansfer_fail+0x3e>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3994:	480a      	ldr	r0, [pc, #40]	; (39c0 <_usb_ep0_on_tansfer_fail+0x48>)
    3996:	4b0b      	ldr	r3, [pc, #44]	; (39c4 <_usb_ep0_on_tansfer_fail+0x4c>)
    3998:	4798      	blx	r3
    399a:	e00c      	b.n	39b6 <_usb_ep0_on_tansfer_fail+0x3e>
 */
static void udd_ctrl_overflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    399c:	4b06      	ldr	r3, [pc, #24]	; (39b8 <_usb_ep0_on_tansfer_fail+0x40>)
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	2b02      	cmp	r3, #2
    39a2:	d103      	bne.n	39ac <_usb_ep0_on_tansfer_fail+0x34>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    39a4:	2204      	movs	r2, #4
    39a6:	4b04      	ldr	r3, [pc, #16]	; (39b8 <_usb_ep0_on_tansfer_fail+0x40>)
    39a8:	701a      	strb	r2, [r3, #0]
    39aa:	e004      	b.n	39b6 <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    39ac:	2b03      	cmp	r3, #3
    39ae:	d102      	bne.n	39b6 <_usb_ep0_on_tansfer_fail+0x3e>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    39b0:	4803      	ldr	r0, [pc, #12]	; (39c0 <_usb_ep0_on_tansfer_fail+0x48>)
    39b2:	4b04      	ldr	r3, [pc, #16]	; (39c4 <_usb_ep0_on_tansfer_fail+0x4c>)
    39b4:	4798      	blx	r3
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    39b6:	bd08      	pop	{r3, pc}
    39b8:	20000748 	.word	0x20000748
    39bc:	0000393d 	.word	0x0000393d
    39c0:	20000920 	.word	0x20000920
    39c4:	00004849 	.word	0x00004849

000039c8 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    39c8:	b570      	push	{r4, r5, r6, lr}
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    39ca:	4b20      	ldr	r3, [pc, #128]	; (3a4c <udd_ctrl_in_sent+0x84>)
    39cc:	881a      	ldrh	r2, [r3, #0]
    39ce:	4b20      	ldr	r3, [pc, #128]	; (3a50 <udd_ctrl_in_sent+0x88>)
    39d0:	899c      	ldrh	r4, [r3, #12]
    39d2:	1aa4      	subs	r4, r4, r2
    39d4:	b2a4      	uxth	r4, r4

	if (0 == nb_remain) {
    39d6:	2c00      	cmp	r4, #0
    39d8:	d120      	bne.n	3a1c <udd_ctrl_in_sent+0x54>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    39da:	491e      	ldr	r1, [pc, #120]	; (3a54 <udd_ctrl_in_sent+0x8c>)
    39dc:	880b      	ldrh	r3, [r1, #0]
    39de:	18d3      	adds	r3, r2, r3
    39e0:	b29b      	uxth	r3, r3
    39e2:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    39e4:	4a1a      	ldr	r2, [pc, #104]	; (3a50 <udd_ctrl_in_sent+0x88>)
    39e6:	88d2      	ldrh	r2, [r2, #6]
    39e8:	429a      	cmp	r2, r3
    39ea:	d003      	beq.n	39f4 <udd_ctrl_in_sent+0x2c>
    39ec:	4b1a      	ldr	r3, [pc, #104]	; (3a58 <udd_ctrl_in_sent+0x90>)
    39ee:	781b      	ldrb	r3, [r3, #0]
    39f0:	2b00      	cmp	r3, #0
    39f2:	d007      	beq.n	3a04 <udd_ctrl_in_sent+0x3c>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    39f4:	2204      	movs	r2, #4
    39f6:	4b19      	ldr	r3, [pc, #100]	; (3a5c <udd_ctrl_in_sent+0x94>)
    39f8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    39fa:	4819      	ldr	r0, [pc, #100]	; (3a60 <udd_ctrl_in_sent+0x98>)
    39fc:	4919      	ldr	r1, [pc, #100]	; (3a64 <udd_ctrl_in_sent+0x9c>)
    39fe:	4b1a      	ldr	r3, [pc, #104]	; (3a68 <udd_ctrl_in_sent+0xa0>)
    3a00:	4798      	blx	r3
			return;
    3a02:	e022      	b.n	3a4a <udd_ctrl_in_sent+0x82>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3a04:	4b12      	ldr	r3, [pc, #72]	; (3a50 <udd_ctrl_in_sent+0x88>)
    3a06:	695b      	ldr	r3, [r3, #20]
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d00e      	beq.n	3a2a <udd_ctrl_in_sent+0x62>
    3a0c:	4798      	blx	r3
    3a0e:	2800      	cmp	r0, #0
    3a10:	d00b      	beq.n	3a2a <udd_ctrl_in_sent+0x62>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    3a12:	2200      	movs	r2, #0
    3a14:	4b0d      	ldr	r3, [pc, #52]	; (3a4c <udd_ctrl_in_sent+0x84>)
    3a16:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3a18:	4b0d      	ldr	r3, [pc, #52]	; (3a50 <udd_ctrl_in_sent+0x88>)
    3a1a:	899c      	ldrh	r4, [r3, #12]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3a1c:	2c3f      	cmp	r4, #63	; 0x3f
    3a1e:	d904      	bls.n	3a2a <udd_ctrl_in_sent+0x62>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    3a20:	2200      	movs	r2, #0
    3a22:	4b0d      	ldr	r3, [pc, #52]	; (3a58 <udd_ctrl_in_sent+0x90>)
    3a24:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    3a26:	2440      	movs	r4, #64	; 0x40
    3a28:	e002      	b.n	3a30 <udd_ctrl_in_sent+0x68>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    3a2a:	2201      	movs	r2, #1
    3a2c:	4b0a      	ldr	r3, [pc, #40]	; (3a58 <udd_ctrl_in_sent+0x90>)
    3a2e:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3a30:	4d06      	ldr	r5, [pc, #24]	; (3a4c <udd_ctrl_in_sent+0x84>)
    3a32:	882b      	ldrh	r3, [r5, #0]
    3a34:	4a06      	ldr	r2, [pc, #24]	; (3a50 <udd_ctrl_in_sent+0x88>)
    3a36:	6892      	ldr	r2, [r2, #8]
    3a38:	18d2      	adds	r2, r2, r3
    3a3a:	4809      	ldr	r0, [pc, #36]	; (3a60 <udd_ctrl_in_sent+0x98>)
    3a3c:	2100      	movs	r1, #0
    3a3e:	1c23      	adds	r3, r4, #0
    3a40:	4e0a      	ldr	r6, [pc, #40]	; (3a6c <udd_ctrl_in_sent+0xa4>)
    3a42:	47b0      	blx	r6

	udd_ctrl_payload_nb_trans += nb_remain;
    3a44:	882b      	ldrh	r3, [r5, #0]
    3a46:	18e4      	adds	r4, r4, r3
    3a48:	802c      	strh	r4, [r5, #0]
}
    3a4a:	bd70      	pop	{r4, r5, r6, pc}
    3a4c:	20000746 	.word	0x20000746
    3a50:	20000a88 	.word	0x20000a88
    3a54:	200006c8 	.word	0x200006c8
    3a58:	20000749 	.word	0x20000749
    3a5c:	20000748 	.word	0x20000748
    3a60:	20000920 	.word	0x20000920
    3a64:	20000aa0 	.word	0x20000aa0
    3a68:	00004995 	.word	0x00004995
    3a6c:	000048f9 	.word	0x000048f9

00003a70 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    3a70:	b510      	push	{r4, lr}
    3a72:	1c0c      	adds	r4, r1, #0
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    3a74:	4b2c      	ldr	r3, [pc, #176]	; (3b28 <_usb_ep0_on_setup+0xb8>)
    3a76:	781b      	ldrb	r3, [r3, #0]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	d007      	beq.n	3a8c <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    3a7c:	4b2b      	ldr	r3, [pc, #172]	; (3b2c <_usb_ep0_on_setup+0xbc>)
    3a7e:	691b      	ldr	r3, [r3, #16]
    3a80:	2b00      	cmp	r3, #0
    3a82:	d000      	beq.n	3a86 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    3a84:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    3a86:	2200      	movs	r2, #0
    3a88:	4b27      	ldr	r3, [pc, #156]	; (3b28 <_usb_ep0_on_setup+0xb8>)
    3a8a:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    3a8c:	8823      	ldrh	r3, [r4, #0]
    3a8e:	2b08      	cmp	r3, #8
    3a90:	d002      	beq.n	3a98 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    3a92:	4b27      	ldr	r3, [pc, #156]	; (3b30 <_usb_ep0_on_setup+0xc0>)
    3a94:	4798      	blx	r3
		return;
    3a96:	e045      	b.n	3b24 <_usb_ep0_on_setup+0xb4>
/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    3a98:	4a24      	ldr	r2, [pc, #144]	; (3b2c <_usb_ep0_on_setup+0xbc>)
    3a9a:	4b26      	ldr	r3, [pc, #152]	; (3b34 <_usb_ep0_on_setup+0xc4>)
    3a9c:	7819      	ldrb	r1, [r3, #0]
    3a9e:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    3aa0:	7859      	ldrb	r1, [r3, #1]
    3aa2:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    3aa4:	78d9      	ldrb	r1, [r3, #3]
    3aa6:	0209      	lsls	r1, r1, #8
    3aa8:	7898      	ldrb	r0, [r3, #2]
    3aaa:	1841      	adds	r1, r0, r1
    3aac:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    3aae:	7959      	ldrb	r1, [r3, #5]
    3ab0:	0209      	lsls	r1, r1, #8
    3ab2:	7918      	ldrb	r0, [r3, #4]
    3ab4:	1841      	adds	r1, r0, r1
    3ab6:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    3ab8:	79d9      	ldrb	r1, [r3, #7]
    3aba:	0209      	lsls	r1, r1, #8
    3abc:	799b      	ldrb	r3, [r3, #6]
    3abe:	185b      	adds	r3, r3, r1
    3ac0:	80d3      	strh	r3, [r2, #6]
	if ( 8 != ep_callback_para->received_bytes) {
		udd_ctrl_stall_data();
		return;
	} else {
		udd_ctrl_fetch_ram();
		if (false == udc_process_setup()) {
    3ac2:	4b1d      	ldr	r3, [pc, #116]	; (3b38 <_usb_ep0_on_setup+0xc8>)
    3ac4:	4798      	blx	r3
    3ac6:	2800      	cmp	r0, #0
    3ac8:	d102      	bne.n	3ad0 <_usb_ep0_on_setup+0x60>
			udd_ctrl_stall_data();
    3aca:	4b19      	ldr	r3, [pc, #100]	; (3b30 <_usb_ep0_on_setup+0xc0>)
    3acc:	4798      	blx	r3
			return;
    3ace:	e029      	b.n	3b24 <_usb_ep0_on_setup+0xb4>
		} else if (Udd_setup_is_in()) {
    3ad0:	4b16      	ldr	r3, [pc, #88]	; (3b2c <_usb_ep0_on_setup+0xbc>)
    3ad2:	781b      	ldrb	r3, [r3, #0]
    3ad4:	2b7f      	cmp	r3, #127	; 0x7f
    3ad6:	d910      	bls.n	3afa <_usb_ep0_on_setup+0x8a>
			udd_ctrl_prev_payload_nb_trans = 0;
    3ad8:	2300      	movs	r3, #0
    3ada:	4a18      	ldr	r2, [pc, #96]	; (3b3c <_usb_ep0_on_setup+0xcc>)
    3adc:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3ade:	4a18      	ldr	r2, [pc, #96]	; (3b40 <_usb_ep0_on_setup+0xd0>)
    3ae0:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3ae2:	2202      	movs	r2, #2
    3ae4:	4b10      	ldr	r3, [pc, #64]	; (3b28 <_usb_ep0_on_setup+0xb8>)
    3ae6:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3ae8:	4816      	ldr	r0, [pc, #88]	; (3b44 <_usb_ep0_on_setup+0xd4>)
    3aea:	2100      	movs	r1, #0
    3aec:	4a11      	ldr	r2, [pc, #68]	; (3b34 <_usb_ep0_on_setup+0xc4>)
    3aee:	2340      	movs	r3, #64	; 0x40
    3af0:	4c15      	ldr	r4, [pc, #84]	; (3b48 <_usb_ep0_on_setup+0xd8>)
    3af2:	47a0      	blx	r4
			udd_ctrl_in_sent();
    3af4:	4b15      	ldr	r3, [pc, #84]	; (3b4c <_usb_ep0_on_setup+0xdc>)
    3af6:	4798      	blx	r3
    3af8:	e014      	b.n	3b24 <_usb_ep0_on_setup+0xb4>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    3afa:	4b0c      	ldr	r3, [pc, #48]	; (3b2c <_usb_ep0_on_setup+0xbc>)
    3afc:	88db      	ldrh	r3, [r3, #6]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d102      	bne.n	3b08 <_usb_ep0_on_setup+0x98>
				udd_ctrl_send_zlp_in();
    3b02:	4b13      	ldr	r3, [pc, #76]	; (3b50 <_usb_ep0_on_setup+0xe0>)
    3b04:	4798      	blx	r3
				return;
    3b06:	e00d      	b.n	3b24 <_usb_ep0_on_setup+0xb4>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    3b08:	2300      	movs	r3, #0
    3b0a:	4a0c      	ldr	r2, [pc, #48]	; (3b3c <_usb_ep0_on_setup+0xcc>)
    3b0c:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3b0e:	4a0c      	ldr	r2, [pc, #48]	; (3b40 <_usb_ep0_on_setup+0xd0>)
    3b10:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    3b12:	2201      	movs	r2, #1
    3b14:	4b04      	ldr	r3, [pc, #16]	; (3b28 <_usb_ep0_on_setup+0xb8>)
    3b16:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3b18:	480a      	ldr	r0, [pc, #40]	; (3b44 <_usb_ep0_on_setup+0xd4>)
    3b1a:	2100      	movs	r1, #0
    3b1c:	4a05      	ldr	r2, [pc, #20]	; (3b34 <_usb_ep0_on_setup+0xc4>)
    3b1e:	2340      	movs	r3, #64	; 0x40
    3b20:	4c09      	ldr	r4, [pc, #36]	; (3b48 <_usb_ep0_on_setup+0xd8>)
    3b22:	47a0      	blx	r4
			}
		}
	}
}
    3b24:	bd10      	pop	{r4, pc}
    3b26:	46c0      	nop			; (mov r8, r8)
    3b28:	20000748 	.word	0x20000748
    3b2c:	20000a88 	.word	0x20000a88
    3b30:	00003799 	.word	0x00003799
    3b34:	20000aa0 	.word	0x20000aa0
    3b38:	000010a5 	.word	0x000010a5
    3b3c:	200006c8 	.word	0x200006c8
    3b40:	20000746 	.word	0x20000746
    3b44:	20000920 	.word	0x20000920
    3b48:	00004949 	.word	0x00004949
    3b4c:	000039c9 	.word	0x000039c9
    3b50:	0000393d 	.word	0x0000393d

00003b54 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    3b54:	b508      	push	{r3, lr}
	udc_sof_notify();
    3b56:	4b02      	ldr	r3, [pc, #8]	; (3b60 <_usb_on_sof_notify+0xc>)
    3b58:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    3b5a:	4b02      	ldr	r3, [pc, #8]	; (3b64 <_usb_on_sof_notify+0x10>)
    3b5c:	4798      	blx	r3
#endif
}
    3b5e:	bd08      	pop	{r3, pc}
    3b60:	00001065 	.word	0x00001065
    3b64:	00005d75 	.word	0x00005d75

00003b68 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    3b68:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3b6a:	4c07      	ldr	r4, [pc, #28]	; (3b88 <_usb_on_suspend+0x20>)
    3b6c:	1c20      	adds	r0, r4, #0
    3b6e:	2104      	movs	r1, #4
    3b70:	4b06      	ldr	r3, [pc, #24]	; (3b8c <_usb_on_suspend+0x24>)
    3b72:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3b74:	1c20      	adds	r0, r4, #0
    3b76:	2102      	movs	r1, #2
    3b78:	4b05      	ldr	r3, [pc, #20]	; (3b90 <_usb_on_suspend+0x28>)
    3b7a:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3b7c:	2001      	movs	r0, #1
    3b7e:	4b05      	ldr	r3, [pc, #20]	; (3b94 <_usb_on_suspend+0x2c>)
    3b80:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    3b82:	4b05      	ldr	r3, [pc, #20]	; (3b98 <_usb_on_suspend+0x30>)
    3b84:	4798      	blx	r3
#endif
}
    3b86:	bd10      	pop	{r4, pc}
    3b88:	20000920 	.word	0x20000920
    3b8c:	0000435d 	.word	0x0000435d
    3b90:	0000433d 	.word	0x0000433d
    3b94:	00003511 	.word	0x00003511
    3b98:	00005d5d 	.word	0x00005d5d

00003b9c <udd_ep_abort>:
		udd_ep_trans_out_next(pointer);
	}
}

void udd_ep_abort(udd_ep_id_t ep)
{
    3b9c:	b510      	push	{r4, lr}
    3b9e:	1c04      	adds	r4, r0, #0
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    3ba0:	480a      	ldr	r0, [pc, #40]	; (3bcc <udd_ep_abort+0x30>)
    3ba2:	1c21      	adds	r1, r4, #0
    3ba4:	4b0a      	ldr	r3, [pc, #40]	; (3bd0 <udd_ep_abort+0x34>)
    3ba6:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    3ba8:	1c20      	adds	r0, r4, #0
    3baa:	4b0a      	ldr	r3, [pc, #40]	; (3bd4 <udd_ep_abort+0x38>)
    3bac:	4798      	blx	r3
	if (!ptr_job->busy) {
    3bae:	7c83      	ldrb	r3, [r0, #18]
    3bb0:	07db      	lsls	r3, r3, #31
    3bb2:	d50a      	bpl.n	3bca <udd_ep_abort+0x2e>
		return;
	}
	ptr_job->busy = false;
    3bb4:	7c83      	ldrb	r3, [r0, #18]
    3bb6:	2201      	movs	r2, #1
    3bb8:	4393      	bics	r3, r2
    3bba:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3bbc:	6803      	ldr	r3, [r0, #0]
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d003      	beq.n	3bca <udd_ep_abort+0x2e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    3bc2:	68c1      	ldr	r1, [r0, #12]
    3bc4:	2001      	movs	r0, #1
    3bc6:	1c22      	adds	r2, r4, #0
    3bc8:	4798      	blx	r3
	}
}
    3bca:	bd10      	pop	{r4, pc}
    3bcc:	20000920 	.word	0x20000920
    3bd0:	000047e5 	.word	0x000047e5
    3bd4:	000035cd 	.word	0x000035cd

00003bd8 <udd_is_high_speed>:
bool udd_is_high_speed(void)
{
#if SAMD21 || SAMR21 || SAMD11 || SAML21  || SAML22 || SAMDA1
	return false;
#endif
}
    3bd8:	2000      	movs	r0, #0
    3bda:	4770      	bx	lr

00003bdc <udd_get_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3bdc:	4b02      	ldr	r3, [pc, #8]	; (3be8 <udd_get_frame_number+0xc>)
    3bde:	681b      	ldr	r3, [r3, #0]
    3be0:	8a18      	ldrh	r0, [r3, #16]
    3be2:	0480      	lsls	r0, r0, #18
    3be4:	0d40      	lsrs	r0, r0, #21

uint16_t udd_get_frame_number(void)
{
	return usb_device_get_frame_number(&usb_device);
}
    3be6:	4770      	bx	lr
    3be8:	20000920 	.word	0x20000920

00003bec <udd_get_micro_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    3bec:	4b02      	ldr	r3, [pc, #8]	; (3bf8 <udd_get_micro_frame_number+0xc>)
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	8a18      	ldrh	r0, [r3, #16]
    3bf2:	b280      	uxth	r0, r0

uint16_t udd_get_micro_frame_number(void)
{
	return usb_device_get_micro_frame_number(&usb_device);
}
    3bf4:	4770      	bx	lr
    3bf6:	46c0      	nop			; (mov r8, r8)
    3bf8:	20000920 	.word	0x20000920

00003bfc <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    3bfc:	b570      	push	{r4, r5, r6, lr}
    3bfe:	b082      	sub	sp, #8
    3c00:	1c04      	adds	r4, r0, #0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    3c02:	ad01      	add	r5, sp, #4
    3c04:	1c28      	adds	r0, r5, #0
    3c06:	4b0d      	ldr	r3, [pc, #52]	; (3c3c <udd_ep_free+0x40>)
    3c08:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
	udd_ep_abort(ep);
    3c0a:	1c20      	adds	r0, r4, #0
    3c0c:	4b0c      	ldr	r3, [pc, #48]	; (3c40 <udd_ep_free+0x44>)
    3c0e:	4798      	blx	r3

	config_ep.ep_address = ep;
    3c10:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3c12:	2300      	movs	r3, #0
    3c14:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    3c16:	4e0b      	ldr	r6, [pc, #44]	; (3c44 <udd_ep_free+0x48>)
    3c18:	1c30      	adds	r0, r6, #0
    3c1a:	1c29      	adds	r1, r5, #0
    3c1c:	4b0a      	ldr	r3, [pc, #40]	; (3c48 <udd_ep_free+0x4c>)
    3c1e:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3c20:	210f      	movs	r1, #15
    3c22:	4021      	ands	r1, r4
    3c24:	1c30      	adds	r0, r6, #0
    3c26:	2200      	movs	r2, #0
    3c28:	4b08      	ldr	r3, [pc, #32]	; (3c4c <udd_ep_free+0x50>)
    3c2a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3c2c:	1c30      	adds	r0, r6, #0
    3c2e:	1c21      	adds	r1, r4, #0
    3c30:	2200      	movs	r2, #0
    3c32:	4b07      	ldr	r3, [pc, #28]	; (3c50 <udd_ep_free+0x54>)
    3c34:	4798      	blx	r3
}
    3c36:	b002      	add	sp, #8
    3c38:	bd70      	pop	{r4, r5, r6, pc}
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	00004581 	.word	0x00004581
    3c40:	00003b9d 	.word	0x00003b9d
    3c44:	20000920 	.word	0x20000920
    3c48:	00004591 	.word	0x00004591
    3c4c:	000043a1 	.word	0x000043a1
    3c50:	000044a5 	.word	0x000044a5

00003c54 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    3c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c56:	b083      	sub	sp, #12
    3c58:	1c06      	adds	r6, r0, #0
    3c5a:	1c0c      	adds	r4, r1, #0
    3c5c:	1c15      	adds	r5, r2, #0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    3c5e:	af01      	add	r7, sp, #4
    3c60:	1c38      	adds	r0, r7, #0
    3c62:	4b36      	ldr	r3, [pc, #216]	; (3d3c <udd_ep_alloc+0xe8>)
    3c64:	4798      	blx	r3

	config_ep.ep_address = ep;
    3c66:	703e      	strb	r6, [r7, #0]

	if(MaxEndpointSize <= 8) {
    3c68:	2d08      	cmp	r5, #8
    3c6a:	d803      	bhi.n	3c74 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    3c6c:	2200      	movs	r2, #0
    3c6e:	ab01      	add	r3, sp, #4
    3c70:	705a      	strb	r2, [r3, #1]
    3c72:	e02e      	b.n	3cd2 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 16) {
    3c74:	2d10      	cmp	r5, #16
    3c76:	d803      	bhi.n	3c80 <udd_ep_alloc+0x2c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    3c78:	2201      	movs	r2, #1
    3c7a:	ab01      	add	r3, sp, #4
    3c7c:	705a      	strb	r2, [r3, #1]
    3c7e:	e028      	b.n	3cd2 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 32) {
    3c80:	2d20      	cmp	r5, #32
    3c82:	d803      	bhi.n	3c8c <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    3c84:	2202      	movs	r2, #2
    3c86:	ab01      	add	r3, sp, #4
    3c88:	705a      	strb	r2, [r3, #1]
    3c8a:	e022      	b.n	3cd2 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 64) {
    3c8c:	2d40      	cmp	r5, #64	; 0x40
    3c8e:	d803      	bhi.n	3c98 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    3c90:	2203      	movs	r2, #3
    3c92:	ab01      	add	r3, sp, #4
    3c94:	705a      	strb	r2, [r3, #1]
    3c96:	e01c      	b.n	3cd2 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 128) {
    3c98:	2d80      	cmp	r5, #128	; 0x80
    3c9a:	d803      	bhi.n	3ca4 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    3c9c:	2204      	movs	r2, #4
    3c9e:	ab01      	add	r3, sp, #4
    3ca0:	705a      	strb	r2, [r3, #1]
    3ca2:	e016      	b.n	3cd2 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 256) {
    3ca4:	2380      	movs	r3, #128	; 0x80
    3ca6:	005b      	lsls	r3, r3, #1
    3ca8:	429d      	cmp	r5, r3
    3caa:	d803      	bhi.n	3cb4 <udd_ep_alloc+0x60>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    3cac:	2205      	movs	r2, #5
    3cae:	ab01      	add	r3, sp, #4
    3cb0:	705a      	strb	r2, [r3, #1]
    3cb2:	e00e      	b.n	3cd2 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 512) {
    3cb4:	2380      	movs	r3, #128	; 0x80
    3cb6:	009b      	lsls	r3, r3, #2
    3cb8:	429d      	cmp	r5, r3
    3cba:	d803      	bhi.n	3cc4 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    3cbc:	2206      	movs	r2, #6
    3cbe:	ab01      	add	r3, sp, #4
    3cc0:	705a      	strb	r2, [r3, #1]
    3cc2:	e006      	b.n	3cd2 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 1023) {
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
	} else {
		return false;
    3cc4:	2300      	movs	r3, #0
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
	} else if(MaxEndpointSize <= 256) {
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
	} else if(MaxEndpointSize <= 512) {
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
	} else if(MaxEndpointSize <= 1023) {
    3cc6:	4a1e      	ldr	r2, [pc, #120]	; (3d40 <udd_ep_alloc+0xec>)
    3cc8:	4295      	cmp	r5, r2
    3cca:	d833      	bhi.n	3d34 <udd_ep_alloc+0xe0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    3ccc:	2207      	movs	r2, #7
    3cce:	ab01      	add	r3, sp, #4
    3cd0:	705a      	strb	r2, [r3, #1]
	} else {
		return false;
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    3cd2:	1c30      	adds	r0, r6, #0
    3cd4:	4b1b      	ldr	r3, [pc, #108]	; (3d44 <udd_ep_alloc+0xf0>)
    3cd6:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    3cd8:	8205      	strh	r5, [r0, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    3cda:	2103      	movs	r1, #3
    3cdc:	4021      	ands	r1, r4

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    3cde:	2901      	cmp	r1, #1
    3ce0:	d103      	bne.n	3cea <udd_ep_alloc+0x96>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3ce2:	2202      	movs	r2, #2
    3ce4:	ab01      	add	r3, sp, #4
    3ce6:	70da      	strb	r2, [r3, #3]
    3ce8:	e00b      	b.n	3d02 <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    3cea:	2902      	cmp	r1, #2
    3cec:	d103      	bne.n	3cf6 <udd_ep_alloc+0xa2>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    3cee:	2203      	movs	r2, #3
    3cf0:	ab01      	add	r3, sp, #4
    3cf2:	70da      	strb	r2, [r3, #3]
    3cf4:	e005      	b.n	3d02 <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
	} else {
		return false;
    3cf6:	2300      	movs	r3, #0
	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    3cf8:	2903      	cmp	r1, #3
    3cfa:	d11b      	bne.n	3d34 <udd_ep_alloc+0xe0>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    3cfc:	2204      	movs	r2, #4
    3cfe:	ab01      	add	r3, sp, #4
    3d00:	70da      	strb	r2, [r3, #3]
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3d02:	4811      	ldr	r0, [pc, #68]	; (3d48 <udd_ep_alloc+0xf4>)
    3d04:	a901      	add	r1, sp, #4
    3d06:	4b11      	ldr	r3, [pc, #68]	; (3d4c <udd_ep_alloc+0xf8>)
    3d08:	4798      	blx	r3
		return false;
    3d0a:	2300      	movs	r3, #0
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3d0c:	2800      	cmp	r0, #0
    3d0e:	d111      	bne.n	3d34 <udd_ep_alloc+0xe0>
		return false;
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3d10:	4c0d      	ldr	r4, [pc, #52]	; (3d48 <udd_ep_alloc+0xf4>)
    3d12:	210f      	movs	r1, #15
    3d14:	4031      	ands	r1, r6
    3d16:	1c20      	adds	r0, r4, #0
    3d18:	2200      	movs	r2, #0
    3d1a:	4b0d      	ldr	r3, [pc, #52]	; (3d50 <udd_ep_alloc+0xfc>)
    3d1c:	4d0d      	ldr	r5, [pc, #52]	; (3d54 <udd_ep_alloc+0x100>)
    3d1e:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3d20:	1c20      	adds	r0, r4, #0
    3d22:	1c31      	adds	r1, r6, #0
    3d24:	2200      	movs	r2, #0
    3d26:	4d0c      	ldr	r5, [pc, #48]	; (3d58 <udd_ep_alloc+0x104>)
    3d28:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3d2a:	1c20      	adds	r0, r4, #0
    3d2c:	1c31      	adds	r1, r6, #0
    3d2e:	2201      	movs	r2, #1
    3d30:	47a8      	blx	r5

	return true;
    3d32:	2301      	movs	r3, #1
}
    3d34:	1c18      	adds	r0, r3, #0
    3d36:	b003      	add	sp, #12
    3d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	00004581 	.word	0x00004581
    3d40:	000003ff 	.word	0x000003ff
    3d44:	000035cd 	.word	0x000035cd
    3d48:	20000920 	.word	0x20000920
    3d4c:	00004591 	.word	0x00004591
    3d50:	000035e9 	.word	0x000035e9
    3d54:	00004379 	.word	0x00004379
    3d58:	000043c9 	.word	0x000043c9

00003d5c <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    3d5c:	b508      	push	{r3, lr}
    3d5e:	1c01      	adds	r1, r0, #0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3d60:	4801      	ldr	r0, [pc, #4]	; (3d68 <udd_ep_is_halted+0xc>)
    3d62:	4b02      	ldr	r3, [pc, #8]	; (3d6c <udd_ep_is_halted+0x10>)
    3d64:	4798      	blx	r3
}
    3d66:	bd08      	pop	{r3, pc}
    3d68:	20000920 	.word	0x20000920
    3d6c:	0000481d 	.word	0x0000481d

00003d70 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    3d70:	b510      	push	{r4, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    3d72:	230f      	movs	r3, #15
    3d74:	4003      	ands	r3, r0
		return false;
    3d76:	2200      	movs	r2, #0

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    3d78:	2b03      	cmp	r3, #3
    3d7a:	d808      	bhi.n	3d8e <udd_ep_set_halt+0x1e>
    3d7c:	1c04      	adds	r4, r0, #0
		return false;
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    3d7e:	4805      	ldr	r0, [pc, #20]	; (3d94 <udd_ep_set_halt+0x24>)
    3d80:	1c21      	adds	r1, r4, #0
    3d82:	4b05      	ldr	r3, [pc, #20]	; (3d98 <udd_ep_set_halt+0x28>)
    3d84:	4798      	blx	r3

	udd_ep_abort(ep);
    3d86:	1c20      	adds	r0, r4, #0
    3d88:	4b04      	ldr	r3, [pc, #16]	; (3d9c <udd_ep_set_halt+0x2c>)
    3d8a:	4798      	blx	r3
	return true;
    3d8c:	2201      	movs	r2, #1
}
    3d8e:	1c10      	adds	r0, r2, #0
    3d90:	bd10      	pop	{r4, pc}
    3d92:	46c0      	nop			; (mov r8, r8)
    3d94:	20000920 	.word	0x20000920
    3d98:	00004849 	.word	0x00004849
    3d9c:	00003b9d 	.word	0x00003b9d

00003da0 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    3da0:	b538      	push	{r3, r4, r5, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    3da2:	4b34      	ldr	r3, [pc, #208]	; (3e74 <_usb_ep0_on_tansfer_ok+0xd4>)
    3da4:	781b      	ldrb	r3, [r3, #0]
    3da6:	2b01      	cmp	r3, #1
    3da8:	d155      	bne.n	3e56 <_usb_ep0_on_tansfer_ok+0xb6>
static void udd_ctrl_out_received(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3daa:	880d      	ldrh	r5, [r1, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3dac:	4b32      	ldr	r3, [pc, #200]	; (3e78 <_usb_ep0_on_tansfer_ok+0xd8>)
    3dae:	899b      	ldrh	r3, [r3, #12]
    3db0:	4a32      	ldr	r2, [pc, #200]	; (3e7c <_usb_ep0_on_tansfer_ok+0xdc>)
    3db2:	8814      	ldrh	r4, [r2, #0]
    3db4:	1962      	adds	r2, r4, r5
    3db6:	4293      	cmp	r3, r2
    3db8:	da01      	bge.n	3dbe <_usb_ep0_on_tansfer_ok+0x1e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3dba:	1b1d      	subs	r5, r3, r4
    3dbc:	b2ad      	uxth	r5, r5
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3dbe:	4b2e      	ldr	r3, [pc, #184]	; (3e78 <_usb_ep0_on_tansfer_ok+0xd8>)
    3dc0:	6898      	ldr	r0, [r3, #8]
    3dc2:	1900      	adds	r0, r0, r4
    3dc4:	492e      	ldr	r1, [pc, #184]	; (3e80 <_usb_ep0_on_tansfer_ok+0xe0>)
    3dc6:	1c2a      	adds	r2, r5, #0
    3dc8:	4b2e      	ldr	r3, [pc, #184]	; (3e84 <_usb_ep0_on_tansfer_ok+0xe4>)
    3dca:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3dcc:	192c      	adds	r4, r5, r4
    3dce:	b2a4      	uxth	r4, r4
    3dd0:	4b2a      	ldr	r3, [pc, #168]	; (3e7c <_usb_ep0_on_tansfer_ok+0xdc>)
    3dd2:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3dd4:	2d40      	cmp	r5, #64	; 0x40
    3dd6:	d106      	bne.n	3de6 <_usb_ep0_on_tansfer_ok+0x46>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3dd8:	4b27      	ldr	r3, [pc, #156]	; (3e78 <_usb_ep0_on_tansfer_ok+0xd8>)
    3dda:	88da      	ldrh	r2, [r3, #6]
    3ddc:	4b2a      	ldr	r3, [pc, #168]	; (3e88 <_usb_ep0_on_tansfer_ok+0xe8>)
    3dde:	881b      	ldrh	r3, [r3, #0]
    3de0:	191b      	adds	r3, r3, r4
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3de2:	429a      	cmp	r2, r3
    3de4:	dc10      	bgt.n	3e08 <_usb_ep0_on_tansfer_ok+0x68>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3de6:	4b24      	ldr	r3, [pc, #144]	; (3e78 <_usb_ep0_on_tansfer_ok+0xd8>)
    3de8:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3dea:	695b      	ldr	r3, [r3, #20]
    3dec:	2b00      	cmp	r3, #0
    3dee:	d008      	beq.n	3e02 <_usb_ep0_on_tansfer_ok+0x62>
			if (!udd_g_ctrlreq.over_under_run()) {
    3df0:	4798      	blx	r3
    3df2:	2800      	cmp	r0, #0
    3df4:	d105      	bne.n	3e02 <_usb_ep0_on_tansfer_ok+0x62>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3df6:	2205      	movs	r2, #5
    3df8:	4b1e      	ldr	r3, [pc, #120]	; (3e74 <_usb_ep0_on_tansfer_ok+0xd4>)
    3dfa:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    3dfc:	4b23      	ldr	r3, [pc, #140]	; (3e8c <_usb_ep0_on_tansfer_ok+0xec>)
    3dfe:	4798      	blx	r3
    3e00:	e036      	b.n	3e70 <_usb_ep0_on_tansfer_ok+0xd0>
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    3e02:	4b23      	ldr	r3, [pc, #140]	; (3e90 <_usb_ep0_on_tansfer_ok+0xf0>)
    3e04:	4798      	blx	r3
    3e06:	e033      	b.n	3e70 <_usb_ep0_on_tansfer_ok+0xd0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3e08:	4b1b      	ldr	r3, [pc, #108]	; (3e78 <_usb_ep0_on_tansfer_ok+0xd8>)
    3e0a:	899b      	ldrh	r3, [r3, #12]
    3e0c:	42a3      	cmp	r3, r4
    3e0e:	d11b      	bne.n	3e48 <_usb_ep0_on_tansfer_ok+0xa8>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    3e10:	4b19      	ldr	r3, [pc, #100]	; (3e78 <_usb_ep0_on_tansfer_ok+0xd8>)
    3e12:	695b      	ldr	r3, [r3, #20]
    3e14:	2b00      	cmp	r3, #0
    3e16:	d106      	bne.n	3e26 <_usb_ep0_on_tansfer_ok+0x86>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3e18:	2205      	movs	r2, #5
    3e1a:	4b16      	ldr	r3, [pc, #88]	; (3e74 <_usb_ep0_on_tansfer_ok+0xd4>)
    3e1c:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    3e1e:	2000      	movs	r0, #0
    3e20:	4b1a      	ldr	r3, [pc, #104]	; (3e8c <_usb_ep0_on_tansfer_ok+0xec>)
    3e22:	4798      	blx	r3
    3e24:	e024      	b.n	3e70 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    3e26:	4798      	blx	r3
    3e28:	2800      	cmp	r0, #0
    3e2a:	d105      	bne.n	3e38 <_usb_ep0_on_tansfer_ok+0x98>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3e2c:	2205      	movs	r2, #5
    3e2e:	4b11      	ldr	r3, [pc, #68]	; (3e74 <_usb_ep0_on_tansfer_ok+0xd4>)
    3e30:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    3e32:	4b16      	ldr	r3, [pc, #88]	; (3e8c <_usb_ep0_on_tansfer_ok+0xec>)
    3e34:	4798      	blx	r3
    3e36:	e01b      	b.n	3e70 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3e38:	4913      	ldr	r1, [pc, #76]	; (3e88 <_usb_ep0_on_tansfer_ok+0xe8>)
    3e3a:	4a10      	ldr	r2, [pc, #64]	; (3e7c <_usb_ep0_on_tansfer_ok+0xdc>)
    3e3c:	8810      	ldrh	r0, [r2, #0]
    3e3e:	880b      	ldrh	r3, [r1, #0]
    3e40:	18c3      	adds	r3, r0, r3
    3e42:	800b      	strh	r3, [r1, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    3e44:	2300      	movs	r3, #0
    3e46:	8013      	strh	r3, [r2, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3e48:	4812      	ldr	r0, [pc, #72]	; (3e94 <_usb_ep0_on_tansfer_ok+0xf4>)
    3e4a:	2100      	movs	r1, #0
    3e4c:	4a0c      	ldr	r2, [pc, #48]	; (3e80 <_usb_ep0_on_tansfer_ok+0xe0>)
    3e4e:	2340      	movs	r3, #64	; 0x40
    3e50:	4c11      	ldr	r4, [pc, #68]	; (3e98 <_usb_ep0_on_tansfer_ok+0xf8>)
    3e52:	47a0      	blx	r4
    3e54:	e00c      	b.n	3e70 <_usb_ep0_on_tansfer_ok+0xd0>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    3e56:	2b02      	cmp	r3, #2
    3e58:	d102      	bne.n	3e60 <_usb_ep0_on_tansfer_ok+0xc0>
			udd_ctrl_in_sent();
    3e5a:	4b10      	ldr	r3, [pc, #64]	; (3e9c <_usb_ep0_on_tansfer_ok+0xfc>)
    3e5c:	4798      	blx	r3
    3e5e:	e007      	b.n	3e70 <_usb_ep0_on_tansfer_ok+0xd0>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    3e60:	4b05      	ldr	r3, [pc, #20]	; (3e78 <_usb_ep0_on_tansfer_ok+0xd8>)
    3e62:	691b      	ldr	r3, [r3, #16]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d000      	beq.n	3e6a <_usb_ep0_on_tansfer_ok+0xca>
				udd_g_ctrlreq.callback();
    3e68:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3e6a:	2200      	movs	r2, #0
    3e6c:	4b01      	ldr	r3, [pc, #4]	; (3e74 <_usb_ep0_on_tansfer_ok+0xd4>)
    3e6e:	701a      	strb	r2, [r3, #0]
		}
}
    3e70:	bd38      	pop	{r3, r4, r5, pc}
    3e72:	46c0      	nop			; (mov r8, r8)
    3e74:	20000748 	.word	0x20000748
    3e78:	20000a88 	.word	0x20000a88
    3e7c:	20000746 	.word	0x20000746
    3e80:	20000aa0 	.word	0x20000aa0
    3e84:	000087fd 	.word	0x000087fd
    3e88:	200006c8 	.word	0x200006c8
    3e8c:	00003d71 	.word	0x00003d71
    3e90:	0000393d 	.word	0x0000393d
    3e94:	20000920 	.word	0x20000920
    3e98:	00004949 	.word	0x00004949
    3e9c:	000039c9 	.word	0x000039c9

00003ea0 <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    3ea0:	b538      	push	{r3, r4, r5, lr}
    3ea2:	1c01      	adds	r1, r0, #0
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    3ea4:	230f      	movs	r3, #15
    3ea6:	4003      	ands	r3, r0
		return false;
    3ea8:	2000      	movs	r0, #0
bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    3eaa:	2b03      	cmp	r3, #3
    3eac:	d813      	bhi.n	3ed6 <udd_ep_clear_halt+0x36>
    3eae:	1c0c      	adds	r4, r1, #0
		return false;
	}
	ptr_job = udd_ep_get_job(ep);
    3eb0:	1c08      	adds	r0, r1, #0
    3eb2:	4b09      	ldr	r3, [pc, #36]	; (3ed8 <udd_ep_clear_halt+0x38>)
    3eb4:	4798      	blx	r3
    3eb6:	1c05      	adds	r5, r0, #0

	usb_device_endpoint_clear_halt(&usb_device, ep);
    3eb8:	4808      	ldr	r0, [pc, #32]	; (3edc <udd_ep_clear_halt+0x3c>)
    3eba:	1c21      	adds	r1, r4, #0
    3ebc:	4b08      	ldr	r3, [pc, #32]	; (3ee0 <udd_ep_clear_halt+0x40>)
    3ebe:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    3ec0:	7cab      	ldrb	r3, [r5, #18]
		ptr_job->busy = false;
		ptr_job->call_nohalt();
	}

	return true;
    3ec2:	2001      	movs	r0, #1
	ptr_job = udd_ep_get_job(ep);

	usb_device_endpoint_clear_halt(&usb_device, ep);

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    3ec4:	07db      	lsls	r3, r3, #31
    3ec6:	d506      	bpl.n	3ed6 <udd_ep_clear_halt+0x36>
		ptr_job->busy = false;
    3ec8:	7cab      	ldrb	r3, [r5, #18]
    3eca:	2201      	movs	r2, #1
    3ecc:	4393      	bics	r3, r2
    3ece:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3ed0:	682b      	ldr	r3, [r5, #0]
    3ed2:	4798      	blx	r3
	}

	return true;
    3ed4:	2001      	movs	r0, #1
}
    3ed6:	bd38      	pop	{r3, r4, r5, pc}
    3ed8:	000035cd 	.word	0x000035cd
    3edc:	20000920 	.word	0x20000920
    3ee0:	00004871 	.word	0x00004871

00003ee4 <udd_ep_run>:
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
}

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    3ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ee6:	b087      	sub	sp, #28
    3ee8:	1c05      	adds	r5, r0, #0
    3eea:	9103      	str	r1, [sp, #12]
    3eec:	9202      	str	r2, [sp, #8]
    3eee:	9301      	str	r3, [sp, #4]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    3ef0:	230f      	movs	r3, #15
    3ef2:	4003      	ands	r3, r0
    3ef4:	1c1e      	adds	r6, r3, #0

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    3ef6:	2400      	movs	r4, #0
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3ef8:	2b03      	cmp	r3, #3
    3efa:	d900      	bls.n	3efe <udd_ep_run+0x1a>
    3efc:	e0c9      	b.n	4092 <udd_ep_run+0x1ae>
    3efe:	4b66      	ldr	r3, [pc, #408]	; (4098 <udd_ep_run+0x1b4>)
    3f00:	4798      	blx	r3
    3f02:	1e04      	subs	r4, r0, #0
    3f04:	d000      	beq.n	3f08 <udd_ep_run+0x24>
    3f06:	e0bf      	b.n	4088 <udd_ep_run+0x1a4>
		return false;
	}

	ptr_job = udd_ep_get_job(ep);
    3f08:	1c28      	adds	r0, r5, #0
    3f0a:	4b64      	ldr	r3, [pc, #400]	; (409c <udd_ep_run+0x1b8>)
    3f0c:	4798      	blx	r3
    3f0e:	1c07      	adds	r7, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f10:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3f14:	425a      	negs	r2, r3
    3f16:	4153      	adcs	r3, r2
    3f18:	9305      	str	r3, [sp, #20]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3f1a:	b672      	cpsid	i
    3f1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3f20:	2200      	movs	r2, #0
    3f22:	4b5f      	ldr	r3, [pc, #380]	; (40a0 <udd_ep_run+0x1bc>)
    3f24:	701a      	strb	r2, [r3, #0]
	return flags;
    3f26:	9a05      	ldr	r2, [sp, #20]

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    3f28:	7c83      	ldrb	r3, [r0, #18]
    3f2a:	07db      	lsls	r3, r3, #31
    3f2c:	d509      	bpl.n	3f42 <udd_ep_run+0x5e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3f2e:	2a00      	cmp	r2, #0
    3f30:	d100      	bne.n	3f34 <udd_ep_run+0x50>
    3f32:	e0ae      	b.n	4092 <udd_ep_run+0x1ae>
		cpu_irq_enable();
    3f34:	2201      	movs	r2, #1
    3f36:	4b5a      	ldr	r3, [pc, #360]	; (40a0 <udd_ep_run+0x1bc>)
    3f38:	701a      	strb	r2, [r3, #0]
    3f3a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3f3e:	b662      	cpsie	i
    3f40:	e0a7      	b.n	4092 <udd_ep_run+0x1ae>
		cpu_irq_restore(flags);
		return false; /* Job already on going */
	}
	ptr_job->busy = true;
    3f42:	7c81      	ldrb	r1, [r0, #18]
    3f44:	2301      	movs	r3, #1
    3f46:	430b      	orrs	r3, r1
    3f48:	7483      	strb	r3, [r0, #18]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3f4a:	2a00      	cmp	r2, #0
    3f4c:	d005      	beq.n	3f5a <udd_ep_run+0x76>
		cpu_irq_enable();
    3f4e:	2201      	movs	r2, #1
    3f50:	4b53      	ldr	r3, [pc, #332]	; (40a0 <udd_ep_run+0x1bc>)
    3f52:	701a      	strb	r2, [r3, #0]
    3f54:	f3bf 8f5f 	dmb	sy
    3f58:	b662      	cpsie	i
	cpu_irq_restore(flags);

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    3f5a:	9b02      	ldr	r3, [sp, #8]
    3f5c:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3f5e:	9b01      	ldr	r3, [sp, #4]
    3f60:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    3f62:	2300      	movs	r3, #0
    3f64:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3f68:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3f6a:	2301      	movs	r3, #1
    3f6c:	9a03      	ldr	r2, [sp, #12]
    3f6e:	4013      	ands	r3, r2
    3f70:	005a      	lsls	r2, r3, #1
    3f72:	7cbb      	ldrb	r3, [r7, #18]
    3f74:	2102      	movs	r1, #2
    3f76:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3f78:	4313      	orrs	r3, r2
    3f7a:	2204      	movs	r2, #4
    3f7c:	4393      	bics	r3, r2
    3f7e:	74bb      	strb	r3, [r7, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    3f80:	b26b      	sxtb	r3, r5
    3f82:	2b00      	cmp	r3, #0
    3f84:	da40      	bge.n	4008 <udd_ep_run+0x124>
		if (0 != ptr_job->buf_size) {
    3f86:	9b01      	ldr	r3, [sp, #4]
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d01d      	beq.n	3fc8 <udd_ep_run+0xe4>
			next_trans = ptr_job->buf_size;
    3f8c:	466b      	mov	r3, sp
    3f8e:	889c      	ldrh	r4, [r3, #4]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3f90:	4b44      	ldr	r3, [pc, #272]	; (40a4 <udd_ep_run+0x1c0>)
    3f92:	429c      	cmp	r4, r3
    3f94:	d906      	bls.n	3fa4 <udd_ep_run+0xc0>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3f96:	8a39      	ldrh	r1, [r7, #16]
    3f98:	1c1c      	adds	r4, r3, #0
    3f9a:	1c18      	adds	r0, r3, #0
    3f9c:	4b42      	ldr	r3, [pc, #264]	; (40a8 <udd_ep_run+0x1c4>)
    3f9e:	4798      	blx	r3

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3fa0:	1a63      	subs	r3, r4, r1
    3fa2:	b29c      	uxth	r4, r3
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3fa4:	7cba      	ldrb	r2, [r7, #18]
    3fa6:	2300      	movs	r3, #0
    3fa8:	0792      	lsls	r2, r2, #30
    3faa:	d506      	bpl.n	3fba <udd_ep_run+0xd6>
					(0 == (next_trans % ptr_job->ep_size));
    3fac:	8a39      	ldrh	r1, [r7, #16]
    3fae:	1c20      	adds	r0, r4, #0
    3fb0:	4b3e      	ldr	r3, [pc, #248]	; (40ac <udd_ep_run+0x1c8>)
    3fb2:	4798      	blx	r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3fb4:	b289      	uxth	r1, r1
    3fb6:	424b      	negs	r3, r1
    3fb8:	414b      	adcs	r3, r1
    3fba:	005b      	lsls	r3, r3, #1
    3fbc:	7cba      	ldrb	r2, [r7, #18]
    3fbe:	2102      	movs	r1, #2
    3fc0:	438a      	bics	r2, r1
    3fc2:	4313      	orrs	r3, r2
    3fc4:	74bb      	strb	r3, [r7, #18]
    3fc6:	e015      	b.n	3ff4 <udd_ep_run+0x110>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    3fc8:	7cbb      	ldrb	r3, [r7, #18]
    3fca:	079b      	lsls	r3, r3, #30
    3fcc:	d505      	bpl.n	3fda <udd_ep_run+0xf6>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3fce:	7cbb      	ldrb	r3, [r7, #18]
    3fd0:	2202      	movs	r2, #2
    3fd2:	4393      	bics	r3, r2
    3fd4:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3fd6:	2400      	movs	r4, #0
    3fd8:	e00c      	b.n	3ff4 <udd_ep_run+0x110>
		} else {
			ptr_job->busy = false;
    3fda:	7cbb      	ldrb	r3, [r7, #18]
    3fdc:	2201      	movs	r2, #1
    3fde:	4393      	bics	r3, r2
    3fe0:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	d051      	beq.n	408c <udd_ep_run+0x1a8>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3fe8:	2000      	movs	r0, #0
    3fea:	2100      	movs	r1, #0
    3fec:	1c2a      	adds	r2, r5, #0
    3fee:	4798      	blx	r3
			}
			return true;
    3ff0:	2401      	movs	r4, #1
    3ff2:	e04e      	b.n	4092 <udd_ep_run+0x1ae>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    3ff4:	482e      	ldr	r0, [pc, #184]	; (40b0 <udd_ep_run+0x1cc>)
    3ff6:	1c31      	adds	r1, r6, #0
    3ff8:	9a02      	ldr	r2, [sp, #8]
    3ffa:	1c23      	adds	r3, r4, #0
    3ffc:	4c2d      	ldr	r4, [pc, #180]	; (40b4 <udd_ep_run+0x1d0>)
    3ffe:	47a0      	blx	r4
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    4000:	4244      	negs	r4, r0
    4002:	4144      	adcs	r4, r0
    4004:	b2e4      	uxtb	r4, r4
    4006:	e044      	b.n	4092 <udd_ep_run+0x1ae>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    4008:	9b01      	ldr	r3, [sp, #4]
    400a:	2b00      	cmp	r3, #0
    400c:	d02f      	beq.n	406e <udd_ep_run+0x18a>
			next_trans = ptr_job->buf_size;
    400e:	466b      	mov	r3, sp
    4010:	889c      	ldrh	r4, [r3, #4]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4012:	4b24      	ldr	r3, [pc, #144]	; (40a4 <udd_ep_run+0x1c0>)
    4014:	429c      	cmp	r4, r3
    4016:	d907      	bls.n	4028 <udd_ep_run+0x144>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    4018:	8a39      	ldrh	r1, [r7, #16]
    401a:	1c1c      	adds	r4, r3, #0
    401c:	1c18      	adds	r0, r3, #0
    401e:	4b22      	ldr	r3, [pc, #136]	; (40a8 <udd_ep_run+0x1c4>)
    4020:	4798      	blx	r3
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4022:	1a63      	subs	r3, r4, r1
    4024:	b29c      	uxth	r4, r3
    4026:	e005      	b.n	4034 <udd_ep_run+0x150>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    4028:	8a39      	ldrh	r1, [r7, #16]
    402a:	1c20      	adds	r0, r4, #0
    402c:	4b1f      	ldr	r3, [pc, #124]	; (40ac <udd_ep_run+0x1c8>)
    402e:	4798      	blx	r3
    4030:	1a63      	subs	r3, r4, r1
    4032:	b29c      	uxth	r4, r3
			}
			if (next_trans < ptr_job->ep_size) {
    4034:	8a3b      	ldrh	r3, [r7, #16]
    4036:	429c      	cmp	r4, r3
    4038:	d20f      	bcs.n	405a <udd_ep_run+0x176>
				ptr_job->b_use_out_cache_buffer = true;
    403a:	7cb9      	ldrb	r1, [r7, #18]
    403c:	2204      	movs	r2, #4
    403e:	430a      	orrs	r2, r1
    4040:	74ba      	strb	r2, [r7, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    4042:	1e72      	subs	r2, r6, #1
    4044:	0192      	lsls	r2, r2, #6
    4046:	491c      	ldr	r1, [pc, #112]	; (40b8 <udd_ep_run+0x1d4>)
    4048:	1852      	adds	r2, r2, r1
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    404a:	4819      	ldr	r0, [pc, #100]	; (40b0 <udd_ep_run+0x1cc>)
    404c:	1c31      	adds	r1, r6, #0
    404e:	4c1b      	ldr	r4, [pc, #108]	; (40bc <udd_ep_run+0x1d8>)
    4050:	47a0      	blx	r4
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    4052:	4244      	negs	r4, r0
    4054:	4144      	adcs	r4, r0
    4056:	b2e4      	uxtb	r4, r4
    4058:	e01b      	b.n	4092 <udd_ep_run+0x1ae>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    405a:	4815      	ldr	r0, [pc, #84]	; (40b0 <udd_ep_run+0x1cc>)
    405c:	1c31      	adds	r1, r6, #0
    405e:	9a02      	ldr	r2, [sp, #8]
    4060:	1c23      	adds	r3, r4, #0
    4062:	4c16      	ldr	r4, [pc, #88]	; (40bc <udd_ep_run+0x1d8>)
    4064:	47a0      	blx	r4
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    4066:	4244      	negs	r4, r0
    4068:	4144      	adcs	r4, r0
    406a:	b2e4      	uxtb	r4, r4
    406c:	e011      	b.n	4092 <udd_ep_run+0x1ae>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    406e:	7cbb      	ldrb	r3, [r7, #18]
    4070:	2201      	movs	r2, #1
    4072:	4393      	bics	r3, r2
    4074:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    4076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4078:	2b00      	cmp	r3, #0
    407a:	d009      	beq.n	4090 <udd_ep_run+0x1ac>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    407c:	2000      	movs	r0, #0
    407e:	2100      	movs	r1, #0
    4080:	1c2a      	adds	r2, r5, #0
    4082:	4798      	blx	r3
			}
			return true;
    4084:	2401      	movs	r4, #1
    4086:	e004      	b.n	4092 <udd_ep_run+0x1ae>
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    4088:	2400      	movs	r4, #0
    408a:	e002      	b.n	4092 <udd_ep_run+0x1ae>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    408c:	2401      	movs	r4, #1
    408e:	e000      	b.n	4092 <udd_ep_run+0x1ae>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    4090:	2401      	movs	r4, #1
		}
	}
}
    4092:	1c20      	adds	r0, r4, #0
    4094:	b007      	add	sp, #28
    4096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4098:	00003d5d 	.word	0x00003d5d
    409c:	000035cd 	.word	0x000035cd
    40a0:	200000e8 	.word	0x200000e8
    40a4:	00001fff 	.word	0x00001fff
    40a8:	00006579 	.word	0x00006579
    40ac:	00006399 	.word	0x00006399
    40b0:	20000920 	.word	0x20000920
    40b4:	000048f9 	.word	0x000048f9
    40b8:	20000860 	.word	0x20000860
    40bc:	00004949 	.word	0x00004949

000040c0 <udd_set_address>:
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    40c0:	4b02      	ldr	r3, [pc, #8]	; (40cc <udd_set_address+0xc>)
    40c2:	681a      	ldr	r2, [r3, #0]
    40c4:	2380      	movs	r3, #128	; 0x80
    40c6:	4318      	orrs	r0, r3
    40c8:	7290      	strb	r0, [r2, #10]

void udd_set_address(uint8_t address)
{
	usb_device_set_address(&usb_device,address);
}
    40ca:	4770      	bx	lr
    40cc:	20000920 	.word	0x20000920

000040d0 <udd_getaddress>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    40d0:	4b02      	ldr	r3, [pc, #8]	; (40dc <udd_getaddress+0xc>)
    40d2:	681b      	ldr	r3, [r3, #0]
    40d4:	7a9b      	ldrb	r3, [r3, #10]
    40d6:	207f      	movs	r0, #127	; 0x7f
    40d8:	4018      	ands	r0, r3

uint8_t udd_getaddress(void)
{
	return usb_device_get_address(&usb_device);
}
    40da:	4770      	bx	lr
    40dc:	20000920 	.word	0x20000920

000040e0 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
    40e0:	b508      	push	{r3, lr}
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    40e2:	4b12      	ldr	r3, [pc, #72]	; (412c <udd_send_remotewakeup+0x4c>)
    40e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    40e6:	069b      	lsls	r3, r3, #26
    40e8:	d406      	bmi.n	40f8 <udd_send_remotewakeup+0x18>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    40ea:	4910      	ldr	r1, [pc, #64]	; (412c <udd_send_remotewakeup+0x4c>)
    40ec:	22d0      	movs	r2, #208	; 0xd0
    40ee:	68cb      	ldr	r3, [r1, #12]
    40f0:	4013      	ands	r3, r2
    40f2:	2bd0      	cmp	r3, #208	; 0xd0
    40f4:	d1fb      	bne.n	40ee <udd_send_remotewakeup+0xe>
    40f6:	e004      	b.n	4102 <udd_send_remotewakeup+0x22>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    40f8:	490c      	ldr	r1, [pc, #48]	; (412c <udd_send_remotewakeup+0x4c>)
    40fa:	2210      	movs	r2, #16
    40fc:	68cb      	ldr	r3, [r1, #12]
    40fe:	421a      	tst	r2, r3
    4100:	d0fc      	beq.n	40fc <udd_send_remotewakeup+0x1c>

void udd_send_remotewakeup(void)
{
	uint32_t try = 5;
	udd_wait_clock_ready();
	udd_sleep_mode(UDD_STATE_IDLE);
    4102:	2003      	movs	r0, #3
    4104:	4b0a      	ldr	r3, [pc, #40]	; (4130 <udd_send_remotewakeup+0x50>)
    4106:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    4108:	4b0a      	ldr	r3, [pc, #40]	; (4134 <udd_send_remotewakeup+0x54>)
    410a:	681a      	ldr	r2, [r3, #0]
    410c:	7b53      	ldrb	r3, [r2, #13]
	while(2 != usb_get_state_machine_status(&usb_device) && try --) {
    410e:	2b02      	cmp	r3, #2
    4110:	d00b      	beq.n	412a <udd_send_remotewakeup+0x4a>
    4112:	2105      	movs	r1, #5
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_send_remote_wake_up(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_UPRSM;
    4114:	2002      	movs	r0, #2
    4116:	8913      	ldrh	r3, [r2, #8]
    4118:	4303      	orrs	r3, r0
    411a:	b29b      	uxth	r3, r3
    411c:	8113      	strh	r3, [r2, #8]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	return module_inst->hw->DEVICE.FSMSTATUS.reg;
    411e:	7b53      	ldrb	r3, [r2, #13]
    4120:	2b02      	cmp	r3, #2
    4122:	d002      	beq.n	412a <udd_send_remotewakeup+0x4a>
    4124:	3901      	subs	r1, #1
    4126:	2900      	cmp	r1, #0
    4128:	d1f5      	bne.n	4116 <udd_send_remotewakeup+0x36>
		usb_device_send_remote_wake_up(&usb_device);
	}
}
    412a:	bd08      	pop	{r3, pc}
    412c:	40000800 	.word	0x40000800
    4130:	00003511 	.word	0x00003511
    4134:	20000920 	.word	0x20000920

00004138 <udd_set_setup_payload>:

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    4138:	4b01      	ldr	r3, [pc, #4]	; (4140 <udd_set_setup_payload+0x8>)
    413a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    413c:	8199      	strh	r1, [r3, #12]
}
    413e:	4770      	bx	lr
    4140:	20000a88 	.word	0x20000a88

00004144 <udd_detach>:
	UDC_RESUME_EVENT();
#endif
}

void udd_detach(void)
{
    4144:	b508      	push	{r3, lr}
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_detach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    4146:	4b05      	ldr	r3, [pc, #20]	; (415c <udd_detach+0x18>)
    4148:	681a      	ldr	r2, [r3, #0]
    414a:	8911      	ldrh	r1, [r2, #8]
    414c:	2301      	movs	r3, #1
    414e:	430b      	orrs	r3, r1
    4150:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    4152:	2001      	movs	r0, #1
    4154:	4b02      	ldr	r3, [pc, #8]	; (4160 <udd_detach+0x1c>)
    4156:	4798      	blx	r3
}
    4158:	bd08      	pop	{r3, pc}
    415a:	46c0      	nop			; (mov r8, r8)
    415c:	20000920 	.word	0x20000920
    4160:	00003511 	.word	0x00003511

00004164 <udd_attach>:

void udd_attach(void)
{
    4164:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    4166:	2003      	movs	r0, #3
    4168:	4b16      	ldr	r3, [pc, #88]	; (41c4 <udd_attach+0x60>)
    416a:	4798      	blx	r3
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    416c:	4c16      	ldr	r4, [pc, #88]	; (41c8 <udd_attach+0x64>)
    416e:	6822      	ldr	r2, [r4, #0]
    4170:	8913      	ldrh	r3, [r2, #8]
    4172:	2101      	movs	r1, #1
    4174:	438b      	bics	r3, r1
    4176:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    4178:	1c20      	adds	r0, r4, #0
    417a:	3103      	adds	r1, #3
    417c:	4a13      	ldr	r2, [pc, #76]	; (41cc <udd_attach+0x68>)
    417e:	4e14      	ldr	r6, [pc, #80]	; (41d0 <udd_attach+0x6c>)
    4180:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    4182:	1c20      	adds	r0, r4, #0
    4184:	2100      	movs	r1, #0
    4186:	4a13      	ldr	r2, [pc, #76]	; (41d4 <udd_attach+0x70>)
    4188:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    418a:	1c20      	adds	r0, r4, #0
    418c:	2101      	movs	r1, #1
    418e:	4a12      	ldr	r2, [pc, #72]	; (41d8 <udd_attach+0x74>)
    4190:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    4192:	1c20      	adds	r0, r4, #0
    4194:	2102      	movs	r1, #2
    4196:	4a11      	ldr	r2, [pc, #68]	; (41dc <udd_attach+0x78>)
    4198:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    419a:	1c20      	adds	r0, r4, #0
    419c:	2104      	movs	r1, #4
    419e:	4d10      	ldr	r5, [pc, #64]	; (41e0 <udd_attach+0x7c>)
    41a0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    41a2:	1c20      	adds	r0, r4, #0
    41a4:	2100      	movs	r1, #0
    41a6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    41a8:	1c20      	adds	r0, r4, #0
    41aa:	2101      	movs	r1, #1
    41ac:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    41ae:	1c20      	adds	r0, r4, #0
    41b0:	2102      	movs	r1, #2
    41b2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    41b4:	1c20      	adds	r0, r4, #0
    41b6:	2106      	movs	r1, #6
    41b8:	4a0a      	ldr	r2, [pc, #40]	; (41e4 <udd_attach+0x80>)
    41ba:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    41bc:	1c20      	adds	r0, r4, #0
    41be:	2106      	movs	r1, #6
    41c0:	47a8      	blx	r5
#endif
}
    41c2:	bd70      	pop	{r4, r5, r6, pc}
    41c4:	00003511 	.word	0x00003511
    41c8:	20000920 	.word	0x20000920
    41cc:	00003b69 	.word	0x00003b69
    41d0:	0000431d 	.word	0x0000431d
    41d4:	00003b55 	.word	0x00003b55
    41d8:	0000388d 	.word	0x0000388d
    41dc:	0000381d 	.word	0x0000381d
    41e0:	0000433d 	.word	0x0000433d
    41e4:	000037c5 	.word	0x000037c5

000041e8 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    41e8:	b508      	push	{r3, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    41ea:	200e      	movs	r0, #14
    41ec:	2100      	movs	r1, #0
    41ee:	4b08      	ldr	r3, [pc, #32]	; (4210 <_uhd_vbus_handler+0x28>)
    41f0:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    41f2:	4b08      	ldr	r3, [pc, #32]	; (4214 <_uhd_vbus_handler+0x2c>)
    41f4:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    41f6:	045b      	lsls	r3, r3, #17
    41f8:	d502      	bpl.n	4200 <_uhd_vbus_handler+0x18>
		udd_attach();
    41fa:	4b07      	ldr	r3, [pc, #28]	; (4218 <_uhd_vbus_handler+0x30>)
    41fc:	4798      	blx	r3
    41fe:	e001      	b.n	4204 <_uhd_vbus_handler+0x1c>
	} else {
		udd_detach();
    4200:	4b06      	ldr	r3, [pc, #24]	; (421c <_uhd_vbus_handler+0x34>)
    4202:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    4204:	200e      	movs	r0, #14
    4206:	2100      	movs	r1, #0
    4208:	4b05      	ldr	r3, [pc, #20]	; (4220 <_uhd_vbus_handler+0x38>)
    420a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    420c:	bd08      	pop	{r3, pc}
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	00001831 	.word	0x00001831
    4214:	41004400 	.word	0x41004400
    4218:	00004165 	.word	0x00004165
    421c:	00004145 	.word	0x00004145
    4220:	00001811 	.word	0x00001811

00004224 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    4224:	b570      	push	{r4, r5, r6, lr}
    4226:	b086      	sub	sp, #24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4228:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    422c:	425a      	negs	r2, r3
    422e:	4153      	adcs	r3, r2
    4230:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4232:	b672      	cpsid	i
    4234:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4238:	2600      	movs	r6, #0
    423a:	4b29      	ldr	r3, [pc, #164]	; (42e0 <udd_enable+0xbc>)
    423c:	701e      	strb	r6, [r3, #0]
	return flags;
    423e:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    4240:	ac05      	add	r4, sp, #20
    4242:	1c20      	adds	r0, r4, #0
    4244:	4b27      	ldr	r3, [pc, #156]	; (42e4 <udd_enable+0xc0>)
    4246:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    4248:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    424a:	4e27      	ldr	r6, [pc, #156]	; (42e8 <udd_enable+0xc4>)
    424c:	1c30      	adds	r0, r6, #0
    424e:	4927      	ldr	r1, [pc, #156]	; (42ec <udd_enable+0xc8>)
    4250:	1c22      	adds	r2, r4, #0
    4252:	4b27      	ldr	r3, [pc, #156]	; (42f0 <udd_enable+0xcc>)
    4254:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    4256:	1c30      	adds	r0, r6, #0
    4258:	4b26      	ldr	r3, [pc, #152]	; (42f4 <udd_enable+0xd0>)
    425a:	4798      	blx	r3
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    425c:	4b26      	ldr	r3, [pc, #152]	; (42f8 <udd_enable+0xd4>)
    425e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4260:	069b      	lsls	r3, r3, #26
    4262:	d406      	bmi.n	4272 <udd_enable+0x4e>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    4264:	4924      	ldr	r1, [pc, #144]	; (42f8 <udd_enable+0xd4>)
    4266:	22d0      	movs	r2, #208	; 0xd0
    4268:	68cb      	ldr	r3, [r1, #12]
    426a:	4013      	ands	r3, r2
    426c:	2bd0      	cmp	r3, #208	; 0xd0
    426e:	d1fb      	bne.n	4268 <udd_enable+0x44>
    4270:	e004      	b.n	427c <udd_enable+0x58>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    4272:	4921      	ldr	r1, [pc, #132]	; (42f8 <udd_enable+0xd4>)
    4274:	2210      	movs	r2, #16
    4276:	68cb      	ldr	r3, [r1, #12]
    4278:	421a      	tst	r2, r3
    427a:	d0fc      	beq.n	4276 <udd_enable+0x52>
	usb_enable(&usb_device);

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    427c:	2001      	movs	r0, #1
    427e:	4b1f      	ldr	r3, [pc, #124]	; (42fc <udd_enable+0xd8>)
    4280:	4798      	blx	r3
static void _usb_vbus_config(void)
{

	/* Initialize EIC for vbus checking */
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    4282:	ac02      	add	r4, sp, #8
    4284:	1c20      	adds	r0, r4, #0
    4286:	4b1e      	ldr	r3, [pc, #120]	; (4300 <udd_enable+0xdc>)
    4288:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    428a:	230e      	movs	r3, #14
    428c:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    428e:	2300      	movs	r3, #0
    4290:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    4292:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    4294:	3303      	adds	r3, #3
    4296:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    4298:	3b02      	subs	r3, #2
    429a:	72a3      	strb	r3, [r4, #10]

	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    429c:	200e      	movs	r0, #14
    429e:	2100      	movs	r1, #0
    42a0:	4b18      	ldr	r3, [pc, #96]	; (4304 <udd_enable+0xe0>)
    42a2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    42a4:	200e      	movs	r0, #14
    42a6:	1c21      	adds	r1, r4, #0
    42a8:	4b17      	ldr	r3, [pc, #92]	; (4308 <udd_enable+0xe4>)
    42aa:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    42ac:	4817      	ldr	r0, [pc, #92]	; (430c <udd_enable+0xe8>)
    42ae:	210e      	movs	r1, #14
    42b0:	2200      	movs	r2, #0
    42b2:	4b17      	ldr	r3, [pc, #92]	; (4310 <udd_enable+0xec>)
    42b4:	4798      	blx	r3
			USB_VBUS_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    42b6:	200e      	movs	r0, #14
    42b8:	2100      	movs	r1, #0
    42ba:	4b16      	ldr	r3, [pc, #88]	; (4314 <udd_enable+0xf0>)
    42bc:	4798      	blx	r3
    42be:	4b16      	ldr	r3, [pc, #88]	; (4318 <udd_enable+0xf4>)
    42c0:	6a1b      	ldr	r3, [r3, #32]

	udd_sleep_mode(UDD_STATE_SUSPEND);

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    42c2:	045b      	lsls	r3, r3, #17
    42c4:	d501      	bpl.n	42ca <udd_enable+0xa6>
		/* USB Attach */
		_uhd_vbus_handler();
    42c6:	4b11      	ldr	r3, [pc, #68]	; (430c <udd_enable+0xe8>)
    42c8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    42ca:	2d00      	cmp	r5, #0
    42cc:	d005      	beq.n	42da <udd_enable+0xb6>
		cpu_irq_enable();
    42ce:	2201      	movs	r2, #1
    42d0:	4b03      	ldr	r3, [pc, #12]	; (42e0 <udd_enable+0xbc>)
    42d2:	701a      	strb	r2, [r3, #0]
    42d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    42d8:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    42da:	b006      	add	sp, #24
    42dc:	bd70      	pop	{r4, r5, r6, pc}
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	200000e8 	.word	0x200000e8
    42e4:	00004f79 	.word	0x00004f79
    42e8:	20000920 	.word	0x20000920
    42ec:	41005000 	.word	0x41005000
    42f0:	00004f89 	.word	0x00004f89
    42f4:	000049c5 	.word	0x000049c5
    42f8:	40000800 	.word	0x40000800
    42fc:	00003511 	.word	0x00003511
    4300:	0000193d 	.word	0x0000193d
    4304:	00001831 	.word	0x00001831
    4308:	00001951 	.word	0x00001951
    430c:	000041e9 	.word	0x000041e9
    4310:	000017e5 	.word	0x000017e5
    4314:	00001811 	.word	0x00001811
    4318:	41004400 	.word	0x41004400

0000431c <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    431c:	1c0b      	adds	r3, r1, #0
    431e:	332e      	adds	r3, #46	; 0x2e
    4320:	009b      	lsls	r3, r3, #2
    4322:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    4324:	0049      	lsls	r1, r1, #1
    4326:	22aa      	movs	r2, #170	; 0xaa
    4328:	0052      	lsls	r2, r2, #1
    432a:	4b03      	ldr	r3, [pc, #12]	; (4338 <usb_device_register_callback+0x1c>)
    432c:	5ac9      	ldrh	r1, [r1, r3]
    432e:	5a83      	ldrh	r3, [r0, r2]
    4330:	430b      	orrs	r3, r1
    4332:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    4334:	2000      	movs	r0, #0
    4336:	4770      	bx	lr
    4338:	00008a1c 	.word	0x00008a1c

0000433c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    433c:	0049      	lsls	r1, r1, #1
    433e:	4b06      	ldr	r3, [pc, #24]	; (4358 <usb_device_enable_callback+0x1c>)
    4340:	5acb      	ldrh	r3, [r1, r3]
    4342:	6802      	ldr	r2, [r0, #0]
    4344:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    4346:	21ab      	movs	r1, #171	; 0xab
    4348:	0049      	lsls	r1, r1, #1
    434a:	5a42      	ldrh	r2, [r0, r1]
    434c:	431a      	orrs	r2, r3
    434e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    4350:	6802      	ldr	r2, [r0, #0]
    4352:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    4354:	2000      	movs	r0, #0
    4356:	4770      	bx	lr
    4358:	00008a1c 	.word	0x00008a1c

0000435c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    435c:	0049      	lsls	r1, r1, #1
    435e:	4b05      	ldr	r3, [pc, #20]	; (4374 <usb_device_disable_callback+0x18>)
    4360:	5aca      	ldrh	r2, [r1, r3]
    4362:	21ab      	movs	r1, #171	; 0xab
    4364:	0049      	lsls	r1, r1, #1
    4366:	5a43      	ldrh	r3, [r0, r1]
    4368:	4393      	bics	r3, r2
    436a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    436c:	6803      	ldr	r3, [r0, #0]
    436e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    4370:	2000      	movs	r0, #0
    4372:	4770      	bx	lr
    4374:	00008a1c 	.word	0x00008a1c

00004378 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    4378:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    437a:	008c      	lsls	r4, r1, #2
    437c:	18a4      	adds	r4, r4, r2
    437e:	3434      	adds	r4, #52	; 0x34
    4380:	00a4      	lsls	r4, r4, #2
    4382:	1904      	adds	r4, r0, r4
    4384:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    4386:	1841      	adds	r1, r0, r1
    4388:	3159      	adds	r1, #89	; 0x59
    438a:	31ff      	adds	r1, #255	; 0xff
    438c:	7808      	ldrb	r0, [r1, #0]
    438e:	4b03      	ldr	r3, [pc, #12]	; (439c <usb_device_endpoint_register_callback+0x24>)
    4390:	5c9b      	ldrb	r3, [r3, r2]
    4392:	4303      	orrs	r3, r0
    4394:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    4396:	2000      	movs	r0, #0
    4398:	bd10      	pop	{r4, pc}
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	00008a2c 	.word	0x00008a2c

000043a0 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    43a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    43a2:	008b      	lsls	r3, r1, #2
    43a4:	189b      	adds	r3, r3, r2
    43a6:	3334      	adds	r3, #52	; 0x34
    43a8:	009b      	lsls	r3, r3, #2
    43aa:	18c3      	adds	r3, r0, r3
    43ac:	2400      	movs	r4, #0
    43ae:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    43b0:	1841      	adds	r1, r0, r1
    43b2:	3159      	adds	r1, #89	; 0x59
    43b4:	31ff      	adds	r1, #255	; 0xff
    43b6:	4b03      	ldr	r3, [pc, #12]	; (43c4 <usb_device_endpoint_unregister_callback+0x24>)
    43b8:	5c9a      	ldrb	r2, [r3, r2]
    43ba:	780b      	ldrb	r3, [r1, #0]
    43bc:	4393      	bics	r3, r2
    43be:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    43c0:	2000      	movs	r0, #0
    43c2:	bd10      	pop	{r4, pc}
    43c4:	00008a2c 	.word	0x00008a2c

000043c8 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    43c8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    43ca:	230f      	movs	r3, #15
    43cc:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    43ce:	18c4      	adds	r4, r0, r3
    43d0:	3461      	adds	r4, #97	; 0x61
    43d2:	34ff      	adds	r4, #255	; 0xff
    43d4:	7826      	ldrb	r6, [r4, #0]
    43d6:	4d32      	ldr	r5, [pc, #200]	; (44a0 <usb_device_endpoint_enable_callback+0xd8>)
    43d8:	5cad      	ldrb	r5, [r5, r2]
    43da:	4335      	orrs	r5, r6
    43dc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    43de:	2a00      	cmp	r2, #0
    43e0:	d11f      	bne.n	4422 <usb_device_endpoint_enable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    43e2:	2b00      	cmp	r3, #0
    43e4:	d108      	bne.n	43f8 <usb_device_endpoint_enable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    43e6:	015c      	lsls	r4, r3, #5
    43e8:	6805      	ldr	r5, [r0, #0]
    43ea:	46ac      	mov	ip, r5
    43ec:	4464      	add	r4, ip
    43ee:	3409      	adds	r4, #9
    43f0:	34ff      	adds	r4, #255	; 0xff
    43f2:	2503      	movs	r5, #3
    43f4:	7065      	strb	r5, [r4, #1]
    43f6:	e03d      	b.n	4474 <usb_device_endpoint_enable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    43f8:	b24c      	sxtb	r4, r1
    43fa:	2c00      	cmp	r4, #0
    43fc:	da08      	bge.n	4410 <usb_device_endpoint_enable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    43fe:	015c      	lsls	r4, r3, #5
    4400:	6805      	ldr	r5, [r0, #0]
    4402:	46ac      	mov	ip, r5
    4404:	4464      	add	r4, ip
    4406:	3409      	adds	r4, #9
    4408:	34ff      	adds	r4, #255	; 0xff
    440a:	2502      	movs	r5, #2
    440c:	7065      	strb	r5, [r4, #1]
    440e:	e031      	b.n	4474 <usb_device_endpoint_enable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    4410:	015c      	lsls	r4, r3, #5
    4412:	6805      	ldr	r5, [r0, #0]
    4414:	46ac      	mov	ip, r5
    4416:	4464      	add	r4, ip
    4418:	3409      	adds	r4, #9
    441a:	34ff      	adds	r4, #255	; 0xff
    441c:	2501      	movs	r5, #1
    441e:	7065      	strb	r5, [r4, #1]
    4420:	e028      	b.n	4474 <usb_device_endpoint_enable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    4422:	2a01      	cmp	r2, #1
    4424:	d11c      	bne.n	4460 <usb_device_endpoint_enable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    4426:	2b00      	cmp	r3, #0
    4428:	d107      	bne.n	443a <usb_device_endpoint_enable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    442a:	6802      	ldr	r2, [r0, #0]
    442c:	015b      	lsls	r3, r3, #5
    442e:	18d3      	adds	r3, r2, r3
    4430:	3309      	adds	r3, #9
    4432:	33ff      	adds	r3, #255	; 0xff
    4434:	220c      	movs	r2, #12
    4436:	705a      	strb	r2, [r3, #1]
    4438:	e030      	b.n	449c <usb_device_endpoint_enable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    443a:	b249      	sxtb	r1, r1
    443c:	2900      	cmp	r1, #0
    443e:	da07      	bge.n	4450 <usb_device_endpoint_enable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    4440:	6802      	ldr	r2, [r0, #0]
    4442:	015b      	lsls	r3, r3, #5
    4444:	18d3      	adds	r3, r2, r3
    4446:	3309      	adds	r3, #9
    4448:	33ff      	adds	r3, #255	; 0xff
    444a:	2208      	movs	r2, #8
    444c:	705a      	strb	r2, [r3, #1]
    444e:	e025      	b.n	449c <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    4450:	6802      	ldr	r2, [r0, #0]
    4452:	015b      	lsls	r3, r3, #5
    4454:	18d3      	adds	r3, r2, r3
    4456:	3309      	adds	r3, #9
    4458:	33ff      	adds	r3, #255	; 0xff
    445a:	2204      	movs	r2, #4
    445c:	705a      	strb	r2, [r3, #1]
    445e:	e01d      	b.n	449c <usb_device_endpoint_enable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4460:	2a02      	cmp	r2, #2
    4462:	d107      	bne.n	4474 <usb_device_endpoint_enable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4464:	6802      	ldr	r2, [r0, #0]
    4466:	015b      	lsls	r3, r3, #5
    4468:	18d3      	adds	r3, r2, r3
    446a:	3309      	adds	r3, #9
    446c:	33ff      	adds	r3, #255	; 0xff
    446e:	2210      	movs	r2, #16
    4470:	705a      	strb	r2, [r3, #1]
    4472:	e013      	b.n	449c <usb_device_endpoint_enable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4474:	2a03      	cmp	r2, #3
    4476:	d111      	bne.n	449c <usb_device_endpoint_enable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    4478:	b249      	sxtb	r1, r1
    447a:	2900      	cmp	r1, #0
    447c:	da07      	bge.n	448e <usb_device_endpoint_enable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    447e:	6802      	ldr	r2, [r0, #0]
    4480:	015b      	lsls	r3, r3, #5
    4482:	18d3      	adds	r3, r2, r3
    4484:	3309      	adds	r3, #9
    4486:	33ff      	adds	r3, #255	; 0xff
    4488:	2240      	movs	r2, #64	; 0x40
    448a:	705a      	strb	r2, [r3, #1]
    448c:	e006      	b.n	449c <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    448e:	6802      	ldr	r2, [r0, #0]
    4490:	015b      	lsls	r3, r3, #5
    4492:	18d3      	adds	r3, r2, r3
    4494:	3309      	adds	r3, #9
    4496:	33ff      	adds	r3, #255	; 0xff
    4498:	2220      	movs	r2, #32
    449a:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
}
    449c:	2000      	movs	r0, #0
    449e:	bd70      	pop	{r4, r5, r6, pc}
    44a0:	00008a2c 	.word	0x00008a2c

000044a4 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    44a4:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    44a6:	230f      	movs	r3, #15
    44a8:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    44aa:	18c4      	adds	r4, r0, r3
    44ac:	3461      	adds	r4, #97	; 0x61
    44ae:	34ff      	adds	r4, #255	; 0xff
    44b0:	4d32      	ldr	r5, [pc, #200]	; (457c <usb_device_endpoint_disable_callback+0xd8>)
    44b2:	5cae      	ldrb	r6, [r5, r2]
    44b4:	7825      	ldrb	r5, [r4, #0]
    44b6:	43b5      	bics	r5, r6
    44b8:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    44ba:	2a00      	cmp	r2, #0
    44bc:	d11f      	bne.n	44fe <usb_device_endpoint_disable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    44be:	2b00      	cmp	r3, #0
    44c0:	d108      	bne.n	44d4 <usb_device_endpoint_disable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    44c2:	015c      	lsls	r4, r3, #5
    44c4:	6805      	ldr	r5, [r0, #0]
    44c6:	46ac      	mov	ip, r5
    44c8:	4464      	add	r4, ip
    44ca:	3409      	adds	r4, #9
    44cc:	34ff      	adds	r4, #255	; 0xff
    44ce:	2503      	movs	r5, #3
    44d0:	7025      	strb	r5, [r4, #0]
    44d2:	e03d      	b.n	4550 <usb_device_endpoint_disable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    44d4:	b24c      	sxtb	r4, r1
    44d6:	2c00      	cmp	r4, #0
    44d8:	da08      	bge.n	44ec <usb_device_endpoint_disable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    44da:	015c      	lsls	r4, r3, #5
    44dc:	6805      	ldr	r5, [r0, #0]
    44de:	46ac      	mov	ip, r5
    44e0:	4464      	add	r4, ip
    44e2:	3409      	adds	r4, #9
    44e4:	34ff      	adds	r4, #255	; 0xff
    44e6:	2502      	movs	r5, #2
    44e8:	7025      	strb	r5, [r4, #0]
    44ea:	e031      	b.n	4550 <usb_device_endpoint_disable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    44ec:	015c      	lsls	r4, r3, #5
    44ee:	6805      	ldr	r5, [r0, #0]
    44f0:	46ac      	mov	ip, r5
    44f2:	4464      	add	r4, ip
    44f4:	3409      	adds	r4, #9
    44f6:	34ff      	adds	r4, #255	; 0xff
    44f8:	2501      	movs	r5, #1
    44fa:	7025      	strb	r5, [r4, #0]
    44fc:	e028      	b.n	4550 <usb_device_endpoint_disable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    44fe:	2a01      	cmp	r2, #1
    4500:	d11c      	bne.n	453c <usb_device_endpoint_disable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    4502:	2b00      	cmp	r3, #0
    4504:	d107      	bne.n	4516 <usb_device_endpoint_disable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    4506:	6802      	ldr	r2, [r0, #0]
    4508:	015b      	lsls	r3, r3, #5
    450a:	18d3      	adds	r3, r2, r3
    450c:	3309      	adds	r3, #9
    450e:	33ff      	adds	r3, #255	; 0xff
    4510:	220c      	movs	r2, #12
    4512:	701a      	strb	r2, [r3, #0]
    4514:	e030      	b.n	4578 <usb_device_endpoint_disable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    4516:	b249      	sxtb	r1, r1
    4518:	2900      	cmp	r1, #0
    451a:	da07      	bge.n	452c <usb_device_endpoint_disable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    451c:	6802      	ldr	r2, [r0, #0]
    451e:	015b      	lsls	r3, r3, #5
    4520:	18d3      	adds	r3, r2, r3
    4522:	3309      	adds	r3, #9
    4524:	33ff      	adds	r3, #255	; 0xff
    4526:	2208      	movs	r2, #8
    4528:	701a      	strb	r2, [r3, #0]
    452a:	e025      	b.n	4578 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    452c:	6802      	ldr	r2, [r0, #0]
    452e:	015b      	lsls	r3, r3, #5
    4530:	18d3      	adds	r3, r2, r3
    4532:	3309      	adds	r3, #9
    4534:	33ff      	adds	r3, #255	; 0xff
    4536:	2204      	movs	r2, #4
    4538:	701a      	strb	r2, [r3, #0]
    453a:	e01d      	b.n	4578 <usb_device_endpoint_disable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    453c:	2a02      	cmp	r2, #2
    453e:	d107      	bne.n	4550 <usb_device_endpoint_disable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    4540:	6802      	ldr	r2, [r0, #0]
    4542:	015b      	lsls	r3, r3, #5
    4544:	18d3      	adds	r3, r2, r3
    4546:	3309      	adds	r3, #9
    4548:	33ff      	adds	r3, #255	; 0xff
    454a:	2210      	movs	r2, #16
    454c:	701a      	strb	r2, [r3, #0]
    454e:	e013      	b.n	4578 <usb_device_endpoint_disable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4550:	2a03      	cmp	r2, #3
    4552:	d111      	bne.n	4578 <usb_device_endpoint_disable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    4554:	b249      	sxtb	r1, r1
    4556:	2900      	cmp	r1, #0
    4558:	da07      	bge.n	456a <usb_device_endpoint_disable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    455a:	6802      	ldr	r2, [r0, #0]
    455c:	015b      	lsls	r3, r3, #5
    455e:	18d3      	adds	r3, r2, r3
    4560:	3309      	adds	r3, #9
    4562:	33ff      	adds	r3, #255	; 0xff
    4564:	2240      	movs	r2, #64	; 0x40
    4566:	701a      	strb	r2, [r3, #0]
    4568:	e006      	b.n	4578 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    456a:	6802      	ldr	r2, [r0, #0]
    456c:	015b      	lsls	r3, r3, #5
    456e:	18d3      	adds	r3, r2, r3
    4570:	3309      	adds	r3, #9
    4572:	33ff      	adds	r3, #255	; 0xff
    4574:	2220      	movs	r2, #32
    4576:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    4578:	2000      	movs	r0, #0
    457a:	bd70      	pop	{r4, r5, r6, pc}
    457c:	00008a2c 	.word	0x00008a2c

00004580 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    4580:	2300      	movs	r3, #0
    4582:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    4584:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    4586:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    4588:	3301      	adds	r3, #1
    458a:	70c3      	strb	r3, [r0, #3]
}
    458c:	4770      	bx	lr
    458e:	46c0      	nop			; (mov r8, r8)

00004590 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    4590:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    4592:	780a      	ldrb	r2, [r1, #0]
    4594:	230f      	movs	r3, #15
    4596:	4013      	ands	r3, r2
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    4598:	09d4      	lsrs	r4, r2, #7

	switch (ep_config->ep_type) {
    459a:	78ca      	ldrb	r2, [r1, #3]
    459c:	2a04      	cmp	r2, #4
    459e:	d900      	bls.n	45a2 <usb_device_endpoint_set_config+0x12>
    45a0:	e0f0      	b.n	4784 <usb_device_endpoint_set_config+0x1f4>
    45a2:	0092      	lsls	r2, r2, #2
    45a4:	4e8c      	ldr	r6, [pc, #560]	; (47d8 <usb_device_endpoint_set_config+0x248>)
    45a6:	58b2      	ldr	r2, [r6, r2]
    45a8:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    45aa:	6802      	ldr	r2, [r0, #0]
    45ac:	3308      	adds	r3, #8
    45ae:	015b      	lsls	r3, r3, #5
    45b0:	2100      	movs	r1, #0
    45b2:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    45b4:	2200      	movs	r2, #0
    45b6:	e10c      	b.n	47d2 <usb_device_endpoint_set_config+0x242>
    45b8:	015c      	lsls	r4, r3, #5
    45ba:	6802      	ldr	r2, [r0, #0]
    45bc:	4694      	mov	ip, r2
    45be:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    45c0:	2280      	movs	r2, #128	; 0x80
    45c2:	0052      	lsls	r2, r2, #1
    45c4:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    45c6:	3ae4      	subs	r2, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    45c8:	076d      	lsls	r5, r5, #29
    45ca:	d000      	beq.n	45ce <usb_device_endpoint_set_config+0x3e>
    45cc:	e101      	b.n	47d2 <usb_device_endpoint_set_config+0x242>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    45ce:	32e4      	adds	r2, #228	; 0xe4
    45d0:	5ca6      	ldrb	r6, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    45d2:	3ae4      	subs	r2, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    45d4:	2570      	movs	r5, #112	; 0x70
    45d6:	422e      	tst	r6, r5
    45d8:	d000      	beq.n	45dc <usb_device_endpoint_set_config+0x4c>
    45da:	e0fa      	b.n	47d2 <usb_device_endpoint_set_config+0x242>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    45dc:	3d5f      	subs	r5, #95	; 0x5f
    45de:	32e4      	adds	r2, #228	; 0xe4
    45e0:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    45e2:	1c1a      	adds	r2, r3, #0
    45e4:	3208      	adds	r2, #8
    45e6:	0152      	lsls	r2, r2, #5
    45e8:	6804      	ldr	r4, [r0, #0]
    45ea:	18a4      	adds	r4, r4, r2
    45ec:	352f      	adds	r5, #47	; 0x2f
    45ee:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    45f0:	6800      	ldr	r0, [r0, #0]
    45f2:	1882      	adds	r2, r0, r2
    45f4:	2080      	movs	r0, #128	; 0x80
    45f6:	7110      	strb	r0, [r2, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    45f8:	788a      	ldrb	r2, [r1, #2]
    45fa:	2a00      	cmp	r2, #0
    45fc:	d00b      	beq.n	4616 <usb_device_endpoint_set_config+0x86>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    45fe:	015a      	lsls	r2, r3, #5
    4600:	4876      	ldr	r0, [pc, #472]	; (47dc <usb_device_endpoint_set_config+0x24c>)
    4602:	1882      	adds	r2, r0, r2
    4604:	6854      	ldr	r4, [r2, #4]
    4606:	2580      	movs	r5, #128	; 0x80
    4608:	062d      	lsls	r5, r5, #24
    460a:	432c      	orrs	r4, r5
    460c:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    460e:	6950      	ldr	r0, [r2, #20]
    4610:	4328      	orrs	r0, r5
    4612:	6150      	str	r0, [r2, #20]
    4614:	e00a      	b.n	462c <usb_device_endpoint_set_config+0x9c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4616:	015a      	lsls	r2, r3, #5
    4618:	4870      	ldr	r0, [pc, #448]	; (47dc <usb_device_endpoint_set_config+0x24c>)
    461a:	1882      	adds	r2, r0, r2
    461c:	6850      	ldr	r0, [r2, #4]
    461e:	0040      	lsls	r0, r0, #1
    4620:	0840      	lsrs	r0, r0, #1
    4622:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4624:	6950      	ldr	r0, [r2, #20]
    4626:	0040      	lsls	r0, r0, #1
    4628:	0840      	lsrs	r0, r0, #1
    462a:	6150      	str	r0, [r2, #20]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    462c:	2207      	movs	r2, #7
    462e:	7848      	ldrb	r0, [r1, #1]
    4630:	015b      	lsls	r3, r3, #5
    4632:	4c6a      	ldr	r4, [pc, #424]	; (47dc <usb_device_endpoint_set_config+0x24c>)
    4634:	18e3      	adds	r3, r4, r3
    4636:	4010      	ands	r0, r2
    4638:	0704      	lsls	r4, r0, #28
    463a:	6858      	ldr	r0, [r3, #4]
    463c:	4d68      	ldr	r5, [pc, #416]	; (47e0 <usb_device_endpoint_set_config+0x250>)
    463e:	4028      	ands	r0, r5
    4640:	4320      	orrs	r0, r4
    4642:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4644:	7849      	ldrb	r1, [r1, #1]
    4646:	400a      	ands	r2, r1
    4648:	0711      	lsls	r1, r2, #28
    464a:	695a      	ldr	r2, [r3, #20]
    464c:	402a      	ands	r2, r5
    464e:	430a      	orrs	r2, r1
    4650:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    4652:	2200      	movs	r2, #0
    4654:	e0bd      	b.n	47d2 <usb_device_endpoint_set_config+0x242>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    4656:	2c00      	cmp	r4, #0
    4658:	d018      	beq.n	468c <usb_device_endpoint_set_config+0xfc>
    465a:	015d      	lsls	r5, r3, #5
    465c:	6802      	ldr	r2, [r0, #0]
    465e:	4694      	mov	ip, r2
    4660:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4662:	2280      	movs	r2, #128	; 0x80
    4664:	0052      	lsls	r2, r2, #1
    4666:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    4668:	3ae4      	subs	r2, #228	; 0xe4
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    466a:	2670      	movs	r6, #112	; 0x70
    466c:	4237      	tst	r7, r6
    466e:	d000      	beq.n	4672 <usb_device_endpoint_set_config+0xe2>
    4670:	e0af      	b.n	47d2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    4672:	3690      	adds	r6, #144	; 0x90
    4674:	5daf      	ldrb	r7, [r5, r6]
    4676:	3204      	adds	r2, #4
    4678:	433a      	orrs	r2, r7
    467a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    467c:	6800      	ldr	r0, [r0, #0]
    467e:	1c1a      	adds	r2, r3, #0
    4680:	3208      	adds	r2, #8
    4682:	0152      	lsls	r2, r2, #5
    4684:	1882      	adds	r2, r0, r2
    4686:	2080      	movs	r0, #128	; 0x80
    4688:	7110      	strb	r0, [r2, #4]
    468a:	e07b      	b.n	4784 <usb_device_endpoint_set_config+0x1f4>
    468c:	015d      	lsls	r5, r3, #5
    468e:	6802      	ldr	r2, [r0, #0]
    4690:	4694      	mov	ip, r2
    4692:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4694:	2280      	movs	r2, #128	; 0x80
    4696:	0052      	lsls	r2, r2, #1
    4698:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    469a:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    469c:	0776      	lsls	r6, r6, #29
    469e:	d000      	beq.n	46a2 <usb_device_endpoint_set_config+0x112>
    46a0:	e097      	b.n	47d2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    46a2:	2680      	movs	r6, #128	; 0x80
    46a4:	0076      	lsls	r6, r6, #1
    46a6:	5daf      	ldrb	r7, [r5, r6]
    46a8:	3a1a      	subs	r2, #26
    46aa:	433a      	orrs	r2, r7
    46ac:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    46ae:	6800      	ldr	r0, [r0, #0]
    46b0:	1c1a      	adds	r2, r3, #0
    46b2:	3208      	adds	r2, #8
    46b4:	0152      	lsls	r2, r2, #5
    46b6:	1882      	adds	r2, r0, r2
    46b8:	2040      	movs	r0, #64	; 0x40
    46ba:	7150      	strb	r0, [r2, #5]
    46bc:	e062      	b.n	4784 <usb_device_endpoint_set_config+0x1f4>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    46be:	2c00      	cmp	r4, #0
    46c0:	d017      	beq.n	46f2 <usb_device_endpoint_set_config+0x162>
    46c2:	015d      	lsls	r5, r3, #5
    46c4:	6802      	ldr	r2, [r0, #0]
    46c6:	4694      	mov	ip, r2
    46c8:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    46ca:	2280      	movs	r2, #128	; 0x80
    46cc:	0052      	lsls	r2, r2, #1
    46ce:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    46d0:	3ae4      	subs	r2, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    46d2:	2670      	movs	r6, #112	; 0x70
    46d4:	4237      	tst	r7, r6
    46d6:	d17c      	bne.n	47d2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    46d8:	3690      	adds	r6, #144	; 0x90
    46da:	5daf      	ldrb	r7, [r5, r6]
    46dc:	3214      	adds	r2, #20
    46de:	433a      	orrs	r2, r7
    46e0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    46e2:	6800      	ldr	r0, [r0, #0]
    46e4:	1c1a      	adds	r2, r3, #0
    46e6:	3208      	adds	r2, #8
    46e8:	0152      	lsls	r2, r2, #5
    46ea:	1882      	adds	r2, r0, r2
    46ec:	2080      	movs	r0, #128	; 0x80
    46ee:	7110      	strb	r0, [r2, #4]
    46f0:	e048      	b.n	4784 <usb_device_endpoint_set_config+0x1f4>
    46f2:	015d      	lsls	r5, r3, #5
    46f4:	6802      	ldr	r2, [r0, #0]
    46f6:	4694      	mov	ip, r2
    46f8:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    46fa:	2280      	movs	r2, #128	; 0x80
    46fc:	0052      	lsls	r2, r2, #1
    46fe:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    4700:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4702:	0776      	lsls	r6, r6, #29
    4704:	d165      	bne.n	47d2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4706:	2680      	movs	r6, #128	; 0x80
    4708:	0076      	lsls	r6, r6, #1
    470a:	5daf      	ldrb	r7, [r5, r6]
    470c:	3a19      	subs	r2, #25
    470e:	433a      	orrs	r2, r7
    4710:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4712:	6800      	ldr	r0, [r0, #0]
    4714:	1c1a      	adds	r2, r3, #0
    4716:	3208      	adds	r2, #8
    4718:	0152      	lsls	r2, r2, #5
    471a:	1882      	adds	r2, r0, r2
    471c:	2040      	movs	r0, #64	; 0x40
    471e:	7150      	strb	r0, [r2, #5]
    4720:	e030      	b.n	4784 <usb_device_endpoint_set_config+0x1f4>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    4722:	2c00      	cmp	r4, #0
    4724:	d017      	beq.n	4756 <usb_device_endpoint_set_config+0x1c6>
    4726:	015d      	lsls	r5, r3, #5
    4728:	6802      	ldr	r2, [r0, #0]
    472a:	4694      	mov	ip, r2
    472c:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    472e:	2280      	movs	r2, #128	; 0x80
    4730:	0052      	lsls	r2, r2, #1
    4732:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    4734:	3ae4      	subs	r2, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4736:	2670      	movs	r6, #112	; 0x70
    4738:	4237      	tst	r7, r6
    473a:	d14a      	bne.n	47d2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    473c:	3690      	adds	r6, #144	; 0x90
    473e:	5daf      	ldrb	r7, [r5, r6]
    4740:	3224      	adds	r2, #36	; 0x24
    4742:	433a      	orrs	r2, r7
    4744:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4746:	6800      	ldr	r0, [r0, #0]
    4748:	1c1a      	adds	r2, r3, #0
    474a:	3208      	adds	r2, #8
    474c:	0152      	lsls	r2, r2, #5
    474e:	1882      	adds	r2, r0, r2
    4750:	2080      	movs	r0, #128	; 0x80
    4752:	7110      	strb	r0, [r2, #4]
    4754:	e016      	b.n	4784 <usb_device_endpoint_set_config+0x1f4>
    4756:	015d      	lsls	r5, r3, #5
    4758:	6802      	ldr	r2, [r0, #0]
    475a:	4694      	mov	ip, r2
    475c:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    475e:	2280      	movs	r2, #128	; 0x80
    4760:	0052      	lsls	r2, r2, #1
    4762:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    4764:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4766:	0776      	lsls	r6, r6, #29
    4768:	d133      	bne.n	47d2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    476a:	2680      	movs	r6, #128	; 0x80
    476c:	0076      	lsls	r6, r6, #1
    476e:	5daf      	ldrb	r7, [r5, r6]
    4770:	3a18      	subs	r2, #24
    4772:	433a      	orrs	r2, r7
    4774:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4776:	6800      	ldr	r0, [r0, #0]
    4778:	1c1a      	adds	r2, r3, #0
    477a:	3208      	adds	r2, #8
    477c:	0152      	lsls	r2, r2, #5
    477e:	1882      	adds	r2, r0, r2
    4780:	2040      	movs	r0, #64	; 0x40
    4782:	7150      	strb	r0, [r2, #5]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4784:	7848      	ldrb	r0, [r1, #1]
    4786:	005a      	lsls	r2, r3, #1
    4788:	1912      	adds	r2, r2, r4
    478a:	0112      	lsls	r2, r2, #4
    478c:	4d13      	ldr	r5, [pc, #76]	; (47dc <usb_device_endpoint_set_config+0x24c>)
    478e:	18aa      	adds	r2, r5, r2
    4790:	2507      	movs	r5, #7
    4792:	4028      	ands	r0, r5
    4794:	0705      	lsls	r5, r0, #28
    4796:	6856      	ldr	r6, [r2, #4]
    4798:	4811      	ldr	r0, [pc, #68]	; (47e0 <usb_device_endpoint_set_config+0x250>)
    479a:	4030      	ands	r0, r6
    479c:	4328      	orrs	r0, r5
    479e:	6050      	str	r0, [r2, #4]

	if (true == ep_config->auto_zlp) {
    47a0:	788a      	ldrb	r2, [r1, #2]
    47a2:	2a00      	cmp	r2, #0
    47a4:	d00b      	beq.n	47be <usb_device_endpoint_set_config+0x22e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    47a6:	005b      	lsls	r3, r3, #1
    47a8:	191a      	adds	r2, r3, r4
    47aa:	0112      	lsls	r2, r2, #4
    47ac:	4c0b      	ldr	r4, [pc, #44]	; (47dc <usb_device_endpoint_set_config+0x24c>)
    47ae:	18a2      	adds	r2, r4, r2
    47b0:	6853      	ldr	r3, [r2, #4]
    47b2:	2180      	movs	r1, #128	; 0x80
    47b4:	0609      	lsls	r1, r1, #24
    47b6:	430b      	orrs	r3, r1
    47b8:	6053      	str	r3, [r2, #4]
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    47ba:	2200      	movs	r2, #0
    47bc:	e009      	b.n	47d2 <usb_device_endpoint_set_config+0x242>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;

	if (true == ep_config->auto_zlp) {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    47be:	005b      	lsls	r3, r3, #1
    47c0:	191b      	adds	r3, r3, r4
    47c2:	011b      	lsls	r3, r3, #4
    47c4:	4a05      	ldr	r2, [pc, #20]	; (47dc <usb_device_endpoint_set_config+0x24c>)
    47c6:	18d3      	adds	r3, r2, r3
    47c8:	685a      	ldr	r2, [r3, #4]
    47ca:	0052      	lsls	r2, r2, #1
    47cc:	0852      	lsrs	r2, r2, #1
    47ce:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    47d0:	2200      	movs	r2, #0
}
    47d2:	1c10      	adds	r0, r2, #0
    47d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47d6:	46c0      	nop			; (mov r8, r8)
    47d8:	00008a08 	.word	0x00008a08
    47dc:	20000ae0 	.word	0x20000ae0
    47e0:	8fffffff 	.word	0x8fffffff

000047e4 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    47e4:	230f      	movs	r3, #15
    47e6:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    47e8:	b249      	sxtb	r1, r1
    47ea:	2900      	cmp	r1, #0
    47ec:	da0a      	bge.n	4804 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    47ee:	3308      	adds	r3, #8
    47f0:	015b      	lsls	r3, r3, #5
    47f2:	6802      	ldr	r2, [r0, #0]
    47f4:	18d2      	adds	r2, r2, r3
    47f6:	2180      	movs	r1, #128	; 0x80
    47f8:	7111      	strb	r1, [r2, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    47fa:	6802      	ldr	r2, [r0, #0]
    47fc:	18d3      	adds	r3, r2, r3
    47fe:	2202      	movs	r2, #2
    4800:	71da      	strb	r2, [r3, #7]
    4802:	e009      	b.n	4818 <usb_device_endpoint_abort_job+0x34>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4804:	3308      	adds	r3, #8
    4806:	015b      	lsls	r3, r3, #5
    4808:	6802      	ldr	r2, [r0, #0]
    480a:	18d2      	adds	r2, r2, r3
    480c:	2140      	movs	r1, #64	; 0x40
    480e:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4810:	6802      	ldr	r2, [r0, #0]
    4812:	18d3      	adds	r3, r2, r3
    4814:	2201      	movs	r2, #1
    4816:	71da      	strb	r2, [r3, #7]
	}
}
    4818:	4770      	bx	lr
    481a:	46c0      	nop			; (mov r8, r8)

0000481c <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    481c:	230f      	movs	r3, #15
    481e:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4820:	b249      	sxtb	r1, r1
    4822:	2900      	cmp	r1, #0
    4824:	da07      	bge.n	4836 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4826:	6802      	ldr	r2, [r0, #0]
    4828:	3308      	adds	r3, #8
    482a:	015b      	lsls	r3, r3, #5
    482c:	18d3      	adds	r3, r2, r3
    482e:	7998      	ldrb	r0, [r3, #6]
    4830:	0680      	lsls	r0, r0, #26
    4832:	0fc0      	lsrs	r0, r0, #31
    4834:	e006      	b.n	4844 <usb_device_endpoint_is_halted+0x28>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    4836:	6802      	ldr	r2, [r0, #0]
    4838:	3308      	adds	r3, #8
    483a:	015b      	lsls	r3, r3, #5
    483c:	18d3      	adds	r3, r2, r3
    483e:	7998      	ldrb	r0, [r3, #6]
    4840:	06c0      	lsls	r0, r0, #27
    4842:	0fc0      	lsrs	r0, r0, #31
	}
}
    4844:	4770      	bx	lr
    4846:	46c0      	nop			; (mov r8, r8)

00004848 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4848:	230f      	movs	r3, #15
    484a:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    484c:	b249      	sxtb	r1, r1
    484e:	2900      	cmp	r1, #0
    4850:	da06      	bge.n	4860 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4852:	6802      	ldr	r2, [r0, #0]
    4854:	3308      	adds	r3, #8
    4856:	015b      	lsls	r3, r3, #5
    4858:	18d3      	adds	r3, r2, r3
    485a:	2220      	movs	r2, #32
    485c:	715a      	strb	r2, [r3, #5]
    485e:	e005      	b.n	486c <usb_device_endpoint_set_halt+0x24>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4860:	6802      	ldr	r2, [r0, #0]
    4862:	3308      	adds	r3, #8
    4864:	015b      	lsls	r3, r3, #5
    4866:	18d3      	adds	r3, r2, r3
    4868:	2210      	movs	r2, #16
    486a:	715a      	strb	r2, [r3, #5]
	}
}
    486c:	4770      	bx	lr
    486e:	46c0      	nop			; (mov r8, r8)

00004870 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    4870:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4872:	230f      	movs	r3, #15
    4874:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4876:	b249      	sxtb	r1, r1
    4878:	2900      	cmp	r1, #0
    487a:	da1e      	bge.n	48ba <usb_device_endpoint_clear_halt+0x4a>
    487c:	0159      	lsls	r1, r3, #5
    487e:	6802      	ldr	r2, [r0, #0]
    4880:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4882:	2483      	movs	r4, #131	; 0x83
    4884:	0064      	lsls	r4, r4, #1
    4886:	5d14      	ldrb	r4, [r2, r4]
    4888:	06a4      	lsls	r4, r4, #26
    488a:	d534      	bpl.n	48f6 <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    488c:	2520      	movs	r5, #32
    488e:	2482      	movs	r4, #130	; 0x82
    4890:	0064      	lsls	r4, r4, #1
    4892:	5515      	strb	r5, [r2, r4]
    4894:	6802      	ldr	r2, [r0, #0]
    4896:	4694      	mov	ip, r2
    4898:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    489a:	2208      	movs	r2, #8
    489c:	32ff      	adds	r2, #255	; 0xff
    489e:	5c8a      	ldrb	r2, [r1, r2]
    48a0:	0652      	lsls	r2, r2, #25
    48a2:	d528      	bpl.n	48f6 <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    48a4:	3cc4      	subs	r4, #196	; 0xc4
    48a6:	2208      	movs	r2, #8
    48a8:	32ff      	adds	r2, #255	; 0xff
    48aa:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    48ac:	6802      	ldr	r2, [r0, #0]
    48ae:	3308      	adds	r3, #8
    48b0:	015b      	lsls	r3, r3, #5
    48b2:	18d3      	adds	r3, r2, r3
    48b4:	2202      	movs	r2, #2
    48b6:	711a      	strb	r2, [r3, #4]
    48b8:	e01d      	b.n	48f6 <usb_device_endpoint_clear_halt+0x86>
    48ba:	0159      	lsls	r1, r3, #5
    48bc:	6802      	ldr	r2, [r0, #0]
    48be:	1852      	adds	r2, r2, r1
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    48c0:	2483      	movs	r4, #131	; 0x83
    48c2:	0064      	lsls	r4, r4, #1
    48c4:	5d14      	ldrb	r4, [r2, r4]
    48c6:	06e4      	lsls	r4, r4, #27
    48c8:	d515      	bpl.n	48f6 <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    48ca:	2510      	movs	r5, #16
    48cc:	2482      	movs	r4, #130	; 0x82
    48ce:	0064      	lsls	r4, r4, #1
    48d0:	5515      	strb	r5, [r2, r4]
    48d2:	6802      	ldr	r2, [r0, #0]
    48d4:	4694      	mov	ip, r2
    48d6:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    48d8:	2208      	movs	r2, #8
    48da:	32ff      	adds	r2, #255	; 0xff
    48dc:	5c8a      	ldrb	r2, [r1, r2]
    48de:	0692      	lsls	r2, r2, #26
    48e0:	d509      	bpl.n	48f6 <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    48e2:	3ce4      	subs	r4, #228	; 0xe4
    48e4:	2208      	movs	r2, #8
    48e6:	32ff      	adds	r2, #255	; 0xff
    48e8:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    48ea:	6802      	ldr	r2, [r0, #0]
    48ec:	3308      	adds	r3, #8
    48ee:	015b      	lsls	r3, r3, #5
    48f0:	18d3      	adds	r3, r2, r3
    48f2:	2201      	movs	r2, #1
    48f4:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    48f6:	bd30      	pop	{r4, r5, pc}

000048f8 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    48f8:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    48fa:	1c0c      	adds	r4, r1, #0
    48fc:	3408      	adds	r4, #8
    48fe:	0164      	lsls	r4, r4, #5
    4900:	6805      	ldr	r5, [r0, #0]
    4902:	5d64      	ldrb	r4, [r4, r5]
    4904:	0664      	lsls	r4, r4, #25
    4906:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4908:	251c      	movs	r5, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    490a:	2c00      	cmp	r4, #0
    490c:	d016      	beq.n	493c <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    490e:	014c      	lsls	r4, r1, #5
    4910:	4d0b      	ldr	r5, [pc, #44]	; (4940 <usb_device_endpoint_write_buffer_job+0x48>)
    4912:	192d      	adds	r5, r5, r4
    4914:	1c2c      	adds	r4, r5, #0
    4916:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4918:	696d      	ldr	r5, [r5, #20]
    491a:	4a0a      	ldr	r2, [pc, #40]	; (4944 <usb_device_endpoint_write_buffer_job+0x4c>)
    491c:	402a      	ands	r2, r5
    491e:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4920:	049b      	lsls	r3, r3, #18
    4922:	0c9a      	lsrs	r2, r3, #18
    4924:	6963      	ldr	r3, [r4, #20]
    4926:	0b9b      	lsrs	r3, r3, #14
    4928:	039b      	lsls	r3, r3, #14
    492a:	4313      	orrs	r3, r2
    492c:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    492e:	6803      	ldr	r3, [r0, #0]
    4930:	3108      	adds	r1, #8
    4932:	0149      	lsls	r1, r1, #5
    4934:	1859      	adds	r1, r3, r1
    4936:	2380      	movs	r3, #128	; 0x80
    4938:	714b      	strb	r3, [r1, #5]

	return STATUS_OK;
    493a:	2500      	movs	r5, #0
}
    493c:	1c28      	adds	r0, r5, #0
    493e:	bd30      	pop	{r4, r5, pc}
    4940:	20000ae0 	.word	0x20000ae0
    4944:	f0003fff 	.word	0xf0003fff

00004948 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4948:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    494a:	1c0c      	adds	r4, r1, #0
    494c:	3408      	adds	r4, #8
    494e:	0164      	lsls	r4, r4, #5
    4950:	6805      	ldr	r5, [r0, #0]
    4952:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4954:	241c      	movs	r4, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4956:	076d      	lsls	r5, r5, #29
    4958:	d015      	beq.n	4986 <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    495a:	4d0c      	ldr	r5, [pc, #48]	; (498c <usb_device_endpoint_read_buffer_job+0x44>)
    495c:	014c      	lsls	r4, r1, #5
    495e:	5162      	str	r2, [r4, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    4960:	192c      	adds	r4, r5, r4
    4962:	049b      	lsls	r3, r3, #18
    4964:	091a      	lsrs	r2, r3, #4
    4966:	6865      	ldr	r5, [r4, #4]
    4968:	4b09      	ldr	r3, [pc, #36]	; (4990 <usb_device_endpoint_read_buffer_job+0x48>)
    496a:	402b      	ands	r3, r5
    496c:	4313      	orrs	r3, r2
    496e:	6063      	str	r3, [r4, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4970:	6863      	ldr	r3, [r4, #4]
    4972:	0b9b      	lsrs	r3, r3, #14
    4974:	039b      	lsls	r3, r3, #14
    4976:	6063      	str	r3, [r4, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4978:	6803      	ldr	r3, [r0, #0]
    497a:	3108      	adds	r1, #8
    497c:	0149      	lsls	r1, r1, #5
    497e:	1859      	adds	r1, r3, r1
    4980:	2340      	movs	r3, #64	; 0x40
    4982:	710b      	strb	r3, [r1, #4]

	return STATUS_OK;
    4984:	2400      	movs	r4, #0
}
    4986:	1c20      	adds	r0, r4, #0
    4988:	bd30      	pop	{r4, r5, pc}
    498a:	46c0      	nop			; (mov r8, r8)
    498c:	20000ae0 	.word	0x20000ae0
    4990:	f0003fff 	.word	0xf0003fff

00004994 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4994:	4b09      	ldr	r3, [pc, #36]	; (49bc <usb_device_endpoint_setup_buffer_job+0x28>)
    4996:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4998:	6859      	ldr	r1, [r3, #4]
    499a:	4a09      	ldr	r2, [pc, #36]	; (49c0 <usb_device_endpoint_setup_buffer_job+0x2c>)
    499c:	400a      	ands	r2, r1
    499e:	2180      	movs	r1, #128	; 0x80
    49a0:	0289      	lsls	r1, r1, #10
    49a2:	430a      	orrs	r2, r1
    49a4:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    49a6:	685a      	ldr	r2, [r3, #4]
    49a8:	0b92      	lsrs	r2, r2, #14
    49aa:	0392      	lsls	r2, r2, #14
    49ac:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    49ae:	6802      	ldr	r2, [r0, #0]
    49b0:	2140      	movs	r1, #64	; 0x40
    49b2:	2382      	movs	r3, #130	; 0x82
    49b4:	005b      	lsls	r3, r3, #1
    49b6:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    49b8:	2000      	movs	r0, #0
    49ba:	4770      	bx	lr
    49bc:	20000ae0 	.word	0x20000ae0
    49c0:	f0003fff 	.word	0xf0003fff

000049c4 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    49c4:	6802      	ldr	r2, [r0, #0]
    49c6:	7811      	ldrb	r1, [r2, #0]
    49c8:	2302      	movs	r3, #2
    49ca:	430b      	orrs	r3, r1
    49cc:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    49ce:	6802      	ldr	r2, [r0, #0]
    49d0:	7893      	ldrb	r3, [r2, #2]
    49d2:	2b02      	cmp	r3, #2
    49d4:	d0fc      	beq.n	49d0 <usb_enable+0xc>
}
    49d6:	4770      	bx	lr

000049d8 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    49d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49da:	465f      	mov	r7, fp
    49dc:	4656      	mov	r6, sl
    49de:	464d      	mov	r5, r9
    49e0:	4644      	mov	r4, r8
    49e2:	b4f0      	push	{r4, r5, r6, r7}
    49e4:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    49e6:	4bc8      	ldr	r3, [pc, #800]	; (4d08 <USB_Handler+0x330>)
    49e8:	681f      	ldr	r7, [r3, #0]
    49ea:	683d      	ldr	r5, [r7, #0]
    49ec:	782b      	ldrb	r3, [r5, #0]
    49ee:	09db      	lsrs	r3, r3, #7
    49f0:	d100      	bne.n	49f4 <USB_Handler+0x1c>
    49f2:	e154      	b.n	4c9e <USB_Handler+0x2c6>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    49f4:	8c28      	ldrh	r0, [r5, #32]
    49f6:	b280      	uxth	r0, r0
    49f8:	4bc4      	ldr	r3, [pc, #784]	; (4d0c <USB_Handler+0x334>)
    49fa:	4798      	blx	r3
    49fc:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    49fe:	2c1f      	cmp	r4, #31
    4a00:	d900      	bls.n	4a04 <USB_Handler+0x2c>
    4a02:	e0d2      	b.n	4baa <USB_Handler+0x1d2>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4a04:	1c03      	adds	r3, r0, #0
    4a06:	3308      	adds	r3, #8
    4a08:	015b      	lsls	r3, r3, #5
    4a0a:	18ed      	adds	r5, r5, r3
    4a0c:	79ed      	ldrb	r5, [r5, #7]
    4a0e:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4a10:	07ab      	lsls	r3, r5, #30
    4a12:	d050      	beq.n	4ab6 <USB_Handler+0xde>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4a14:	4abe      	ldr	r2, [pc, #760]	; (4d10 <USB_Handler+0x338>)
    4a16:	2301      	movs	r3, #1
    4a18:	4083      	lsls	r3, r0
    4a1a:	6811      	ldr	r1, [r2, #0]
    4a1c:	4399      	bics	r1, r3
    4a1e:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4a20:	1c03      	adds	r3, r0, #0
    4a22:	3308      	adds	r3, #8
    4a24:	015b      	lsls	r3, r3, #5
    4a26:	683a      	ldr	r2, [r7, #0]
    4a28:	4694      	mov	ip, r2
    4a2a:	4463      	add	r3, ip
    4a2c:	2203      	movs	r2, #3
    4a2e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4a30:	183b      	adds	r3, r7, r0
    4a32:	33a8      	adds	r3, #168	; 0xa8
    4a34:	799b      	ldrb	r3, [r3, #6]
    4a36:	07db      	lsls	r3, r3, #31
    4a38:	d53d      	bpl.n	4ab6 <USB_Handler+0xde>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    4a3a:	4bb6      	ldr	r3, [pc, #728]	; (4d14 <USB_Handler+0x33c>)
    4a3c:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4a3e:	683a      	ldr	r2, [r7, #0]
    4a40:	1c03      	adds	r3, r0, #0
    4a42:	3308      	adds	r3, #8
    4a44:	015b      	lsls	r3, r3, #5
    4a46:	5c9b      	ldrb	r3, [r3, r2]
    4a48:	2203      	movs	r2, #3
    4a4a:	4013      	ands	r3, r2
    4a4c:	2b01      	cmp	r3, #1
    4a4e:	d110      	bne.n	4a72 <USB_Handler+0x9a>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4a50:	0142      	lsls	r2, r0, #5
    4a52:	4bb1      	ldr	r3, [pc, #708]	; (4d18 <USB_Handler+0x340>)
    4a54:	189b      	adds	r3, r3, r2
    4a56:	685a      	ldr	r2, [r3, #4]
    4a58:	0492      	lsls	r2, r2, #18
    4a5a:	0c92      	lsrs	r2, r2, #18
    4a5c:	49ad      	ldr	r1, [pc, #692]	; (4d14 <USB_Handler+0x33c>)
    4a5e:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4a60:	685a      	ldr	r2, [r3, #4]
    4a62:	0112      	lsls	r2, r2, #4
    4a64:	0c92      	lsrs	r2, r2, #18
    4a66:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4a68:	685a      	ldr	r2, [r3, #4]
    4a6a:	0b92      	lsrs	r2, r2, #14
    4a6c:	0392      	lsls	r2, r2, #14
    4a6e:	605a      	str	r2, [r3, #4]
    4a70:	e019      	b.n	4aa6 <USB_Handler+0xce>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4a72:	0143      	lsls	r3, r0, #5
    4a74:	4aa8      	ldr	r2, [pc, #672]	; (4d18 <USB_Handler+0x340>)
    4a76:	18d3      	adds	r3, r2, r3
    4a78:	685a      	ldr	r2, [r3, #4]
    4a7a:	0112      	lsls	r2, r2, #4
    4a7c:	0c92      	lsrs	r2, r2, #18
    4a7e:	48a5      	ldr	r0, [pc, #660]	; (4d14 <USB_Handler+0x33c>)
    4a80:	8042      	strh	r2, [r0, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4a82:	6859      	ldr	r1, [r3, #4]
    4a84:	0489      	lsls	r1, r1, #18
    4a86:	0c89      	lsrs	r1, r1, #18
    4a88:	8081      	strh	r1, [r0, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4a8a:	6858      	ldr	r0, [r3, #4]
    4a8c:	49a3      	ldr	r1, [pc, #652]	; (4d1c <USB_Handler+0x344>)
    4a8e:	4001      	ands	r1, r0
    4a90:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    4a92:	2a00      	cmp	r2, #0
    4a94:	d107      	bne.n	4aa6 <USB_Handler+0xce>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4a96:	0163      	lsls	r3, r4, #5
    4a98:	4a9f      	ldr	r2, [pc, #636]	; (4d18 <USB_Handler+0x340>)
    4a9a:	18d3      	adds	r3, r2, r3
    4a9c:	685b      	ldr	r3, [r3, #4]
    4a9e:	049b      	lsls	r3, r3, #18
    4aa0:	0c9b      	lsrs	r3, r3, #18
    4aa2:	4a9c      	ldr	r2, [pc, #624]	; (4d14 <USB_Handler+0x33c>)
    4aa4:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    4aa6:	4b98      	ldr	r3, [pc, #608]	; (4d08 <USB_Handler+0x330>)
    4aa8:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    4aaa:	1ca3      	adds	r3, r4, #2
    4aac:	011b      	lsls	r3, r3, #4
    4aae:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    4ab0:	685b      	ldr	r3, [r3, #4]
    4ab2:	4998      	ldr	r1, [pc, #608]	; (4d14 <USB_Handler+0x33c>)
    4ab4:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    4ab6:	076b      	lsls	r3, r5, #29
    4ab8:	d50e      	bpl.n	4ad8 <USB_Handler+0x100>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4aba:	4a95      	ldr	r2, [pc, #596]	; (4d10 <USB_Handler+0x338>)
    4abc:	2301      	movs	r3, #1
    4abe:	40a3      	lsls	r3, r4
    4ac0:	6811      	ldr	r1, [r2, #0]
    4ac2:	4399      	bics	r1, r3
    4ac4:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4ac6:	4b90      	ldr	r3, [pc, #576]	; (4d08 <USB_Handler+0x330>)
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	681a      	ldr	r2, [r3, #0]
    4acc:	1c23      	adds	r3, r4, #0
    4ace:	3308      	adds	r3, #8
    4ad0:	015b      	lsls	r3, r3, #5
    4ad2:	18d3      	adds	r3, r2, r3
    4ad4:	2204      	movs	r2, #4
    4ad6:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4ad8:	072b      	lsls	r3, r5, #28
    4ada:	d521      	bpl.n	4b20 <USB_Handler+0x148>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4adc:	4a8c      	ldr	r2, [pc, #560]	; (4d10 <USB_Handler+0x338>)
    4ade:	2301      	movs	r3, #1
    4ae0:	40a3      	lsls	r3, r4
    4ae2:	6811      	ldr	r1, [r2, #0]
    4ae4:	4399      	bics	r1, r3
    4ae6:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4ae8:	4b87      	ldr	r3, [pc, #540]	; (4d08 <USB_Handler+0x330>)
    4aea:	6818      	ldr	r0, [r3, #0]
    4aec:	1c23      	adds	r3, r4, #0
    4aee:	3308      	adds	r3, #8
    4af0:	015b      	lsls	r3, r3, #5
    4af2:	6802      	ldr	r2, [r0, #0]
    4af4:	4694      	mov	ip, r2
    4af6:	4463      	add	r3, ip
    4af8:	2208      	movs	r2, #8
    4afa:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4afc:	1903      	adds	r3, r0, r4
    4afe:	33a8      	adds	r3, #168	; 0xa8
    4b00:	799b      	ldrb	r3, [r3, #6]
    4b02:	079b      	lsls	r3, r3, #30
    4b04:	d50c      	bpl.n	4b20 <USB_Handler+0x148>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    4b06:	4983      	ldr	r1, [pc, #524]	; (4d14 <USB_Handler+0x33c>)
    4b08:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    4b0a:	0163      	lsls	r3, r4, #5
    4b0c:	4a82      	ldr	r2, [pc, #520]	; (4d18 <USB_Handler+0x340>)
    4b0e:	18d3      	adds	r3, r2, r3
    4b10:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    4b12:	231f      	movs	r3, #31
    4b14:	4013      	ands	r3, r2
    4b16:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4b18:	0123      	lsls	r3, r4, #4
    4b1a:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    4b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b1e:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4b20:	06eb      	lsls	r3, r5, #27
    4b22:	d522      	bpl.n	4b6a <USB_Handler+0x192>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4b24:	4a7a      	ldr	r2, [pc, #488]	; (4d10 <USB_Handler+0x338>)
    4b26:	2301      	movs	r3, #1
    4b28:	40a3      	lsls	r3, r4
    4b2a:	6811      	ldr	r1, [r2, #0]
    4b2c:	4399      	bics	r1, r3
    4b2e:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4b30:	4b75      	ldr	r3, [pc, #468]	; (4d08 <USB_Handler+0x330>)
    4b32:	6818      	ldr	r0, [r3, #0]
    4b34:	1c23      	adds	r3, r4, #0
    4b36:	3308      	adds	r3, #8
    4b38:	015b      	lsls	r3, r3, #5
    4b3a:	6802      	ldr	r2, [r0, #0]
    4b3c:	4694      	mov	ip, r2
    4b3e:	4463      	add	r3, ip
    4b40:	2210      	movs	r2, #16
    4b42:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4b44:	1903      	adds	r3, r0, r4
    4b46:	33a8      	adds	r3, #168	; 0xa8
    4b48:	799b      	ldrb	r3, [r3, #6]
    4b4a:	075b      	lsls	r3, r3, #29
    4b4c:	d50d      	bpl.n	4b6a <USB_Handler+0x192>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    4b4e:	4a71      	ldr	r2, [pc, #452]	; (4d14 <USB_Handler+0x33c>)
    4b50:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4b52:	0163      	lsls	r3, r4, #5
    4b54:	4970      	ldr	r1, [pc, #448]	; (4d18 <USB_Handler+0x340>)
    4b56:	18cb      	adds	r3, r1, r3
    4b58:	685b      	ldr	r3, [r3, #4]
    4b5a:	011b      	lsls	r3, r3, #4
    4b5c:	0c9b      	lsrs	r3, r3, #18
    4b5e:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4b60:	0123      	lsls	r3, r4, #4
    4b62:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    4b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b66:	2100      	movs	r1, #0
    4b68:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4b6a:	06ab      	lsls	r3, r5, #26
    4b6c:	d400      	bmi.n	4b70 <USB_Handler+0x198>
    4b6e:	e1f8      	b.n	4f62 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4b70:	4a67      	ldr	r2, [pc, #412]	; (4d10 <USB_Handler+0x338>)
    4b72:	2301      	movs	r3, #1
    4b74:	40a3      	lsls	r3, r4
    4b76:	6811      	ldr	r1, [r2, #0]
    4b78:	4399      	bics	r1, r3
    4b7a:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4b7c:	4b62      	ldr	r3, [pc, #392]	; (4d08 <USB_Handler+0x330>)
    4b7e:	6818      	ldr	r0, [r3, #0]
    4b80:	1c23      	adds	r3, r4, #0
    4b82:	3308      	adds	r3, #8
    4b84:	015b      	lsls	r3, r3, #5
    4b86:	6802      	ldr	r2, [r0, #0]
    4b88:	4694      	mov	ip, r2
    4b8a:	4463      	add	r3, ip
    4b8c:	2220      	movs	r2, #32
    4b8e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4b90:	1903      	adds	r3, r0, r4
    4b92:	33a8      	adds	r3, #168	; 0xa8
    4b94:	799b      	ldrb	r3, [r3, #6]
    4b96:	071b      	lsls	r3, r3, #28
    4b98:	d400      	bmi.n	4b9c <USB_Handler+0x1c4>
    4b9a:	e1e2      	b.n	4f62 <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    4b9c:	495d      	ldr	r1, [pc, #372]	; (4d14 <USB_Handler+0x33c>)
    4b9e:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    4ba0:	0124      	lsls	r4, r4, #4
    4ba2:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    4ba4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4ba6:	4798      	blx	r3
    4ba8:	e1db      	b.n	4f62 <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4baa:	8bac      	ldrh	r4, [r5, #28]
    4bac:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4bae:	0763      	lsls	r3, r4, #29
    4bb0:	d508      	bpl.n	4bc4 <USB_Handler+0x1ec>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4bb2:	2304      	movs	r3, #4
    4bb4:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4bb6:	33a1      	adds	r3, #161	; 0xa1
    4bb8:	5cfb      	ldrb	r3, [r7, r3]
    4bba:	07db      	lsls	r3, r3, #31
    4bbc:	d502      	bpl.n	4bc4 <USB_Handler+0x1ec>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	1c38      	adds	r0, r7, #0
    4bc2:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    4bc4:	0723      	lsls	r3, r4, #28
    4bc6:	d50d      	bpl.n	4be4 <USB_Handler+0x20c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    4bc8:	2200      	movs	r2, #0
    4bca:	4b51      	ldr	r3, [pc, #324]	; (4d10 <USB_Handler+0x338>)
    4bcc:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4bce:	4b4e      	ldr	r3, [pc, #312]	; (4d08 <USB_Handler+0x330>)
    4bd0:	6818      	ldr	r0, [r3, #0]
    4bd2:	2308      	movs	r3, #8
    4bd4:	6802      	ldr	r2, [r0, #0]
    4bd6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4bd8:	339d      	adds	r3, #157	; 0x9d
    4bda:	5cc3      	ldrb	r3, [r0, r3]
    4bdc:	079b      	lsls	r3, r3, #30
    4bde:	d501      	bpl.n	4be4 <USB_Handler+0x20c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4be0:	6883      	ldr	r3, [r0, #8]
    4be2:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4be4:	0663      	lsls	r3, r4, #25
    4be6:	d50a      	bpl.n	4bfe <USB_Handler+0x226>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4be8:	4b47      	ldr	r3, [pc, #284]	; (4d08 <USB_Handler+0x330>)
    4bea:	6818      	ldr	r0, [r3, #0]
    4bec:	2340      	movs	r3, #64	; 0x40
    4bee:	6802      	ldr	r2, [r0, #0]
    4bf0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    4bf2:	3365      	adds	r3, #101	; 0x65
    4bf4:	5cc3      	ldrb	r3, [r0, r3]
    4bf6:	06db      	lsls	r3, r3, #27
    4bf8:	d501      	bpl.n	4bfe <USB_Handler+0x226>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4bfa:	6943      	ldr	r3, [r0, #20]
    4bfc:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4bfe:	06a3      	lsls	r3, r4, #26
    4c00:	d50a      	bpl.n	4c18 <USB_Handler+0x240>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4c02:	4b41      	ldr	r3, [pc, #260]	; (4d08 <USB_Handler+0x330>)
    4c04:	6818      	ldr	r0, [r3, #0]
    4c06:	2320      	movs	r3, #32
    4c08:	6802      	ldr	r2, [r0, #0]
    4c0a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4c0c:	3385      	adds	r3, #133	; 0x85
    4c0e:	5cc3      	ldrb	r3, [r0, r3]
    4c10:	071b      	lsls	r3, r3, #28
    4c12:	d501      	bpl.n	4c18 <USB_Handler+0x240>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    4c14:	6903      	ldr	r3, [r0, #16]
    4c16:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4c18:	06e3      	lsls	r3, r4, #27
    4c1a:	d50a      	bpl.n	4c32 <USB_Handler+0x25a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4c1c:	4b3a      	ldr	r3, [pc, #232]	; (4d08 <USB_Handler+0x330>)
    4c1e:	6818      	ldr	r0, [r3, #0]
    4c20:	2310      	movs	r3, #16
    4c22:	6802      	ldr	r2, [r0, #0]
    4c24:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4c26:	3395      	adds	r3, #149	; 0x95
    4c28:	5cc3      	ldrb	r3, [r0, r3]
    4c2a:	075b      	lsls	r3, r3, #29
    4c2c:	d501      	bpl.n	4c32 <USB_Handler+0x25a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4c2e:	68c3      	ldr	r3, [r0, #12]
    4c30:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4c32:	0623      	lsls	r3, r4, #24
    4c34:	d50d      	bpl.n	4c52 <USB_Handler+0x27a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    4c36:	2200      	movs	r2, #0
    4c38:	4b35      	ldr	r3, [pc, #212]	; (4d10 <USB_Handler+0x338>)
    4c3a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4c3c:	4b32      	ldr	r3, [pc, #200]	; (4d08 <USB_Handler+0x330>)
    4c3e:	6818      	ldr	r0, [r3, #0]
    4c40:	2380      	movs	r3, #128	; 0x80
    4c42:	6802      	ldr	r2, [r0, #0]
    4c44:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    4c46:	3325      	adds	r3, #37	; 0x25
    4c48:	5cc3      	ldrb	r3, [r0, r3]
    4c4a:	069b      	lsls	r3, r3, #26
    4c4c:	d501      	bpl.n	4c52 <USB_Handler+0x27a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    4c4e:	6983      	ldr	r3, [r0, #24]
    4c50:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4c52:	05e3      	lsls	r3, r4, #23
    4c54:	d50e      	bpl.n	4c74 <USB_Handler+0x29c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    4c56:	2200      	movs	r2, #0
    4c58:	4b2d      	ldr	r3, [pc, #180]	; (4d10 <USB_Handler+0x338>)
    4c5a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4c5c:	4b2a      	ldr	r3, [pc, #168]	; (4d08 <USB_Handler+0x330>)
    4c5e:	6818      	ldr	r0, [r3, #0]
    4c60:	2380      	movs	r3, #128	; 0x80
    4c62:	005b      	lsls	r3, r3, #1
    4c64:	6802      	ldr	r2, [r0, #0]
    4c66:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4c68:	3b5b      	subs	r3, #91	; 0x5b
    4c6a:	5cc3      	ldrb	r3, [r0, r3]
    4c6c:	065b      	lsls	r3, r3, #25
    4c6e:	d501      	bpl.n	4c74 <USB_Handler+0x29c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4c70:	69c3      	ldr	r3, [r0, #28]
    4c72:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4c74:	05a3      	lsls	r3, r4, #22
    4c76:	d400      	bmi.n	4c7a <USB_Handler+0x2a2>
    4c78:	e173      	b.n	4f62 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    4c7a:	2200      	movs	r2, #0
    4c7c:	4b24      	ldr	r3, [pc, #144]	; (4d10 <USB_Handler+0x338>)
    4c7e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4c80:	4b21      	ldr	r3, [pc, #132]	; (4d08 <USB_Handler+0x330>)
    4c82:	6818      	ldr	r0, [r3, #0]
    4c84:	2380      	movs	r3, #128	; 0x80
    4c86:	009b      	lsls	r3, r3, #2
    4c88:	6802      	ldr	r2, [r0, #0]
    4c8a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4c8c:	3b5c      	subs	r3, #92	; 0x5c
    4c8e:	3bff      	subs	r3, #255	; 0xff
    4c90:	5cc3      	ldrb	r3, [r0, r3]
    4c92:	2b7f      	cmp	r3, #127	; 0x7f
    4c94:	d800      	bhi.n	4c98 <USB_Handler+0x2c0>
    4c96:	e164      	b.n	4f62 <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4c98:	6a03      	ldr	r3, [r0, #32]
    4c9a:	4798      	blx	r3
    4c9c:	e161      	b.n	4f62 <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4c9e:	8c2e      	ldrh	r6, [r5, #32]
    4ca0:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    4ca2:	2e00      	cmp	r6, #0
    4ca4:	d140      	bne.n	4d28 <USB_Handler+0x350>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4ca6:	8bae      	ldrh	r6, [r5, #28]
    4ca8:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    4caa:	23ab      	movs	r3, #171	; 0xab
    4cac:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    4cae:	5afd      	ldrh	r5, [r7, r3]
    4cb0:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    4cb2:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    4cb4:	5afb      	ldrh	r3, [r7, r3]
    4cb6:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4cb8:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    4cba:	4f19      	ldr	r7, [pc, #100]	; (4d20 <USB_Handler+0x348>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4cbc:	4b12      	ldr	r3, [pc, #72]	; (4d08 <USB_Handler+0x330>)
    4cbe:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4cc0:	4698      	mov	r8, r3
    4cc2:	0063      	lsls	r3, r4, #1
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    4cc4:	5bdb      	ldrh	r3, [r3, r7]
    4cc6:	421e      	tst	r6, r3
    4cc8:	d003      	beq.n	4cd2 <USB_Handler+0x2fa>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4cca:	464a      	mov	r2, r9
    4ccc:	6812      	ldr	r2, [r2, #0]
    4cce:	6812      	ldr	r2, [r2, #0]
    4cd0:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    4cd2:	421d      	tst	r5, r3
    4cd4:	d013      	beq.n	4cfe <USB_Handler+0x326>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4cd6:	2c06      	cmp	r4, #6
    4cd8:	d107      	bne.n	4cea <USB_Handler+0x312>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4cda:	4b0f      	ldr	r3, [pc, #60]	; (4d18 <USB_Handler+0x340>)
    4cdc:	891b      	ldrh	r3, [r3, #8]
    4cde:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    4ce0:	2380      	movs	r3, #128	; 0x80
    4ce2:	005b      	lsls	r3, r3, #1
    4ce4:	4013      	ands	r3, r2
    4ce6:	4a0f      	ldr	r2, [pc, #60]	; (4d24 <USB_Handler+0x34c>)
    4ce8:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4cea:	1c23      	adds	r3, r4, #0
    4cec:	332e      	adds	r3, #46	; 0x2e
    4cee:	009b      	lsls	r3, r3, #2
    4cf0:	4642      	mov	r2, r8
    4cf2:	6812      	ldr	r2, [r2, #0]
    4cf4:	589b      	ldr	r3, [r3, r2]
    4cf6:	4642      	mov	r2, r8
    4cf8:	6810      	ldr	r0, [r2, #0]
    4cfa:	490a      	ldr	r1, [pc, #40]	; (4d24 <USB_Handler+0x34c>)
    4cfc:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4cfe:	3401      	adds	r4, #1
    4d00:	2c07      	cmp	r4, #7
    4d02:	d1de      	bne.n	4cc2 <USB_Handler+0x2ea>
    4d04:	e12d      	b.n	4f62 <USB_Handler+0x58a>
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	20000764 	.word	0x20000764
    4d0c:	000065cd 	.word	0x000065cd
    4d10:	20000758 	.word	0x20000758
    4d14:	20000750 	.word	0x20000750
    4d18:	20000ae0 	.word	0x20000ae0
    4d1c:	f0003fff 	.word	0xf0003fff
    4d20:	00008a1c 	.word	0x00008a1c
    4d24:	2000074c 	.word	0x2000074c
    4d28:	1c3c      	adds	r4, r7, #0
    4d2a:	3459      	adds	r4, #89	; 0x59
    4d2c:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    4d2e:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    4d30:	2201      	movs	r2, #1
    4d32:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4d34:	325f      	adds	r2, #95	; 0x5f
    4d36:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4d38:	3a50      	subs	r2, #80	; 0x50
    4d3a:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4d3c:	3a0d      	subs	r2, #13
    4d3e:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4d40:	46b8      	mov	r8, r7
    4d42:	1c2f      	adds	r7, r5, #0
    4d44:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    4d46:	9301      	str	r3, [sp, #4]
    4d48:	1c32      	adds	r2, r6, #0
    4d4a:	411a      	asrs	r2, r3
    4d4c:	4661      	mov	r1, ip
    4d4e:	4211      	tst	r1, r2
    4d50:	d100      	bne.n	4d54 <USB_Handler+0x37c>
    4d52:	e101      	b.n	4f58 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4d54:	1c1a      	adds	r2, r3, #0
    4d56:	3208      	adds	r2, #8
    4d58:	0152      	lsls	r2, r2, #5
    4d5a:	18ba      	adds	r2, r7, r2
    4d5c:	79d2      	ldrb	r2, [r2, #7]
    4d5e:	b2d2      	uxtb	r2, r2
    4d60:	7a21      	ldrb	r1, [r4, #8]
    4d62:	7825      	ldrb	r5, [r4, #0]
    4d64:	4029      	ands	r1, r5
				flags_run = flags &
    4d66:	4011      	ands	r1, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->device_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4d68:	464d      	mov	r5, r9
    4d6a:	4215      	tst	r5, r2
    4d6c:	d02a      	beq.n	4dc4 <USB_Handler+0x3ec>
    4d6e:	1c3d      	adds	r5, r7, #0
    4d70:	4647      	mov	r7, r8
    4d72:	015b      	lsls	r3, r3, #5
    4d74:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4d76:	2308      	movs	r3, #8
    4d78:	33ff      	adds	r3, #255	; 0xff
    4d7a:	5ceb      	ldrb	r3, [r5, r3]
    4d7c:	065b      	lsls	r3, r3, #25
    4d7e:	d509      	bpl.n	4d94 <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4d80:	2240      	movs	r2, #64	; 0x40
    4d82:	2308      	movs	r3, #8
    4d84:	33ff      	adds	r3, #255	; 0xff
    4d86:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4d88:	3b88      	subs	r3, #136	; 0x88
    4d8a:	3bff      	subs	r3, #255	; 0xff
    4d8c:	4303      	orrs	r3, r0
    4d8e:	4a78      	ldr	r2, [pc, #480]	; (4f70 <USB_Handler+0x598>)
    4d90:	7193      	strb	r3, [r2, #6]
    4d92:	e00a      	b.n	4daa <USB_Handler+0x3d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4d94:	2308      	movs	r3, #8
    4d96:	33ff      	adds	r3, #255	; 0xff
    4d98:	5ceb      	ldrb	r3, [r5, r3]
    4d9a:	069b      	lsls	r3, r3, #26
    4d9c:	d505      	bpl.n	4daa <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4d9e:	2220      	movs	r2, #32
    4da0:	2308      	movs	r3, #8
    4da2:	33ff      	adds	r3, #255	; 0xff
    4da4:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4da6:	4b72      	ldr	r3, [pc, #456]	; (4f70 <USB_Handler+0x598>)
    4da8:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4daa:	2360      	movs	r3, #96	; 0x60
    4dac:	420b      	tst	r3, r1
    4dae:	d100      	bne.n	4db2 <USB_Handler+0x3da>
    4db0:	e0d7      	b.n	4f62 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4db2:	9b01      	ldr	r3, [sp, #4]
    4db4:	011b      	lsls	r3, r3, #4
    4db6:	18fb      	adds	r3, r7, r3
    4db8:	33dc      	adds	r3, #220	; 0xdc
    4dba:	685b      	ldr	r3, [r3, #4]
    4dbc:	1c38      	adds	r0, r7, #0
    4dbe:	496c      	ldr	r1, [pc, #432]	; (4f70 <USB_Handler+0x598>)
    4dc0:	4798      	blx	r3
    4dc2:	e0ce      	b.n	4f62 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4dc4:	4655      	mov	r5, sl
    4dc6:	4215      	tst	r5, r2
    4dc8:	d01f      	beq.n	4e0a <USB_Handler+0x432>
    4dca:	1c3d      	adds	r5, r7, #0
    4dcc:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4dce:	9a01      	ldr	r2, [sp, #4]
    4dd0:	1c13      	adds	r3, r2, #0
    4dd2:	3308      	adds	r3, #8
    4dd4:	015b      	lsls	r3, r3, #5
    4dd6:	18ed      	adds	r5, r5, r3
    4dd8:	2310      	movs	r3, #16
    4dda:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4ddc:	18bb      	adds	r3, r7, r2
    4dde:	3361      	adds	r3, #97	; 0x61
    4de0:	33ff      	adds	r3, #255	; 0xff
    4de2:	781b      	ldrb	r3, [r3, #0]
    4de4:	06db      	lsls	r3, r3, #27
    4de6:	d400      	bmi.n	4dea <USB_Handler+0x412>
    4de8:	e0bb      	b.n	4f62 <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4dea:	1c10      	adds	r0, r2, #0
    4dec:	0153      	lsls	r3, r2, #5
    4dee:	4a61      	ldr	r2, [pc, #388]	; (4f74 <USB_Handler+0x59c>)
    4df0:	18d3      	adds	r3, r2, r3
    4df2:	685b      	ldr	r3, [r3, #4]
    4df4:	049b      	lsls	r3, r3, #18
    4df6:	0c9b      	lsrs	r3, r3, #18
    4df8:	495d      	ldr	r1, [pc, #372]	; (4f70 <USB_Handler+0x598>)
    4dfa:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4dfc:	0103      	lsls	r3, r0, #4
    4dfe:	18fb      	adds	r3, r7, r3
    4e00:	33d8      	adds	r3, #216	; 0xd8
    4e02:	685b      	ldr	r3, [r3, #4]
    4e04:	4640      	mov	r0, r8
    4e06:	4798      	blx	r3
    4e08:	e0ab      	b.n	4f62 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4e0a:	465d      	mov	r5, fp
    4e0c:	4215      	tst	r5, r2
    4e0e:	d040      	beq.n	4e92 <USB_Handler+0x4ba>
    4e10:	1c3d      	adds	r5, r7, #0
    4e12:	4647      	mov	r7, r8
    4e14:	4680      	mov	r8, r0
    4e16:	9b01      	ldr	r3, [sp, #4]
    4e18:	015b      	lsls	r3, r3, #5
    4e1a:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4e1c:	2308      	movs	r3, #8
    4e1e:	33ff      	adds	r3, #255	; 0xff
    4e20:	5ceb      	ldrb	r3, [r5, r3]
    4e22:	079b      	lsls	r3, r3, #30
    4e24:	d512      	bpl.n	4e4c <USB_Handler+0x474>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4e26:	2202      	movs	r2, #2
    4e28:	2308      	movs	r3, #8
    4e2a:	33ff      	adds	r3, #255	; 0xff
    4e2c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4e2e:	4a50      	ldr	r2, [pc, #320]	; (4f70 <USB_Handler+0x598>)
    4e30:	3b88      	subs	r3, #136	; 0x88
    4e32:	3bff      	subs	r3, #255	; 0xff
    4e34:	4303      	orrs	r3, r0
    4e36:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4e38:	9b01      	ldr	r3, [sp, #4]
    4e3a:	015b      	lsls	r3, r3, #5
    4e3c:	484d      	ldr	r0, [pc, #308]	; (4f74 <USB_Handler+0x59c>)
    4e3e:	18c3      	adds	r3, r0, r3
    4e40:	3310      	adds	r3, #16
    4e42:	685b      	ldr	r3, [r3, #4]
    4e44:	049b      	lsls	r3, r3, #18
    4e46:	0c9b      	lsrs	r3, r3, #18
    4e48:	8053      	strh	r3, [r2, #2]
    4e4a:	e017      	b.n	4e7c <USB_Handler+0x4a4>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4e4c:	2308      	movs	r3, #8
    4e4e:	33ff      	adds	r3, #255	; 0xff
    4e50:	5ceb      	ldrb	r3, [r5, r3]
    4e52:	07db      	lsls	r3, r3, #31
    4e54:	d512      	bpl.n	4e7c <USB_Handler+0x4a4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4e56:	2201      	movs	r2, #1
    4e58:	2308      	movs	r3, #8
    4e5a:	33ff      	adds	r3, #255	; 0xff
    4e5c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4e5e:	4844      	ldr	r0, [pc, #272]	; (4f70 <USB_Handler+0x598>)
    4e60:	4643      	mov	r3, r8
    4e62:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4e64:	9b01      	ldr	r3, [sp, #4]
    4e66:	015a      	lsls	r2, r3, #5
    4e68:	4b42      	ldr	r3, [pc, #264]	; (4f74 <USB_Handler+0x59c>)
    4e6a:	189b      	adds	r3, r3, r2
    4e6c:	685a      	ldr	r2, [r3, #4]
    4e6e:	0492      	lsls	r2, r2, #18
    4e70:	0c92      	lsrs	r2, r2, #18
    4e72:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4e74:	685b      	ldr	r3, [r3, #4]
    4e76:	011b      	lsls	r3, r3, #4
    4e78:	0c9b      	lsrs	r3, r3, #18
    4e7a:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4e7c:	078b      	lsls	r3, r1, #30
    4e7e:	d070      	beq.n	4f62 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4e80:	9b01      	ldr	r3, [sp, #4]
    4e82:	330d      	adds	r3, #13
    4e84:	011b      	lsls	r3, r3, #4
    4e86:	18fb      	adds	r3, r7, r3
    4e88:	685b      	ldr	r3, [r3, #4]
    4e8a:	1c38      	adds	r0, r7, #0
    4e8c:	4938      	ldr	r1, [pc, #224]	; (4f70 <USB_Handler+0x598>)
    4e8e:	4798      	blx	r3
    4e90:	e067      	b.n	4f62 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4e92:	250c      	movs	r5, #12
    4e94:	4215      	tst	r5, r2
    4e96:	d05f      	beq.n	4f58 <USB_Handler+0x580>
    4e98:	1c3d      	adds	r5, r7, #0
    4e9a:	4647      	mov	r7, r8
    4e9c:	4680      	mov	r8, r0
    4e9e:	9b01      	ldr	r3, [sp, #4]
    4ea0:	015b      	lsls	r3, r3, #5
    4ea2:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4ea4:	2308      	movs	r3, #8
    4ea6:	33ff      	adds	r3, #255	; 0xff
    4ea8:	5ceb      	ldrb	r3, [r5, r3]
    4eaa:	071b      	lsls	r3, r3, #28
    4eac:	d523      	bpl.n	4ef6 <USB_Handler+0x51e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4eae:	2208      	movs	r2, #8
    4eb0:	2308      	movs	r3, #8
    4eb2:	33ff      	adds	r3, #255	; 0xff
    4eb4:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4eb6:	9b01      	ldr	r3, [sp, #4]
    4eb8:	015b      	lsls	r3, r3, #5
    4eba:	4a2e      	ldr	r2, [pc, #184]	; (4f74 <USB_Handler+0x59c>)
    4ebc:	18d3      	adds	r3, r2, r3
    4ebe:	3318      	adds	r3, #24
    4ec0:	789b      	ldrb	r3, [r3, #2]
    4ec2:	079b      	lsls	r3, r3, #30
    4ec4:	d507      	bpl.n	4ed6 <USB_Handler+0x4fe>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	015a      	lsls	r2, r3, #5
    4eca:	4b2a      	ldr	r3, [pc, #168]	; (4f74 <USB_Handler+0x59c>)
    4ecc:	189b      	adds	r3, r3, r2
    4ece:	7e9a      	ldrb	r2, [r3, #26]
    4ed0:	2002      	movs	r0, #2
    4ed2:	4382      	bics	r2, r0
    4ed4:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4ed6:	2380      	movs	r3, #128	; 0x80
    4ed8:	425b      	negs	r3, r3
    4eda:	4642      	mov	r2, r8
    4edc:	4313      	orrs	r3, r2
    4ede:	4a24      	ldr	r2, [pc, #144]	; (4f70 <USB_Handler+0x598>)
    4ee0:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4ee2:	9b01      	ldr	r3, [sp, #4]
    4ee4:	3308      	adds	r3, #8
    4ee6:	015b      	lsls	r3, r3, #5
    4ee8:	683a      	ldr	r2, [r7, #0]
    4eea:	4694      	mov	ip, r2
    4eec:	4463      	add	r3, ip
    4eee:	79db      	ldrb	r3, [r3, #7]
    4ef0:	079b      	lsls	r3, r3, #30
    4ef2:	d525      	bpl.n	4f40 <USB_Handler+0x568>
    4ef4:	e035      	b.n	4f62 <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4ef6:	2308      	movs	r3, #8
    4ef8:	33ff      	adds	r3, #255	; 0xff
    4efa:	5ceb      	ldrb	r3, [r5, r3]
    4efc:	075b      	lsls	r3, r3, #29
    4efe:	d51f      	bpl.n	4f40 <USB_Handler+0x568>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4f00:	2204      	movs	r2, #4
    4f02:	2308      	movs	r3, #8
    4f04:	33ff      	adds	r3, #255	; 0xff
    4f06:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4f08:	9b01      	ldr	r3, [sp, #4]
    4f0a:	015b      	lsls	r3, r3, #5
    4f0c:	4a19      	ldr	r2, [pc, #100]	; (4f74 <USB_Handler+0x59c>)
    4f0e:	18d3      	adds	r3, r2, r3
    4f10:	3308      	adds	r3, #8
    4f12:	789b      	ldrb	r3, [r3, #2]
    4f14:	079b      	lsls	r3, r3, #30
    4f16:	d507      	bpl.n	4f28 <USB_Handler+0x550>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4f18:	9b01      	ldr	r3, [sp, #4]
    4f1a:	015a      	lsls	r2, r3, #5
    4f1c:	4b15      	ldr	r3, [pc, #84]	; (4f74 <USB_Handler+0x59c>)
    4f1e:	189b      	adds	r3, r3, r2
    4f20:	7a9a      	ldrb	r2, [r3, #10]
    4f22:	2002      	movs	r0, #2
    4f24:	4382      	bics	r2, r0
    4f26:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4f28:	4b11      	ldr	r3, [pc, #68]	; (4f70 <USB_Handler+0x598>)
    4f2a:	4642      	mov	r2, r8
    4f2c:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4f2e:	9b01      	ldr	r3, [sp, #4]
    4f30:	3308      	adds	r3, #8
    4f32:	015b      	lsls	r3, r3, #5
    4f34:	683a      	ldr	r2, [r7, #0]
    4f36:	4694      	mov	ip, r2
    4f38:	4463      	add	r3, ip
    4f3a:	79db      	ldrb	r3, [r3, #7]
    4f3c:	07db      	lsls	r3, r3, #31
    4f3e:	d410      	bmi.n	4f62 <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4f40:	230c      	movs	r3, #12
    4f42:	420b      	tst	r3, r1
    4f44:	d00d      	beq.n	4f62 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4f46:	9b01      	ldr	r3, [sp, #4]
    4f48:	011b      	lsls	r3, r3, #4
    4f4a:	18fb      	adds	r3, r7, r3
    4f4c:	33d4      	adds	r3, #212	; 0xd4
    4f4e:	685b      	ldr	r3, [r3, #4]
    4f50:	1c38      	adds	r0, r7, #0
    4f52:	4907      	ldr	r1, [pc, #28]	; (4f70 <USB_Handler+0x598>)
    4f54:	4798      	blx	r3
    4f56:	e004      	b.n	4f62 <USB_Handler+0x58a>
    4f58:	3301      	adds	r3, #1
    4f5a:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4f5c:	2b08      	cmp	r3, #8
    4f5e:	d000      	beq.n	4f62 <USB_Handler+0x58a>
    4f60:	e6f0      	b.n	4d44 <USB_Handler+0x36c>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4f62:	b003      	add	sp, #12
    4f64:	bc3c      	pop	{r2, r3, r4, r5}
    4f66:	4690      	mov	r8, r2
    4f68:	4699      	mov	r9, r3
    4f6a:	46a2      	mov	sl, r4
    4f6c:	46ab      	mov	fp, r5
    4f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f70:	2000075c 	.word	0x2000075c
    4f74:	20000ae0 	.word	0x20000ae0

00004f78 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4f78:	2200      	movs	r2, #0
    4f7a:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4f7c:	2301      	movs	r3, #1
    4f7e:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4f80:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4f82:	70c3      	strb	r3, [r0, #3]
}
    4f84:	4770      	bx	lr
    4f86:	46c0      	nop			; (mov r8, r8)

00004f88 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f8a:	464f      	mov	r7, r9
    4f8c:	4646      	mov	r6, r8
    4f8e:	b4c0      	push	{r6, r7}
    4f90:	b083      	sub	sp, #12
    4f92:	1c04      	adds	r4, r0, #0
    4f94:	1c0d      	adds	r5, r1, #0
    4f96:	1c16      	adds	r6, r2, #0
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4f98:	2300      	movs	r3, #0
    4f9a:	4a6c      	ldr	r2, [pc, #432]	; (514c <usb_init+0x1c4>)
    4f9c:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4f9e:	4a6c      	ldr	r2, [pc, #432]	; (5150 <usb_init+0x1c8>)
    4fa0:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4fa2:	6021      	str	r1, [r4, #0]
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4fa4:	496b      	ldr	r1, [pc, #428]	; (5154 <usb_init+0x1cc>)
    4fa6:	69c8      	ldr	r0, [r1, #28]
    4fa8:	2220      	movs	r2, #32
    4faa:	4302      	orrs	r2, r0
    4fac:	61ca      	str	r2, [r1, #28]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4fae:	af01      	add	r7, sp, #4
    4fb0:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4fb2:	2201      	movs	r2, #1
    4fb4:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    4fb6:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4fb8:	3306      	adds	r3, #6
    4fba:	4699      	mov	r9, r3
    4fbc:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4fbe:	2018      	movs	r0, #24
    4fc0:	1c39      	adds	r1, r7, #0
    4fc2:	4b65      	ldr	r3, [pc, #404]	; (5158 <usb_init+0x1d0>)
    4fc4:	4698      	mov	r8, r3
    4fc6:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4fc8:	464b      	mov	r3, r9
    4fca:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4fcc:	2019      	movs	r0, #25
    4fce:	1c39      	adds	r1, r7, #0
    4fd0:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4fd2:	78b3      	ldrb	r3, [r6, #2]
    4fd4:	466a      	mov	r2, sp
    4fd6:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4fd8:	2006      	movs	r0, #6
    4fda:	4669      	mov	r1, sp
    4fdc:	4b5f      	ldr	r3, [pc, #380]	; (515c <usb_init+0x1d4>)
    4fde:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4fe0:	2006      	movs	r0, #6
    4fe2:	4b5f      	ldr	r3, [pc, #380]	; (5160 <usb_init+0x1d8>)
    4fe4:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    4fe6:	782a      	ldrb	r2, [r5, #0]
    4fe8:	2301      	movs	r3, #1
    4fea:	4313      	orrs	r3, r2
    4fec:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4fee:	2201      	movs	r2, #1
    4ff0:	78ab      	ldrb	r3, [r5, #2]
    4ff2:	421a      	tst	r2, r3
    4ff4:	d1fc      	bne.n	4ff0 <usb_init+0x68>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4ff6:	4b5b      	ldr	r3, [pc, #364]	; (5164 <usb_init+0x1dc>)
    4ff8:	78da      	ldrb	r2, [r3, #3]
    4ffa:	2103      	movs	r1, #3
    4ffc:	438a      	bics	r2, r1
    4ffe:	2102      	movs	r1, #2
    5000:	430a      	orrs	r2, r1
    5002:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5004:	78da      	ldrb	r2, [r3, #3]
    5006:	210c      	movs	r1, #12
    5008:	438a      	bics	r2, r1
    500a:	2108      	movs	r1, #8
    500c:	430a      	orrs	r2, r1
    500e:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    5010:	4b55      	ldr	r3, [pc, #340]	; (5168 <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    5012:	681b      	ldr	r3, [r3, #0]
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    5014:	039b      	lsls	r3, r3, #14
    5016:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    5018:	2b1f      	cmp	r3, #31
    501a:	d100      	bne.n	501e <usb_init+0x96>
		pad_transn = 5;
    501c:	3b1a      	subs	r3, #26
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    501e:	019a      	lsls	r2, r3, #6
    5020:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    5022:	4b52      	ldr	r3, [pc, #328]	; (516c <usb_init+0x1e4>)
    5024:	400b      	ands	r3, r1
    5026:	4313      	orrs	r3, r2
    5028:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    502a:	4b4f      	ldr	r3, [pc, #316]	; (5168 <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	025b      	lsls	r3, r3, #9
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    5030:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    5032:	2b1f      	cmp	r3, #31
    5034:	d100      	bne.n	5038 <usb_init+0xb0>
		pad_transp = 29;
    5036:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    5038:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    503a:	211f      	movs	r1, #31
    503c:	438a      	bics	r2, r1
    503e:	4313      	orrs	r3, r2
    5040:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    5042:	4b49      	ldr	r3, [pc, #292]	; (5168 <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    5044:	681b      	ldr	r3, [r3, #0]
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    5046:	019b      	lsls	r3, r3, #6
    5048:	0f5b      	lsrs	r3, r3, #29
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    504a:	2b07      	cmp	r3, #7
    504c:	d100      	bne.n	5050 <usb_init+0xc8>
		pad_trim = 3;
    504e:	3b04      	subs	r3, #4
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    5050:	031a      	lsls	r2, r3, #12
    5052:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    5054:	4b46      	ldr	r3, [pc, #280]	; (5170 <usb_init+0x1e8>)
    5056:	400b      	ands	r3, r1
    5058:	4313      	orrs	r3, r2
    505a:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    505c:	7833      	ldrb	r3, [r6, #0]
    505e:	01da      	lsls	r2, r3, #7
    5060:	782b      	ldrb	r3, [r5, #0]
    5062:	217f      	movs	r1, #127	; 0x7f
    5064:	400b      	ands	r3, r1
    5066:	4313      	orrs	r3, r2
    5068:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    506a:	7873      	ldrb	r3, [r6, #1]
    506c:	2201      	movs	r2, #1
    506e:	4013      	ands	r3, r2
    5070:	009a      	lsls	r2, r3, #2
    5072:	782b      	ldrb	r3, [r5, #0]
    5074:	397b      	subs	r1, #123	; 0x7b
    5076:	438b      	bics	r3, r1
    5078:	4313      	orrs	r3, r2
    507a:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    507c:	4b3d      	ldr	r3, [pc, #244]	; (5174 <usb_init+0x1ec>)
    507e:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    5080:	78f3      	ldrb	r3, [r6, #3]
    5082:	2b01      	cmp	r3, #1
    5084:	d105      	bne.n	5092 <usb_init+0x10a>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    5086:	6822      	ldr	r2, [r4, #0]
    5088:	8913      	ldrh	r3, [r2, #8]
    508a:	3108      	adds	r1, #8
    508c:	438b      	bics	r3, r1
    508e:	8113      	strh	r3, [r2, #8]
    5090:	e008      	b.n	50a4 <usb_init+0x11c>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    5092:	2b00      	cmp	r3, #0
    5094:	d106      	bne.n	50a4 <usb_init+0x11c>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    5096:	6821      	ldr	r1, [r4, #0]
    5098:	890b      	ldrh	r3, [r1, #8]
    509a:	220c      	movs	r2, #12
    509c:	4393      	bics	r3, r2
    509e:	2204      	movs	r2, #4
    50a0:	4313      	orrs	r3, r2
    50a2:	810b      	strh	r3, [r1, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    50a4:	4833      	ldr	r0, [pc, #204]	; (5174 <usb_init+0x1ec>)
    50a6:	2100      	movs	r1, #0
    50a8:	2280      	movs	r2, #128	; 0x80
    50aa:	0052      	lsls	r2, r2, #1
    50ac:	4b32      	ldr	r3, [pc, #200]	; (5178 <usb_init+0x1f0>)
    50ae:	4798      	blx	r3
    50b0:	1d22      	adds	r2, r4, #4
    50b2:	1c23      	adds	r3, r4, #0
    50b4:	3324      	adds	r3, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    50b6:	2100      	movs	r1, #0
    50b8:	c202      	stmia	r2!, {r1}
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    50ba:	429a      	cmp	r2, r3
    50bc:	d1fc      	bne.n	50b8 <usb_init+0x130>
    50be:	1c21      	adds	r1, r4, #0
    50c0:	31a4      	adds	r1, #164	; 0xa4
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    50c2:	2200      	movs	r2, #0
    50c4:	601a      	str	r2, [r3, #0]
    50c6:	605a      	str	r2, [r3, #4]
    50c8:	609a      	str	r2, [r3, #8]
    50ca:	60da      	str	r2, [r3, #12]
    50cc:	3310      	adds	r3, #16
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    50ce:	428b      	cmp	r3, r1
    50d0:	d1f8      	bne.n	50c4 <usb_init+0x13c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    50d2:	2300      	movs	r3, #0
    50d4:	22a4      	movs	r2, #164	; 0xa4
    50d6:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    50d8:	3201      	adds	r2, #1
    50da:	54a3      	strb	r3, [r4, r2]
    50dc:	1c23      	adds	r3, r4, #0
    50de:	33a6      	adds	r3, #166	; 0xa6
    50e0:	1c21      	adds	r1, r4, #0
    50e2:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    50e4:	2200      	movs	r2, #0
    50e6:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    50e8:	721a      	strb	r2, [r3, #8]
    50ea:	3301      	adds	r3, #1
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    50ec:	428b      	cmp	r3, r1
    50ee:	d1fa      	bne.n	50e6 <usb_init+0x15e>
    50f0:	1c22      	adds	r2, r4, #0
    50f2:	32b8      	adds	r2, #184	; 0xb8
    50f4:	1c23      	adds	r3, r4, #0
    50f6:	33d4      	adds	r3, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    50f8:	2100      	movs	r1, #0
    50fa:	c202      	stmia	r2!, {r1}
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    50fc:	429a      	cmp	r2, r3
    50fe:	d1fc      	bne.n	50fa <usb_init+0x172>
    5100:	1c21      	adds	r1, r4, #0
    5102:	3155      	adds	r1, #85	; 0x55
    5104:	31ff      	adds	r1, #255	; 0xff
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    5106:	2200      	movs	r2, #0
    5108:	601a      	str	r2, [r3, #0]
    510a:	605a      	str	r2, [r3, #4]
    510c:	609a      	str	r2, [r3, #8]
    510e:	60da      	str	r2, [r3, #12]
    5110:	3310      	adds	r3, #16

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    5112:	428b      	cmp	r3, r1
    5114:	d1f8      	bne.n	5108 <usb_init+0x180>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    5116:	2300      	movs	r3, #0
    5118:	22aa      	movs	r2, #170	; 0xaa
    511a:	0052      	lsls	r2, r2, #1
    511c:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    511e:	3202      	adds	r2, #2
    5120:	52a3      	strh	r3, [r4, r2]
    5122:	1c23      	adds	r3, r4, #0
    5124:	3359      	adds	r3, #89	; 0x59
    5126:	33ff      	adds	r3, #255	; 0xff
    5128:	3461      	adds	r4, #97	; 0x61
    512a:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    512c:	2200      	movs	r2, #0
    512e:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    5130:	721a      	strb	r2, [r3, #8]
    5132:	3301      	adds	r3, #1
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    5134:	42a3      	cmp	r3, r4
    5136:	d1fa      	bne.n	512e <usb_init+0x1a6>
    5138:	2280      	movs	r2, #128	; 0x80
    513a:	4b10      	ldr	r3, [pc, #64]	; (517c <usb_init+0x1f4>)
    513c:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    513e:	2000      	movs	r0, #0
    5140:	b003      	add	sp, #12
    5142:	bc0c      	pop	{r2, r3}
    5144:	4690      	mov	r8, r2
    5146:	4699      	mov	r9, r3
    5148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    514a:	46c0      	nop			; (mov r8, r8)
    514c:	20000758 	.word	0x20000758
    5150:	20000764 	.word	0x20000764
    5154:	40000400 	.word	0x40000400
    5158:	00002dc1 	.word	0x00002dc1
    515c:	00002cc9 	.word	0x00002cc9
    5160:	00002c3d 	.word	0x00002c3d
    5164:	41005000 	.word	0x41005000
    5168:	00806024 	.word	0x00806024
    516c:	fffff83f 	.word	0xfffff83f
    5170:	ffff8fff 	.word	0xffff8fff
    5174:	20000ae0 	.word	0x20000ae0
    5178:	0000880f 	.word	0x0000880f
    517c:	e000e100 	.word	0xe000e100

00005180 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    5180:	e7fe      	b.n	5180 <Dummy_Handler>
    5182:	46c0      	nop			; (mov r8, r8)

00005184 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5184:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    5186:	4b2e      	ldr	r3, [pc, #184]	; (5240 <Reset_Handler+0xbc>)
    5188:	4a2e      	ldr	r2, [pc, #184]	; (5244 <Reset_Handler+0xc0>)
    518a:	429a      	cmp	r2, r3
    518c:	d003      	beq.n	5196 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    518e:	4b2e      	ldr	r3, [pc, #184]	; (5248 <Reset_Handler+0xc4>)
    5190:	4a2b      	ldr	r2, [pc, #172]	; (5240 <Reset_Handler+0xbc>)
    5192:	429a      	cmp	r2, r3
    5194:	d304      	bcc.n	51a0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5196:	4b2d      	ldr	r3, [pc, #180]	; (524c <Reset_Handler+0xc8>)
    5198:	4a2d      	ldr	r2, [pc, #180]	; (5250 <Reset_Handler+0xcc>)
    519a:	429a      	cmp	r2, r3
    519c:	d310      	bcc.n	51c0 <Reset_Handler+0x3c>
    519e:	e01e      	b.n	51de <Reset_Handler+0x5a>
    51a0:	4a2c      	ldr	r2, [pc, #176]	; (5254 <Reset_Handler+0xd0>)
    51a2:	4b29      	ldr	r3, [pc, #164]	; (5248 <Reset_Handler+0xc4>)
    51a4:	3303      	adds	r3, #3
    51a6:	1a9b      	subs	r3, r3, r2
    51a8:	089b      	lsrs	r3, r3, #2
    51aa:	3301      	adds	r3, #1
    51ac:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    51ae:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    51b0:	4823      	ldr	r0, [pc, #140]	; (5240 <Reset_Handler+0xbc>)
    51b2:	4924      	ldr	r1, [pc, #144]	; (5244 <Reset_Handler+0xc0>)
    51b4:	588c      	ldr	r4, [r1, r2]
    51b6:	5084      	str	r4, [r0, r2]
    51b8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    51ba:	429a      	cmp	r2, r3
    51bc:	d1fa      	bne.n	51b4 <Reset_Handler+0x30>
    51be:	e7ea      	b.n	5196 <Reset_Handler+0x12>
    51c0:	4a25      	ldr	r2, [pc, #148]	; (5258 <Reset_Handler+0xd4>)
    51c2:	4b22      	ldr	r3, [pc, #136]	; (524c <Reset_Handler+0xc8>)
    51c4:	3303      	adds	r3, #3
    51c6:	1a9b      	subs	r3, r3, r2
    51c8:	089b      	lsrs	r3, r3, #2
    51ca:	3301      	adds	r3, #1
    51cc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    51ce:	2200      	movs	r2, #0
                *pDest++ = 0;
    51d0:	481f      	ldr	r0, [pc, #124]	; (5250 <Reset_Handler+0xcc>)
    51d2:	2100      	movs	r1, #0
    51d4:	1814      	adds	r4, r2, r0
    51d6:	6021      	str	r1, [r4, #0]
    51d8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    51da:	429a      	cmp	r2, r3
    51dc:	d1fa      	bne.n	51d4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    51de:	4a1f      	ldr	r2, [pc, #124]	; (525c <Reset_Handler+0xd8>)
    51e0:	21ff      	movs	r1, #255	; 0xff
    51e2:	4b1f      	ldr	r3, [pc, #124]	; (5260 <Reset_Handler+0xdc>)
    51e4:	438b      	bics	r3, r1
    51e6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    51e8:	39fd      	subs	r1, #253	; 0xfd
    51ea:	2390      	movs	r3, #144	; 0x90
    51ec:	005b      	lsls	r3, r3, #1
    51ee:	4a1d      	ldr	r2, [pc, #116]	; (5264 <Reset_Handler+0xe0>)
    51f0:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    51f2:	481d      	ldr	r0, [pc, #116]	; (5268 <Reset_Handler+0xe4>)
    51f4:	78c3      	ldrb	r3, [r0, #3]
    51f6:	2403      	movs	r4, #3
    51f8:	43a3      	bics	r3, r4
    51fa:	2202      	movs	r2, #2
    51fc:	4313      	orrs	r3, r2
    51fe:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5200:	78c3      	ldrb	r3, [r0, #3]
    5202:	260c      	movs	r6, #12
    5204:	43b3      	bics	r3, r6
    5206:	2108      	movs	r1, #8
    5208:	430b      	orrs	r3, r1
    520a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    520c:	4b17      	ldr	r3, [pc, #92]	; (526c <Reset_Handler+0xe8>)
    520e:	7b98      	ldrb	r0, [r3, #14]
    5210:	2530      	movs	r5, #48	; 0x30
    5212:	43a8      	bics	r0, r5
    5214:	1c05      	adds	r5, r0, #0
    5216:	2020      	movs	r0, #32
    5218:	4328      	orrs	r0, r5
    521a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    521c:	7b98      	ldrb	r0, [r3, #14]
    521e:	43b0      	bics	r0, r6
    5220:	4301      	orrs	r1, r0
    5222:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5224:	7b99      	ldrb	r1, [r3, #14]
    5226:	43a1      	bics	r1, r4
    5228:	430a      	orrs	r2, r1
    522a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    522c:	4a10      	ldr	r2, [pc, #64]	; (5270 <Reset_Handler+0xec>)
    522e:	6851      	ldr	r1, [r2, #4]
    5230:	2380      	movs	r3, #128	; 0x80
    5232:	430b      	orrs	r3, r1
    5234:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    5236:	4b0f      	ldr	r3, [pc, #60]	; (5274 <Reset_Handler+0xf0>)
    5238:	4798      	blx	r3

        /* Branch to main function */
        main();
    523a:	4b0f      	ldr	r3, [pc, #60]	; (5278 <Reset_Handler+0xf4>)
    523c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    523e:	e7fe      	b.n	523e <Reset_Handler+0xba>
    5240:	20000000 	.word	0x20000000
    5244:	00008b70 	.word	0x00008b70
    5248:	20000114 	.word	0x20000114
    524c:	20000d18 	.word	0x20000d18
    5250:	20000118 	.word	0x20000118
    5254:	20000004 	.word	0x20000004
    5258:	2000011c 	.word	0x2000011c
    525c:	e000ed00 	.word	0xe000ed00
    5260:	00000000 	.word	0x00000000
    5264:	41007000 	.word	0x41007000
    5268:	41005000 	.word	0x41005000
    526c:	41004800 	.word	0x41004800
    5270:	41004000 	.word	0x41004000
    5274:	000087b1 	.word	0x000087b1
    5278:	00005e05 	.word	0x00005e05

0000527c <convert_dec_to_frac>:
* \brief Decimal to Fraction Conversation.
* This function converts the decimal value into fractional 
* and return the fractional value for temperature calculation
*/
float convert_dec_to_frac(uint8_t val)
{
    527c:	b508      	push	{r3, lr}
	if (val < 10)
    527e:	2809      	cmp	r0, #9
    5280:	d805      	bhi.n	528e <convert_dec_to_frac+0x12>
	{
		return ((float)val/10.0);
    5282:	4b0a      	ldr	r3, [pc, #40]	; (52ac <convert_dec_to_frac+0x30>)
    5284:	4798      	blx	r3
    5286:	490a      	ldr	r1, [pc, #40]	; (52b0 <convert_dec_to_frac+0x34>)
    5288:	4b0a      	ldr	r3, [pc, #40]	; (52b4 <convert_dec_to_frac+0x38>)
    528a:	4798      	blx	r3
    528c:	e00c      	b.n	52a8 <convert_dec_to_frac+0x2c>
	}
	
	else if (val <100)
    528e:	2863      	cmp	r0, #99	; 0x63
    5290:	d805      	bhi.n	529e <convert_dec_to_frac+0x22>
	{
		return ((float)val/100.0);
    5292:	4b06      	ldr	r3, [pc, #24]	; (52ac <convert_dec_to_frac+0x30>)
    5294:	4798      	blx	r3
    5296:	4908      	ldr	r1, [pc, #32]	; (52b8 <convert_dec_to_frac+0x3c>)
    5298:	4b06      	ldr	r3, [pc, #24]	; (52b4 <convert_dec_to_frac+0x38>)
    529a:	4798      	blx	r3
    529c:	e004      	b.n	52a8 <convert_dec_to_frac+0x2c>
	}
	
	else
	{
		return ((float)val/1000.0);
    529e:	4b03      	ldr	r3, [pc, #12]	; (52ac <convert_dec_to_frac+0x30>)
    52a0:	4798      	blx	r3
    52a2:	4906      	ldr	r1, [pc, #24]	; (52bc <convert_dec_to_frac+0x40>)
    52a4:	4b03      	ldr	r3, [pc, #12]	; (52b4 <convert_dec_to_frac+0x38>)
    52a6:	4798      	blx	r3
	}
}
    52a8:	bd08      	pop	{r3, pc}
    52aa:	46c0      	nop			; (mov r8, r8)
    52ac:	000072d5 	.word	0x000072d5
    52b0:	41200000 	.word	0x41200000
    52b4:	00006a35 	.word	0x00006a35
    52b8:	42c80000 	.word	0x42c80000
    52bc:	447a0000 	.word	0x447a0000

000052c0 <load_calibration_data>:
* This function extract the production calibration data information from
* Temperature log row content and store it variables for temperature calculation
*
*/
void load_calibration_data(void)
{
    52c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    52c2:	465f      	mov	r7, fp
    52c4:	4656      	mov	r6, sl
    52c6:	464d      	mov	r5, r9
    52c8:	4644      	mov	r4, r8
    52ca:	b4f0      	push	{r4, r5, r6, r7}
    52cc:	b087      	sub	sp, #28
	int8_t room_int1v_val;				/* internal 1V reference drift at room temperature */
	int8_t hot_int1v_val;				/* internal 1V reference drift at hot temperature*/
	
	uint32_t *temp_log_row_ptr = (uint32_t *)NVMCTRL_TEMP_LOG;
	
	val1 = *temp_log_row_ptr;
    52ce:	4b3e      	ldr	r3, [pc, #248]	; (53c8 <load_calibration_data+0x108>)
    52d0:	681b      	ldr	r3, [r3, #0]
    52d2:	9305      	str	r3, [sp, #20]
	temp_log_row_ptr++;
	val2 = *temp_log_row_ptr;
    52d4:	4b3d      	ldr	r3, [pc, #244]	; (53cc <load_calibration_data+0x10c>)
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	9304      	str	r3, [sp, #16]
	
	room_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Pos);
    52da:	9f05      	ldr	r7, [sp, #20]
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
    52dc:	9805      	ldr	r0, [sp, #20]
	
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
    52de:	9b05      	ldr	r3, [sp, #20]
    52e0:	4699      	mov	r9, r3
	
	hot_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Pos);
    52e2:	9d05      	ldr	r5, [sp, #20]
	
	room_int1v_val = (int8_t)((val1 & NVMCTRL_FUSES_ROOM_INT1V_VAL_Msk) >> NVMCTRL_FUSES_ROOM_INT1V_VAL_Pos);
    52e4:	9b05      	ldr	r3, [sp, #20]
    52e6:	9301      	str	r3, [sp, #4]
	
	hot_int1v_val = (int8_t)((val2 & NVMCTRL_FUSES_HOT_INT1V_VAL_Msk) >> NVMCTRL_FUSES_HOT_INT1V_VAL_Pos);
    52e8:	9a04      	ldr	r2, [sp, #16]
    52ea:	9202      	str	r2, [sp, #8]
	
	ADCR = (uint16_t)((val2 & NVMCTRL_FUSES_ROOM_ADC_VAL_Msk) >> NVMCTRL_FUSES_ROOM_ADC_VAL_Pos);
    52ec:	9c04      	ldr	r4, [sp, #16]
    52ee:	0324      	lsls	r4, r4, #12
    52f0:	0d24      	lsrs	r4, r4, #20
    52f2:	4b37      	ldr	r3, [pc, #220]	; (53d0 <load_calibration_data+0x110>)
    52f4:	801c      	strh	r4, [r3, #0]
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
    52f6:	9e04      	ldr	r6, [sp, #16]
    52f8:	0d36      	lsrs	r6, r6, #20
    52fa:	4b36      	ldr	r3, [pc, #216]	; (53d4 <load_calibration_data+0x114>)
    52fc:	801e      	strh	r6, [r3, #0]
	temp_log_row_ptr++;
	val2 = *temp_log_row_ptr;
	
	room_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Pos);
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
    52fe:	0500      	lsls	r0, r0, #20
	
	ADCR = (uint16_t)((val2 & NVMCTRL_FUSES_ROOM_ADC_VAL_Msk) >> NVMCTRL_FUSES_ROOM_ADC_VAL_Pos);
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
    5300:	0f00      	lsrs	r0, r0, #28
    5302:	4935      	ldr	r1, [pc, #212]	; (53d8 <load_calibration_data+0x118>)
    5304:	468b      	mov	fp, r1
    5306:	4788      	blx	r1
    5308:	9003      	str	r0, [sp, #12]
    530a:	22ff      	movs	r2, #255	; 0xff
    530c:	4690      	mov	r8, r2
    530e:	1c13      	adds	r3, r2, #0
    5310:	403b      	ands	r3, r7
    5312:	1c18      	adds	r0, r3, #0
    5314:	4f31      	ldr	r7, [pc, #196]	; (53dc <load_calibration_data+0x11c>)
    5316:	47b8      	blx	r7
    5318:	4a31      	ldr	r2, [pc, #196]	; (53e0 <load_calibration_data+0x120>)
    531a:	4692      	mov	sl, r2
    531c:	9903      	ldr	r1, [sp, #12]
    531e:	4790      	blx	r2
    5320:	4b30      	ldr	r3, [pc, #192]	; (53e4 <load_calibration_data+0x124>)
    5322:	6018      	str	r0, [r3, #0]
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
	
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
	
	hot_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Pos);
    5324:	0228      	lsls	r0, r5, #8
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
	
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    5326:	0f00      	lsrs	r0, r0, #28
    5328:	47d8      	blx	fp
    532a:	1c05      	adds	r5, r0, #0
	
	room_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Pos);
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
	
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
    532c:	4649      	mov	r1, r9
    532e:	0b08      	lsrs	r0, r1, #12
    5330:	4641      	mov	r1, r8
    5332:	4008      	ands	r0, r1
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
	
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    5334:	47b8      	blx	r7
    5336:	1c29      	adds	r1, r5, #0
    5338:	47d0      	blx	sl
    533a:	4b2b      	ldr	r3, [pc, #172]	; (53e8 <load_calibration_data+0x128>)
    533c:	6018      	str	r0, [r3, #0]
	
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
    533e:	9b01      	ldr	r3, [sp, #4]
    5340:	1618      	asrs	r0, r3, #24
    5342:	47b8      	blx	r7
    5344:	4b29      	ldr	r3, [pc, #164]	; (53ec <load_calibration_data+0x12c>)
    5346:	469b      	mov	fp, r3
    5348:	4798      	blx	r3
    534a:	4b29      	ldr	r3, [pc, #164]	; (53f0 <load_calibration_data+0x130>)
    534c:	469a      	mov	sl, r3
    534e:	2200      	movs	r2, #0
    5350:	4b28      	ldr	r3, [pc, #160]	; (53f4 <load_calibration_data+0x134>)
    5352:	47d0      	blx	sl
    5354:	1c02      	adds	r2, r0, #0
    5356:	1c0b      	adds	r3, r1, #0
    5358:	4927      	ldr	r1, [pc, #156]	; (53f8 <load_calibration_data+0x138>)
    535a:	4689      	mov	r9, r1
    535c:	2000      	movs	r0, #0
    535e:	4927      	ldr	r1, [pc, #156]	; (53fc <load_calibration_data+0x13c>)
    5360:	47c8      	blx	r9
    5362:	4d27      	ldr	r5, [pc, #156]	; (5400 <load_calibration_data+0x140>)
    5364:	47a8      	blx	r5
    5366:	4b27      	ldr	r3, [pc, #156]	; (5404 <load_calibration_data+0x144>)
    5368:	9001      	str	r0, [sp, #4]
    536a:	6018      	str	r0, [r3, #0]
	
	INT1VH = 1 - ((float)hot_int1v_val/INT1V_DIVIDER_1000);
    536c:	466b      	mov	r3, sp
    536e:	2008      	movs	r0, #8
    5370:	5618      	ldrsb	r0, [r3, r0]
    5372:	47b8      	blx	r7
    5374:	47d8      	blx	fp
    5376:	2200      	movs	r2, #0
    5378:	4b1e      	ldr	r3, [pc, #120]	; (53f4 <load_calibration_data+0x134>)
    537a:	47d0      	blx	sl
    537c:	1c02      	adds	r2, r0, #0
    537e:	1c0b      	adds	r3, r1, #0
    5380:	2000      	movs	r0, #0
    5382:	491e      	ldr	r1, [pc, #120]	; (53fc <load_calibration_data+0x13c>)
    5384:	47c8      	blx	r9
    5386:	47a8      	blx	r5
    5388:	4b1f      	ldr	r3, [pc, #124]	; (5408 <load_calibration_data+0x148>)
    538a:	9002      	str	r0, [sp, #8]
    538c:	6018      	str	r0, [r3, #0]
	
	VADCR = ((float)ADCR * INT1VR)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    538e:	4f1f      	ldr	r7, [pc, #124]	; (540c <load_calibration_data+0x14c>)
    5390:	1c20      	adds	r0, r4, #0
    5392:	47b8      	blx	r7
    5394:	1c01      	adds	r1, r0, #0
    5396:	4d1e      	ldr	r5, [pc, #120]	; (5410 <load_calibration_data+0x150>)
    5398:	9801      	ldr	r0, [sp, #4]
    539a:	47a8      	blx	r5
    539c:	4c1d      	ldr	r4, [pc, #116]	; (5414 <load_calibration_data+0x154>)
    539e:	491e      	ldr	r1, [pc, #120]	; (5418 <load_calibration_data+0x158>)
    53a0:	47a0      	blx	r4
    53a2:	4b1e      	ldr	r3, [pc, #120]	; (541c <load_calibration_data+0x15c>)
    53a4:	6018      	str	r0, [r3, #0]
	
	VADCH = ((float)ADCH * INT1VH)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    53a6:	1c30      	adds	r0, r6, #0
    53a8:	47b8      	blx	r7
    53aa:	1c01      	adds	r1, r0, #0
    53ac:	9802      	ldr	r0, [sp, #8]
    53ae:	47a8      	blx	r5
    53b0:	4919      	ldr	r1, [pc, #100]	; (5418 <load_calibration_data+0x158>)
    53b2:	47a0      	blx	r4
    53b4:	4b1a      	ldr	r3, [pc, #104]	; (5420 <load_calibration_data+0x160>)
    53b6:	6018      	str	r0, [r3, #0]
}
    53b8:	b007      	add	sp, #28
    53ba:	bc3c      	pop	{r2, r3, r4, r5}
    53bc:	4690      	mov	r8, r2
    53be:	4699      	mov	r9, r3
    53c0:	46a2      	mov	sl, r4
    53c2:	46ab      	mov	fp, r5
    53c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53c6:	46c0      	nop			; (mov r8, r8)
    53c8:	00806030 	.word	0x00806030
    53cc:	00806034 	.word	0x00806034
    53d0:	20000bf4 	.word	0x20000bf4
    53d4:	20000be8 	.word	0x20000be8
    53d8:	0000527d 	.word	0x0000527d
    53dc:	00007245 	.word	0x00007245
    53e0:	0000673d 	.word	0x0000673d
    53e4:	20000bfc 	.word	0x20000bfc
    53e8:	20000c04 	.word	0x20000c04
    53ec:	000080a1 	.word	0x000080a1
    53f0:	00007365 	.word	0x00007365
    53f4:	408f4000 	.word	0x408f4000
    53f8:	000079ad 	.word	0x000079ad
    53fc:	3ff00000 	.word	0x3ff00000
    5400:	00008149 	.word	0x00008149
    5404:	20000bf0 	.word	0x20000bf0
    5408:	20000be4 	.word	0x20000be4
    540c:	000072d5 	.word	0x000072d5
    5410:	00006ca5 	.word	0x00006ca5
    5414:	00006a35 	.word	0x00006a35
    5418:	457ff000 	.word	0x457ff000
    541c:	20000be0 	.word	0x20000be0
    5420:	20000c00 	.word	0x20000c00

00005424 <calculate_temperature>:
* 1b as mentioned in data sheet section "Temperature Sensor Characteristics"
* of Electrical Characteristics.
*
*/
float calculate_temperature(uint16_t raw_code)
{
    5424:	b5f0      	push	{r4, r5, r6, r7, lr}
    5426:	b089      	sub	sp, #36	; 0x24
	float VADC;      /* Voltage calculation using ADC result for Coarse Temp calculation */
	float VADCM;     /* Voltage calculation using ADC result for Fine Temp calculation. */
	float INT1VM;    /* Voltage calculation for reality INT1V value during the ADC conversion */
	
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    5428:	4b26      	ldr	r3, [pc, #152]	; (54c4 <calculate_temperature+0xa0>)
    542a:	4798      	blx	r3
    542c:	1c07      	adds	r7, r0, #0
	
	/* Coarse Temp Calculation by assume INT1V=1V for this ADC conversion */
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    542e:	4b26      	ldr	r3, [pc, #152]	; (54c8 <calculate_temperature+0xa4>)
    5430:	681b      	ldr	r3, [r3, #0]
    5432:	1c1a      	adds	r2, r3, #0
    5434:	4d25      	ldr	r5, [pc, #148]	; (54cc <calculate_temperature+0xa8>)
    5436:	4b26      	ldr	r3, [pc, #152]	; (54d0 <calculate_temperature+0xac>)
    5438:	6818      	ldr	r0, [r3, #0]
    543a:	9200      	str	r2, [sp, #0]
    543c:	1c11      	adds	r1, r2, #0
    543e:	47a8      	blx	r5
    5440:	9001      	str	r0, [sp, #4]
    5442:	4b24      	ldr	r3, [pc, #144]	; (54d4 <calculate_temperature+0xb0>)
    5444:	6819      	ldr	r1, [r3, #0]
    5446:	1c0e      	adds	r6, r1, #0
    5448:	4b23      	ldr	r3, [pc, #140]	; (54d8 <calculate_temperature+0xb4>)
    544a:	6818      	ldr	r0, [r3, #0]
    544c:	47a8      	blx	r5
    544e:	1c01      	adds	r1, r0, #0
    5450:	4c22      	ldr	r4, [pc, #136]	; (54dc <calculate_temperature+0xb8>)
    5452:	9801      	ldr	r0, [sp, #4]
    5454:	47a0      	blx	r4
    5456:	9002      	str	r0, [sp, #8]
{
	float VADC;      /* Voltage calculation using ADC result for Coarse Temp calculation */
	float VADCM;     /* Voltage calculation using ADC result for Fine Temp calculation. */
	float INT1VM;    /* Voltage calculation for reality INT1V value during the ADC conversion */
	
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    5458:	9703      	str	r7, [sp, #12]
    545a:	1c38      	adds	r0, r7, #0
    545c:	4920      	ldr	r1, [pc, #128]	; (54e0 <calculate_temperature+0xbc>)
    545e:	47a0      	blx	r4
	
	/* Coarse Temp Calculation by assume INT1V=1V for this ADC conversion */
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    5460:	9604      	str	r6, [sp, #16]
    5462:	1c31      	adds	r1, r6, #0
    5464:	47a8      	blx	r5
    5466:	1c01      	adds	r1, r0, #0
    5468:	4f1e      	ldr	r7, [pc, #120]	; (54e4 <calculate_temperature+0xc0>)
    546a:	9802      	ldr	r0, [sp, #8]
    546c:	47b8      	blx	r7
    546e:	1c01      	adds	r1, r0, #0
    5470:	4e1d      	ldr	r6, [pc, #116]	; (54e8 <calculate_temperature+0xc4>)
    5472:	9800      	ldr	r0, [sp, #0]
    5474:	47b0      	blx	r6
    5476:	4b1d      	ldr	r3, [pc, #116]	; (54ec <calculate_temperature+0xc8>)
    5478:	9006      	str	r0, [sp, #24]
    547a:	6018      	str	r0, [r3, #0]
	
	/* Calculation to find the real INT1V value during the ADC conversion */
	INT1VM = INT1VR + (((INT1VH - INT1VR) * (coarse_temp - tempR))/(tempH - tempR));
    547c:	4b1c      	ldr	r3, [pc, #112]	; (54f0 <calculate_temperature+0xcc>)
    547e:	681b      	ldr	r3, [r3, #0]
    5480:	1c19      	adds	r1, r3, #0
    5482:	4b1c      	ldr	r3, [pc, #112]	; (54f4 <calculate_temperature+0xd0>)
    5484:	6818      	ldr	r0, [r3, #0]
    5486:	9105      	str	r1, [sp, #20]
    5488:	47a8      	blx	r5
    548a:	9007      	str	r0, [sp, #28]
    548c:	9806      	ldr	r0, [sp, #24]
    548e:	9900      	ldr	r1, [sp, #0]
    5490:	47a8      	blx	r5
    5492:	1c01      	adds	r1, r0, #0
    5494:	9807      	ldr	r0, [sp, #28]
    5496:	47b8      	blx	r7
    5498:	9901      	ldr	r1, [sp, #4]
    549a:	47a0      	blx	r4
    549c:	1c01      	adds	r1, r0, #0
    549e:	9805      	ldr	r0, [sp, #20]
    54a0:	47b0      	blx	r6
    54a2:	1c01      	adds	r1, r0, #0
	
	VADCM = ((float)raw_code * INT1VM)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    54a4:	9803      	ldr	r0, [sp, #12]
    54a6:	47b8      	blx	r7
    54a8:	490d      	ldr	r1, [pc, #52]	; (54e0 <calculate_temperature+0xbc>)
    54aa:	47a0      	blx	r4
	
	/* Fine Temp Calculation by replace INT1V=1V by INT1V = INT1Vm for ADC conversion */
	fine_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADCM - VADCR));
    54ac:	9904      	ldr	r1, [sp, #16]
    54ae:	47a8      	blx	r5
    54b0:	1c01      	adds	r1, r0, #0
    54b2:	9802      	ldr	r0, [sp, #8]
    54b4:	47b8      	blx	r7
    54b6:	1c01      	adds	r1, r0, #0
    54b8:	9800      	ldr	r0, [sp, #0]
    54ba:	47b0      	blx	r6
    54bc:	4b0e      	ldr	r3, [pc, #56]	; (54f8 <calculate_temperature+0xd4>)
    54be:	6018      	str	r0, [r3, #0]
	
	return fine_temp;
}
    54c0:	b009      	add	sp, #36	; 0x24
    54c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54c4:	000072d5 	.word	0x000072d5
    54c8:	20000bfc 	.word	0x20000bfc
    54cc:	00006f09 	.word	0x00006f09
    54d0:	20000c04 	.word	0x20000c04
    54d4:	20000be0 	.word	0x20000be0
    54d8:	20000c00 	.word	0x20000c00
    54dc:	00006a35 	.word	0x00006a35
    54e0:	457ff000 	.word	0x457ff000
    54e4:	00006ca5 	.word	0x00006ca5
    54e8:	0000673d 	.word	0x0000673d
    54ec:	20000bec 	.word	0x20000bec
    54f0:	20000bf0 	.word	0x20000bf0
    54f4:	20000be4 	.word	0x20000be4
    54f8:	20000bf8 	.word	0x20000bf8

000054fc <updateParameter>:
}

void updateParameter(void)
{
	//to be done..
}
    54fc:	4770      	bx	lr
    54fe:	46c0      	nop			; (mov r8, r8)

00005500 <get_avg_current>:
	commandDataLength = 0;//reset commandDataLength to 0
	system_busy_flag = 0;
}

static void get_avg_current()
{
    5500:	b538      	push	{r3, r4, r5, lr}
	static uint16_t avg_charge_current_old = 0;
	static uint16_t avg_discharge_current_old = 0;
	int16_t diff = 0;
	
	if (charge_sample_num >0)
    5502:	4b23      	ldr	r3, [pc, #140]	; (5590 <get_avg_current+0x90>)
    5504:	681a      	ldr	r2, [r3, #0]
    5506:	2a00      	cmp	r2, #0
    5508:	d01e      	beq.n	5548 <get_avg_current+0x48>
	{
		avg_charge_current = (uint16_t)(total_charge_current / charge_sample_num);
    550a:	4c22      	ldr	r4, [pc, #136]	; (5594 <get_avg_current+0x94>)
    550c:	6820      	ldr	r0, [r4, #0]
    550e:	6861      	ldr	r1, [r4, #4]
    5510:	2300      	movs	r3, #0
    5512:	4d21      	ldr	r5, [pc, #132]	; (5598 <get_avg_current+0x98>)
    5514:	47a8      	blx	r5
    5516:	b280      	uxth	r0, r0
    5518:	4b20      	ldr	r3, [pc, #128]	; (559c <get_avg_current+0x9c>)
    551a:	8018      	strh	r0, [r3, #0]
		total_charge_current = 0;
    551c:	2200      	movs	r2, #0
    551e:	2300      	movs	r3, #0
    5520:	6022      	str	r2, [r4, #0]
    5522:	6063      	str	r3, [r4, #4]
		charge_sample_num = 0;
    5524:	4b1a      	ldr	r3, [pc, #104]	; (5590 <get_avg_current+0x90>)
    5526:	601a      	str	r2, [r3, #0]
    5528:	4b1d      	ldr	r3, [pc, #116]	; (55a0 <get_avg_current+0xa0>)
    552a:	881b      	ldrh	r3, [r3, #0]
    552c:	1ac3      	subs	r3, r0, r3
		diff = (int16_t)(avg_charge_current - avg_charge_current_old);
		if (diff > 20 || diff < -20)//20 adc reading unit = 0.005v
    552e:	3314      	adds	r3, #20
    5530:	b29b      	uxth	r3, r3
    5532:	2b28      	cmp	r3, #40	; 0x28
    5534:	d905      	bls.n	5542 <get_avg_current+0x42>
		{
			dateReportFlag = 1;
    5536:	3201      	adds	r2, #1
    5538:	4b1a      	ldr	r3, [pc, #104]	; (55a4 <get_avg_current+0xa4>)
    553a:	701a      	strb	r2, [r3, #0]
			avg_charge_current_old = avg_charge_current;
    553c:	4b18      	ldr	r3, [pc, #96]	; (55a0 <get_avg_current+0xa0>)
    553e:	8018      	strh	r0, [r3, #0]
    5540:	e002      	b.n	5548 <get_avg_current+0x48>
		}else{
			dateReportFlag = 0;
    5542:	2200      	movs	r2, #0
    5544:	4b17      	ldr	r3, [pc, #92]	; (55a4 <get_avg_current+0xa4>)
    5546:	701a      	strb	r2, [r3, #0]
		}
	}
	if (discharge_sample_num > 0)
    5548:	4b17      	ldr	r3, [pc, #92]	; (55a8 <get_avg_current+0xa8>)
    554a:	681a      	ldr	r2, [r3, #0]
    554c:	2a00      	cmp	r2, #0
    554e:	d01e      	beq.n	558e <get_avg_current+0x8e>
	{	
		avg_discharge_current = (uint16_t)(total_discharge_current / discharge_sample_num);
    5550:	4c16      	ldr	r4, [pc, #88]	; (55ac <get_avg_current+0xac>)
    5552:	6820      	ldr	r0, [r4, #0]
    5554:	6861      	ldr	r1, [r4, #4]
    5556:	2300      	movs	r3, #0
    5558:	4d0f      	ldr	r5, [pc, #60]	; (5598 <get_avg_current+0x98>)
    555a:	47a8      	blx	r5
    555c:	b280      	uxth	r0, r0
    555e:	4b14      	ldr	r3, [pc, #80]	; (55b0 <get_avg_current+0xb0>)
    5560:	8018      	strh	r0, [r3, #0]
		total_discharge_current = 0;
    5562:	2200      	movs	r2, #0
    5564:	2300      	movs	r3, #0
    5566:	6022      	str	r2, [r4, #0]
    5568:	6063      	str	r3, [r4, #4]
		discharge_sample_num = 0;
    556a:	4b0f      	ldr	r3, [pc, #60]	; (55a8 <get_avg_current+0xa8>)
    556c:	601a      	str	r2, [r3, #0]
    556e:	4b11      	ldr	r3, [pc, #68]	; (55b4 <get_avg_current+0xb4>)
    5570:	881b      	ldrh	r3, [r3, #0]
    5572:	1ac3      	subs	r3, r0, r3
		diff = (int16_t)(avg_discharge_current - avg_discharge_current_old);
		if (diff > 20 || diff < -20)//20 adc reading unit = 0.005v
    5574:	3314      	adds	r3, #20
    5576:	b29b      	uxth	r3, r3
    5578:	2b28      	cmp	r3, #40	; 0x28
    557a:	d905      	bls.n	5588 <get_avg_current+0x88>
		{
			dateReportFlag = 1;
    557c:	3201      	adds	r2, #1
    557e:	4b09      	ldr	r3, [pc, #36]	; (55a4 <get_avg_current+0xa4>)
    5580:	701a      	strb	r2, [r3, #0]
			avg_discharge_current_old = avg_discharge_current;
    5582:	4b0c      	ldr	r3, [pc, #48]	; (55b4 <get_avg_current+0xb4>)
    5584:	8018      	strh	r0, [r3, #0]
    5586:	e002      	b.n	558e <get_avg_current+0x8e>
		}else{
			dateReportFlag = 0;
    5588:	2200      	movs	r2, #0
    558a:	4b06      	ldr	r3, [pc, #24]	; (55a4 <get_avg_current+0xa4>)
    558c:	701a      	strb	r2, [r3, #0]
		}
	}
	
}
    558e:	bd38      	pop	{r3, r4, r5, pc}
    5590:	20000768 	.word	0x20000768
    5594:	200007c8 	.word	0x200007c8
    5598:	0000660d 	.word	0x0000660d
    559c:	200007b2 	.word	0x200007b2
    55a0:	20000774 	.word	0x20000774
    55a4:	200007c0 	.word	0x200007c0
    55a8:	20000770 	.word	0x20000770
    55ac:	200007b8 	.word	0x200007b8
    55b0:	200007b6 	.word	0x200007b6
    55b4:	200007ac 	.word	0x200007ac

000055b8 <send_battery_data>:




void send_battery_data(void)
{	
    55b8:	b530      	push	{r4, r5, lr}
    55ba:	b089      	sub	sp, #36	; 0x24
	if (dateReportFlag == 0)
    55bc:	4b25      	ldr	r3, [pc, #148]	; (5654 <send_battery_data+0x9c>)
    55be:	781b      	ldrb	r3, [r3, #0]
    55c0:	2b00      	cmp	r3, #0
    55c2:	d044      	beq.n	564e <send_battery_data+0x96>
	{
		return;
	}
	struct rtc_calendar_time current_time;
	rtc_calendar_get_time(&rtc_instance, &current_time);
    55c4:	ac06      	add	r4, sp, #24
    55c6:	4824      	ldr	r0, [pc, #144]	; (5658 <send_battery_data+0xa0>)
    55c8:	1c21      	adds	r1, r4, #0
    55ca:	4b24      	ldr	r3, [pc, #144]	; (565c <send_battery_data+0xa4>)
    55cc:	4798      	blx	r3
	battery_data[0] = (uint8_t)((avg_charge_current >> 8) & 0xff);
    55ce:	4924      	ldr	r1, [pc, #144]	; (5660 <send_battery_data+0xa8>)
    55d0:	880a      	ldrh	r2, [r1, #0]
    55d2:	4b24      	ldr	r3, [pc, #144]	; (5664 <send_battery_data+0xac>)
    55d4:	0a10      	lsrs	r0, r2, #8
    55d6:	7018      	strb	r0, [r3, #0]
	battery_data[1] = (uint8_t)(avg_charge_current & 0xff);
    55d8:	705a      	strb	r2, [r3, #1]
 	battery_data[2] = (uint8_t)((avg_discharge_current >> 8) & 0xff);
    55da:	4a23      	ldr	r2, [pc, #140]	; (5668 <send_battery_data+0xb0>)
    55dc:	8810      	ldrh	r0, [r2, #0]
    55de:	0a05      	lsrs	r5, r0, #8
    55e0:	709d      	strb	r5, [r3, #2]
	battery_data[3] = (uint8_t)(avg_discharge_current & 0xff);
    55e2:	70d8      	strb	r0, [r3, #3]
	battery_data[4] = (uint8_t)((temprerature_value >> 8) & 0xff);
    55e4:	4821      	ldr	r0, [pc, #132]	; (566c <send_battery_data+0xb4>)
    55e6:	8800      	ldrh	r0, [r0, #0]
    55e8:	0a05      	lsrs	r5, r0, #8
    55ea:	711d      	strb	r5, [r3, #4]
	battery_data[5] = (uint8_t)(temprerature_value & 0xff);
    55ec:	7158      	strb	r0, [r3, #5]
	battery_data[6] = battery_status;
    55ee:	4820      	ldr	r0, [pc, #128]	; (5670 <send_battery_data+0xb8>)
    55f0:	7800      	ldrb	r0, [r0, #0]
    55f2:	7198      	strb	r0, [r3, #6]
	battery_data[7] = charger_status;
    55f4:	481f      	ldr	r0, [pc, #124]	; (5674 <send_battery_data+0xbc>)
    55f6:	7800      	ldrb	r0, [r0, #0]
    55f8:	71d8      	strb	r0, [r3, #7]
	battery_data[8] = (uint8_t)((current_time.year >> 8) & 0xff);
    55fa:	88e0      	ldrh	r0, [r4, #6]
    55fc:	0a05      	lsrs	r5, r0, #8
    55fe:	721d      	strb	r5, [r3, #8]
	battery_data[9] = (uint8_t)(current_time.year & 0xff);
    5600:	7258      	strb	r0, [r3, #9]
	battery_data[10] = current_time.month;
    5602:	7960      	ldrb	r0, [r4, #5]
    5604:	7298      	strb	r0, [r3, #10]
	battery_data[11] = current_time.day;
    5606:	7920      	ldrb	r0, [r4, #4]
    5608:	72d8      	strb	r0, [r3, #11]
	battery_data[12] = current_time.hour;
    560a:	78a0      	ldrb	r0, [r4, #2]
    560c:	7318      	strb	r0, [r3, #12]
	battery_data[13] = current_time.minute;
    560e:	7860      	ldrb	r0, [r4, #1]
    5610:	7358      	strb	r0, [r3, #13]
	battery_data[14] = current_time.second;
    5612:	7820      	ldrb	r0, [r4, #0]
    5614:	7398      	strb	r0, [r3, #14]
	
	avg_charge_current = 0;
    5616:	2300      	movs	r3, #0
    5618:	800b      	strh	r3, [r1, #0]
	avg_discharge_current = 0;
    561a:	8013      	strh	r3, [r2, #0]
	
	
	uint8_t tx_data[19];
	tx_data[0] = START_FLAG;
    561c:	ab01      	add	r3, sp, #4
    561e:	2268      	movs	r2, #104	; 0x68
    5620:	701a      	strb	r2, [r3, #0]
	tx_data[1] = TX_TYPE_BATTERY_DATA;
    5622:	3a58      	subs	r2, #88	; 0x58
    5624:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 15;
    5626:	3a01      	subs	r2, #1
    5628:	709a      	strb	r2, [r3, #2]
    562a:	2300      	movs	r3, #0
	for (uint8_t i=0;i<sizeof(battery_data);i++)
	{
		tx_data[i+3] = battery_data[i];
    562c:	480d      	ldr	r0, [pc, #52]	; (5664 <send_battery_data+0xac>)
    562e:	aa01      	add	r2, sp, #4
    5630:	18d2      	adds	r2, r2, r3
    5632:	5c19      	ldrb	r1, [r3, r0]
    5634:	70d1      	strb	r1, [r2, #3]
    5636:	3301      	adds	r3, #1
	
	uint8_t tx_data[19];
	tx_data[0] = START_FLAG;
	tx_data[1] = TX_TYPE_BATTERY_DATA;
	tx_data[2] = 15;
	for (uint8_t i=0;i<sizeof(battery_data);i++)
    5638:	2b0f      	cmp	r3, #15
    563a:	d1f8      	bne.n	562e <send_battery_data+0x76>
	{
		tx_data[i+3] = battery_data[i];
	}
	tx_data[18] = END_FLAG;
    563c:	a801      	add	r0, sp, #4
    563e:	3379      	adds	r3, #121	; 0x79
    5640:	7483      	strb	r3, [r0, #18]
	udi_cdc_write_buf(tx_data,19);
    5642:	2113      	movs	r1, #19
    5644:	4b0c      	ldr	r3, [pc, #48]	; (5678 <send_battery_data+0xc0>)
    5646:	4798      	blx	r3
	
	dateReportFlag = 0;
    5648:	2200      	movs	r2, #0
    564a:	4b02      	ldr	r3, [pc, #8]	; (5654 <send_battery_data+0x9c>)
    564c:	701a      	strb	r2, [r3, #0]
}
    564e:	b009      	add	sp, #36	; 0x24
    5650:	bd30      	pop	{r4, r5, pc}
    5652:	46c0      	nop			; (mov r8, r8)
    5654:	200007c0 	.word	0x200007c0
    5658:	20000c08 	.word	0x20000c08
    565c:	00001aed 	.word	0x00001aed
    5660:	200007b2 	.word	0x200007b2
    5664:	20000790 	.word	0x20000790
    5668:	200007b6 	.word	0x200007b6
    566c:	20000c82 	.word	0x20000c82
    5670:	200007af 	.word	0x200007af
    5674:	200007b0 	.word	0x200007b0
    5678:	00000e6d 	.word	0x00000e6d

0000567c <rtc_match_callback>:
}


//! [rtc_alarm_callback]
void rtc_match_callback(void)
{
    567c:	b510      	push	{r4, lr}
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    567e:	2280      	movs	r2, #128	; 0x80
    5680:	05d2      	lsls	r2, r2, #23
    5682:	4b0b      	ldr	r3, [pc, #44]	; (56b0 <rtc_match_callback+0x34>)
    5684:	61da      	str	r2, [r3, #28]
	/* Do something on RTC alarm match here */
	port_pin_toggle_output_level(LED_0_PIN);
	get_avg_current();
    5686:	4b0b      	ldr	r3, [pc, #44]	; (56b4 <rtc_match_callback+0x38>)
    5688:	4798      	blx	r3
	send_battery_data();
    568a:	4b0b      	ldr	r3, [pc, #44]	; (56b8 <rtc_match_callback+0x3c>)
    568c:	4798      	blx	r3

	/* Set new alarm in 5 seconds */
	//! [alarm_mask]
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    568e:	4c0b      	ldr	r4, [pc, #44]	; (56bc <rtc_match_callback+0x40>)
    5690:	2301      	movs	r3, #1
    5692:	7223      	strb	r3, [r4, #8]
	//! [alarm_mask]

	//! [set_alarm]
	alarm.time.second += 3;
    5694:	7820      	ldrb	r0, [r4, #0]
    5696:	3003      	adds	r0, #3
	alarm.time.second = alarm.time.second % 60;
    5698:	b2c0      	uxtb	r0, r0
    569a:	213c      	movs	r1, #60	; 0x3c
    569c:	4b08      	ldr	r3, [pc, #32]	; (56c0 <rtc_match_callback+0x44>)
    569e:	4798      	blx	r3
    56a0:	7021      	strb	r1, [r4, #0]

	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
    56a2:	4808      	ldr	r0, [pc, #32]	; (56c4 <rtc_match_callback+0x48>)
    56a4:	1c21      	adds	r1, r4, #0
    56a6:	2200      	movs	r2, #0
    56a8:	4b07      	ldr	r3, [pc, #28]	; (56c8 <rtc_match_callback+0x4c>)
    56aa:	4798      	blx	r3
	//! [set_alarm]
}
    56ac:	bd10      	pop	{r4, pc}
    56ae:	46c0      	nop			; (mov r8, r8)
    56b0:	41004480 	.word	0x41004480
    56b4:	00005501 	.word	0x00005501
    56b8:	000055b9 	.word	0x000055b9
    56bc:	20000c30 	.word	0x20000c30
    56c0:	00006399 	.word	0x00006399
    56c4:	20000c08 	.word	0x20000c08
    56c8:	00001b19 	.word	0x00001b19

000056cc <send_board_time_data>:
	
	dateReportFlag = 0;
}

void send_board_time_data(void)
{
    56cc:	b510      	push	{r4, lr}
    56ce:	b086      	sub	sp, #24
	struct rtc_calendar_time current_time;
	rtc_calendar_get_time(&rtc_instance, &current_time);
    56d0:	ac04      	add	r4, sp, #16
    56d2:	4815      	ldr	r0, [pc, #84]	; (5728 <send_board_time_data+0x5c>)
    56d4:	1c21      	adds	r1, r4, #0
    56d6:	4b15      	ldr	r3, [pc, #84]	; (572c <send_board_time_data+0x60>)
    56d8:	4798      	blx	r3
	time_data[0] = (uint8_t)((current_time.year >> 8) & 0xff);
    56da:	88e2      	ldrh	r2, [r4, #6]
    56dc:	4b14      	ldr	r3, [pc, #80]	; (5730 <send_board_time_data+0x64>)
    56de:	0a11      	lsrs	r1, r2, #8
    56e0:	7019      	strb	r1, [r3, #0]
	time_data[1] = (uint8_t)(current_time.year & 0xff);
    56e2:	705a      	strb	r2, [r3, #1]
	time_data[2] = current_time.month;
    56e4:	7962      	ldrb	r2, [r4, #5]
    56e6:	709a      	strb	r2, [r3, #2]
	time_data[3] = current_time.day;
    56e8:	7922      	ldrb	r2, [r4, #4]
    56ea:	70da      	strb	r2, [r3, #3]
	time_data[4] = current_time.hour;
    56ec:	78a2      	ldrb	r2, [r4, #2]
    56ee:	711a      	strb	r2, [r3, #4]
	time_data[5] = current_time.minute;
    56f0:	7862      	ldrb	r2, [r4, #1]
    56f2:	715a      	strb	r2, [r3, #5]
	time_data[6] = current_time.second;
    56f4:	7822      	ldrb	r2, [r4, #0]
    56f6:	719a      	strb	r2, [r3, #6]
	
	uint8_t tx_data[11];
	tx_data[0] = START_FLAG;
    56f8:	ab01      	add	r3, sp, #4
    56fa:	2268      	movs	r2, #104	; 0x68
    56fc:	701a      	strb	r2, [r3, #0]
	tx_data[1] = TX_TYPE_TIME_DATA;
    56fe:	3a57      	subs	r2, #87	; 0x57
    5700:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 7;
    5702:	3a0a      	subs	r2, #10
    5704:	709a      	strb	r2, [r3, #2]
    5706:	2300      	movs	r3, #0
	for (uint8_t i=0;i<sizeof(time_data);i++)
	{
		tx_data[i+3] = time_data[i];
    5708:	4809      	ldr	r0, [pc, #36]	; (5730 <send_board_time_data+0x64>)
    570a:	aa01      	add	r2, sp, #4
    570c:	18d2      	adds	r2, r2, r3
    570e:	5c19      	ldrb	r1, [r3, r0]
    5710:	70d1      	strb	r1, [r2, #3]
    5712:	3301      	adds	r3, #1
	
	uint8_t tx_data[11];
	tx_data[0] = START_FLAG;
	tx_data[1] = TX_TYPE_TIME_DATA;
	tx_data[2] = 7;
	for (uint8_t i=0;i<sizeof(time_data);i++)
    5714:	2b07      	cmp	r3, #7
    5716:	d1f8      	bne.n	570a <send_board_time_data+0x3e>
	{
		tx_data[i+3] = time_data[i];
	}
	tx_data[10] = END_FLAG;
    5718:	a801      	add	r0, sp, #4
    571a:	3381      	adds	r3, #129	; 0x81
    571c:	7283      	strb	r3, [r0, #10]
	udi_cdc_write_buf(tx_data,11);
    571e:	210b      	movs	r1, #11
    5720:	4b04      	ldr	r3, [pc, #16]	; (5734 <send_board_time_data+0x68>)
    5722:	4798      	blx	r3
}
    5724:	b006      	add	sp, #24
    5726:	bd10      	pop	{r4, pc}
    5728:	20000c08 	.word	0x20000c08
    572c:	00001aed 	.word	0x00001aed
    5730:	200007a4 	.word	0x200007a4
    5734:	00000e6d 	.word	0x00000e6d

00005738 <updateTime>:
{
	//to be done..
}

void updateTime(void)
{
    5738:	b500      	push	{lr}
    573a:	b083      	sub	sp, #12
		struct rtc_calendar_time *const time)
{
	time->second = 0;
	time->minute = 0;
	time->hour   = 0;
	time->pm     = 0;
    573c:	2300      	movs	r3, #0
    573e:	466a      	mov	r2, sp
    5740:	70d3      	strb	r3, [r2, #3]
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
	time.year   = (uint16_t)((commandData[0] << 8) + commandData[1]);
    5742:	4b0b      	ldr	r3, [pc, #44]	; (5770 <updateTime+0x38>)
    5744:	781a      	ldrb	r2, [r3, #0]
    5746:	0212      	lsls	r2, r2, #8
    5748:	7859      	ldrb	r1, [r3, #1]
    574a:	188a      	adds	r2, r1, r2
    574c:	4669      	mov	r1, sp
    574e:	80ca      	strh	r2, [r1, #6]
	time.month  = commandData[2];
    5750:	789a      	ldrb	r2, [r3, #2]
    5752:	714a      	strb	r2, [r1, #5]
	time.day    = commandData[3];
    5754:	78da      	ldrb	r2, [r3, #3]
    5756:	710a      	strb	r2, [r1, #4]
	time.hour   = commandData[4];
    5758:	791a      	ldrb	r2, [r3, #4]
    575a:	708a      	strb	r2, [r1, #2]
	time.minute = commandData[5];
    575c:	795a      	ldrb	r2, [r3, #5]
    575e:	704a      	strb	r2, [r1, #1]
	time.second = commandData[6];
    5760:	799b      	ldrb	r3, [r3, #6]
    5762:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &time);
    5764:	4803      	ldr	r0, [pc, #12]	; (5774 <updateTime+0x3c>)
    5766:	4b04      	ldr	r3, [pc, #16]	; (5778 <updateTime+0x40>)
    5768:	4798      	blx	r3
}
    576a:	b003      	add	sp, #12
    576c:	bd00      	pop	{pc}
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	20000778 	.word	0x20000778
    5774:	20000c08 	.word	0x20000c08
    5778:	00001ad5 	.word	0x00001ad5

0000577c <tcc_callback_to_change_duty_cycle>:
struct tcc_module tcc_instance;
//! [module_inst]

//! [callback_funcs]
static void tcc_callback_to_change_duty_cycle(struct tcc_module *const module_inst)
{
    577c:	b508      	push	{r3, lr}
	static uint32_t delay = 20;
	static uint32_t i = 0;

	if (--delay) {
    577e:	4b0c      	ldr	r3, [pc, #48]	; (57b0 <tcc_callback_to_change_duty_cycle+0x34>)
    5780:	681b      	ldr	r3, [r3, #0]
    5782:	3b01      	subs	r3, #1
    5784:	2b00      	cmp	r3, #0
    5786:	d002      	beq.n	578e <tcc_callback_to_change_duty_cycle+0x12>
    5788:	4a09      	ldr	r2, [pc, #36]	; (57b0 <tcc_callback_to_change_duty_cycle+0x34>)
    578a:	6013      	str	r3, [r2, #0]
    578c:	e00f      	b.n	57ae <tcc_callback_to_change_duty_cycle+0x32>
		return;
	}
	delay = 20;
    578e:	2214      	movs	r2, #20
    5790:	4b07      	ldr	r3, [pc, #28]	; (57b0 <tcc_callback_to_change_duty_cycle+0x34>)
    5792:	601a      	str	r2, [r3, #0]
	i = (i + 0x0800) & 0xFFFF;
    5794:	4b07      	ldr	r3, [pc, #28]	; (57b4 <tcc_callback_to_change_duty_cycle+0x38>)
    5796:	681a      	ldr	r2, [r3, #0]
    5798:	2180      	movs	r1, #128	; 0x80
    579a:	0109      	lsls	r1, r1, #4
    579c:	468c      	mov	ip, r1
    579e:	4462      	add	r2, ip
    57a0:	0412      	lsls	r2, r2, #16
    57a2:	0c12      	lsrs	r2, r2, #16
    57a4:	601a      	str	r2, [r3, #0]
	tcc_set_compare_value(module_inst,(enum tcc_match_capture_channel)(TCC_MATCH_CAPTURE_CHANNEL_0 + CONF_PWM_CHANNEL),i + 1);
    57a6:	3201      	adds	r2, #1
    57a8:	2100      	movs	r1, #0
    57aa:	4b03      	ldr	r3, [pc, #12]	; (57b8 <tcc_callback_to_change_duty_cycle+0x3c>)
    57ac:	4798      	blx	r3
	//try modify the duty_cycle to get adc reading*****
	//tcc_set_compare_value(module_inst,(enum tcc_match_capture_channel)(TCC_MATCH_CAPTURE_CHANNEL_0 + CONF_PWM_CHANNEL),0xffff);
}
    57ae:	bd08      	pop	{r3, pc}
    57b0:	20000108 	.word	0x20000108
    57b4:	2000078c 	.word	0x2000078c
    57b8:	00003431 	.word	0x00003431

000057bc <battery_status_update>:



uint8_t battery_status_update(void)
{
	if (charger_status)
    57bc:	4b0c      	ldr	r3, [pc, #48]	; (57f0 <battery_status_update+0x34>)
    57be:	781b      	ldrb	r3, [r3, #0]
    57c0:	2b00      	cmp	r3, #0
    57c2:	d00b      	beq.n	57dc <battery_status_update+0x20>
	{
		if (charge_signal_adc_result > 0x15)
    57c4:	4b0b      	ldr	r3, [pc, #44]	; (57f4 <battery_status_update+0x38>)
    57c6:	881b      	ldrh	r3, [r3, #0]
    57c8:	2b15      	cmp	r3, #21
    57ca:	d903      	bls.n	57d4 <battery_status_update+0x18>
		{
			battery_status = 1; //charging
    57cc:	2201      	movs	r2, #1
    57ce:	4b0a      	ldr	r3, [pc, #40]	; (57f8 <battery_status_update+0x3c>)
    57d0:	701a      	strb	r2, [r3, #0]
    57d2:	e00a      	b.n	57ea <battery_status_update+0x2e>
		}else{
			battery_status = 0;//not current in/out for battery
    57d4:	2200      	movs	r2, #0
    57d6:	4b08      	ldr	r3, [pc, #32]	; (57f8 <battery_status_update+0x3c>)
    57d8:	701a      	strb	r2, [r3, #0]
    57da:	e006      	b.n	57ea <battery_status_update+0x2e>
		}
	}else if (discharge_signal_adc_result > 0x15)
    57dc:	4b07      	ldr	r3, [pc, #28]	; (57fc <battery_status_update+0x40>)
    57de:	881b      	ldrh	r3, [r3, #0]
    57e0:	2b15      	cmp	r3, #21
    57e2:	d902      	bls.n	57ea <battery_status_update+0x2e>
	{
		battery_status = 2;// battery discharging
    57e4:	2202      	movs	r2, #2
    57e6:	4b04      	ldr	r3, [pc, #16]	; (57f8 <battery_status_update+0x3c>)
    57e8:	701a      	strb	r2, [r3, #0]
	}
	return battery_status;
    57ea:	4b03      	ldr	r3, [pc, #12]	; (57f8 <battery_status_update+0x3c>)
    57ec:	7818      	ldrb	r0, [r3, #0]
}
    57ee:	4770      	bx	lr
    57f0:	200007b0 	.word	0x200007b0
    57f4:	20000c28 	.word	0x20000c28
    57f8:	200007af 	.word	0x200007af
    57fc:	20000c80 	.word	0x20000c80

00005800 <adc_start_read_temp>:


uint16_t adc_start_read_temp(void)
{
    5800:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    5802:	4b29      	ldr	r3, [pc, #164]	; (58a8 <adc_start_read_temp+0xa8>)
    5804:	6819      	ldr	r1, [r3, #0]
    5806:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    5808:	b25b      	sxtb	r3, r3
    580a:	2b00      	cmp	r3, #0
    580c:	dbfb      	blt.n	5806 <adc_start_read_temp+0x6>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    580e:	690b      	ldr	r3, [r1, #16]
    5810:	221f      	movs	r2, #31
    5812:	4393      	bics	r3, r2
    5814:	3a07      	subs	r2, #7
    5816:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    5818:	610b      	str	r3, [r1, #16]
    581a:	7e4b      	ldrb	r3, [r1, #25]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    581c:	b25b      	sxtb	r3, r3
    581e:	2b00      	cmp	r3, #0
    5820:	dbfb      	blt.n	581a <adc_start_read_temp+0x1a>
    5822:	7e4b      	ldrb	r3, [r1, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    5824:	b25b      	sxtb	r3, r3
    5826:	2b00      	cmp	r3, #0
    5828:	dbfb      	blt.n	5822 <adc_start_read_temp+0x22>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    582a:	7b0a      	ldrb	r2, [r1, #12]
    582c:	2302      	movs	r3, #2
    582e:	4313      	orrs	r3, r2
    5830:	730b      	strb	r3, [r1, #12]
    5832:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    5834:	b25b      	sxtb	r3, r3
    5836:	2b00      	cmp	r3, #0
    5838:	dbfb      	blt.n	5832 <adc_start_read_temp+0x32>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    583a:	2001      	movs	r0, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    583c:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    583e:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5840:	7e0b      	ldrb	r3, [r1, #24]
    5842:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5844:	1c02      	adds	r2, r0, #0
    5846:	401a      	ands	r2, r3
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5848:	421d      	tst	r5, r3
    584a:	d000      	beq.n	584e <adc_start_read_temp+0x4e>
		status_flags |= ADC_STATUS_WINDOW;
    584c:	4322      	orrs	r2, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    584e:	421c      	tst	r4, r3
    5850:	d000      	beq.n	5854 <adc_start_read_temp+0x54>
		status_flags |= ADC_STATUS_OVERRUN;
    5852:	432a      	orrs	r2, r5
	uint16_t adc_result = 0;
	adc_set_positive_input(&adc_instance,ADC_POSITIVE_INPUT_TEMP);
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    5854:	4210      	tst	r0, r2
    5856:	d0f3      	beq.n	5840 <adc_start_read_temp+0x40>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5858:	7e0a      	ldrb	r2, [r1, #24]
    585a:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    585c:	2301      	movs	r3, #1
    585e:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5860:	0750      	lsls	r0, r2, #29
    5862:	d501      	bpl.n	5868 <adc_start_read_temp+0x68>
		status_flags |= ADC_STATUS_WINDOW;
    5864:	2002      	movs	r0, #2
    5866:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5868:	0792      	lsls	r2, r2, #30
    586a:	d501      	bpl.n	5870 <adc_start_read_temp+0x70>
		status_flags |= ADC_STATUS_OVERRUN;
    586c:	2204      	movs	r2, #4
    586e:	4313      	orrs	r3, r2
}


uint16_t adc_start_read_temp(void)
{
	uint16_t adc_result = 0;
    5870:	2000      	movs	r0, #0
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    5872:	07db      	lsls	r3, r3, #31
    5874:	d516      	bpl.n	58a4 <adc_start_read_temp+0xa4>
    5876:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    5878:	b25b      	sxtb	r3, r3
    587a:	2b00      	cmp	r3, #0
    587c:	dbfb      	blt.n	5876 <adc_start_read_temp+0x76>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    587e:	8b48      	ldrh	r0, [r1, #26]
    5880:	b280      	uxth	r0, r0
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    5882:	2301      	movs	r3, #1
    5884:	760b      	strb	r3, [r1, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5886:	7e0a      	ldrb	r2, [r1, #24]
    5888:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    588a:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    588c:	0754      	lsls	r4, r2, #29
    588e:	d501      	bpl.n	5894 <adc_start_read_temp+0x94>
		status_flags |= ADC_STATUS_WINDOW;
    5890:	2402      	movs	r4, #2
    5892:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5894:	0792      	lsls	r2, r2, #30
    5896:	d501      	bpl.n	589c <adc_start_read_temp+0x9c>
		status_flags |= ADC_STATUS_OVERRUN;
    5898:	2204      	movs	r2, #4
    589a:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    589c:	075b      	lsls	r3, r3, #29
    589e:	d501      	bpl.n	58a4 <adc_start_read_temp+0xa4>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    58a0:	2302      	movs	r3, #2
    58a2:	760b      	strb	r3, [r1, #24]
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
		
	adc_read(&adc_instance, &adc_result);
	
	return adc_result;
}
    58a4:	bd30      	pop	{r4, r5, pc}
    58a6:	46c0      	nop			; (mov r8, r8)
    58a8:	20000c84 	.word	0x20000c84

000058ac <adc_get_temperature>:

void adc_get_temperature(void)
{
    58ac:	b508      	push	{r3, lr}
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    58ae:	4a0a      	ldr	r2, [pc, #40]	; (58d8 <adc_get_temperature+0x2c>)
    58b0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    58b2:	2302      	movs	r3, #2
    58b4:	430b      	orrs	r3, r1
    58b6:	6413      	str	r3, [r2, #64]	; 0x40
	float temp;
	system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE);
	load_calibration_data();
    58b8:	4b08      	ldr	r3, [pc, #32]	; (58dc <adc_get_temperature+0x30>)
    58ba:	4798      	blx	r3
	raw_result = adc_start_read_temp();
    58bc:	4b08      	ldr	r3, [pc, #32]	; (58e0 <adc_get_temperature+0x34>)
    58be:	4798      	blx	r3
    58c0:	4b08      	ldr	r3, [pc, #32]	; (58e4 <adc_get_temperature+0x38>)
    58c2:	8018      	strh	r0, [r3, #0]
	temp = calculate_temperature(raw_result);
    58c4:	4b08      	ldr	r3, [pc, #32]	; (58e8 <adc_get_temperature+0x3c>)
    58c6:	4798      	blx	r3
	temprerature_value = (uint16_t)(temp * 1000);
    58c8:	4908      	ldr	r1, [pc, #32]	; (58ec <adc_get_temperature+0x40>)
    58ca:	4b09      	ldr	r3, [pc, #36]	; (58f0 <adc_get_temperature+0x44>)
    58cc:	4798      	blx	r3
    58ce:	4b09      	ldr	r3, [pc, #36]	; (58f4 <adc_get_temperature+0x48>)
    58d0:	4798      	blx	r3
    58d2:	4b09      	ldr	r3, [pc, #36]	; (58f8 <adc_get_temperature+0x4c>)
    58d4:	8018      	strh	r0, [r3, #0]
	//udi_cdc_write_buf(&temprerature_value,2);
	
}
    58d6:	bd08      	pop	{r3, pc}
    58d8:	40000800 	.word	0x40000800
    58dc:	000052c1 	.word	0x000052c1
    58e0:	00005801 	.word	0x00005801
    58e4:	20000c20 	.word	0x20000c20
    58e8:	00005425 	.word	0x00005425
    58ec:	447a0000 	.word	0x447a0000
    58f0:	00006ca5 	.word	0x00006ca5
    58f4:	000066a1 	.word	0x000066a1
    58f8:	20000c82 	.word	0x20000c82

000058fc <configure_rtc_callbacks>:
}
//! [rtc_alarm_callback]

//! [setup_rtc_alarm_callback]
void configure_rtc_callbacks(void)
{
    58fc:	b510      	push	{r4, lr}
	//! [reg_callback]
	rtc_calendar_register_callback(
    58fe:	4c05      	ldr	r4, [pc, #20]	; (5914 <configure_rtc_callbacks+0x18>)
    5900:	1c20      	adds	r0, r4, #0
    5902:	4905      	ldr	r1, [pc, #20]	; (5918 <configure_rtc_callbacks+0x1c>)
    5904:	2200      	movs	r2, #0
    5906:	4b05      	ldr	r3, [pc, #20]	; (591c <configure_rtc_callbacks+0x20>)
    5908:	4798      	blx	r3
	&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
	//! [reg_callback]
	//! [en_callback]
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    590a:	1c20      	adds	r0, r4, #0
    590c:	2100      	movs	r1, #0
    590e:	4b04      	ldr	r3, [pc, #16]	; (5920 <configure_rtc_callbacks+0x24>)
    5910:	4798      	blx	r3
	//! [en_callback]
}
    5912:	bd10      	pop	{r4, pc}
    5914:	20000c08 	.word	0x20000c08
    5918:	0000567d 	.word	0x0000567d
    591c:	00001bdd 	.word	0x00001bdd
    5920:	00001bfd 	.word	0x00001bfd

00005924 <configure_rtc_calendar>:
//! [setup_rtc_alarm_callback]

//! [initialize_rtc]
void configure_rtc_calendar(void)
{
    5924:	b570      	push	{r4, r5, r6, lr}
    5926:	b088      	sub	sp, #32
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    5928:	ac03      	add	r4, sp, #12
    592a:	23a0      	movs	r3, #160	; 0xa0
    592c:	011b      	lsls	r3, r3, #4
    592e:	8023      	strh	r3, [r4, #0]
	config->clear_on_match      = false;
    5930:	2300      	movs	r3, #0
    5932:	70a3      	strb	r3, [r4, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    5934:	70e3      	strb	r3, [r4, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    5936:	22fa      	movs	r2, #250	; 0xfa
    5938:	00d2      	lsls	r2, r2, #3
    593a:	80e2      	strh	r2, [r4, #6]
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
	//! [init_conf]

	//! [time_struct]
	alarm.time.year      = 2016;
    593c:	491e      	ldr	r1, [pc, #120]	; (59b8 <configure_rtc_calendar+0x94>)
    593e:	3210      	adds	r2, #16
    5940:	80ca      	strh	r2, [r1, #6]
	alarm.time.month     = 9;
    5942:	2209      	movs	r2, #9
    5944:	714a      	strb	r2, [r1, #5]
	alarm.time.day       = 15;
    5946:	3206      	adds	r2, #6
    5948:	710a      	strb	r2, [r1, #4]
	alarm.time.hour      = 15;
    594a:	708a      	strb	r2, [r1, #2]
	alarm.time.minute    = 18;
    594c:	3203      	adds	r2, #3
    594e:	704a      	strb	r2, [r1, #1]
	alarm.time.second    = 0;
    5950:	700b      	strb	r3, [r1, #0]
	//! [time_struct]

	//! [set_config]
	config_rtc_calendar.clock_24h = true;
    5952:	2501      	movs	r5, #1
    5954:	7125      	strb	r5, [r4, #4]
	config_rtc_calendar.alarm[0].time = alarm.time;
    5956:	a805      	add	r0, sp, #20
    5958:	3a0a      	subs	r2, #10
    595a:	4b18      	ldr	r3, [pc, #96]	; (59bc <configure_rtc_calendar+0x98>)
    595c:	4798      	blx	r3
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
    595e:	7425      	strb	r5, [r4, #16]
	//! [set_config]

	//! [init_rtc]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    5960:	4e17      	ldr	r6, [pc, #92]	; (59c0 <configure_rtc_calendar+0x9c>)
    5962:	1c30      	adds	r0, r6, #0
    5964:	4917      	ldr	r1, [pc, #92]	; (59c4 <configure_rtc_calendar+0xa0>)
    5966:	1c22      	adds	r2, r4, #0
    5968:	4b17      	ldr	r3, [pc, #92]	; (59c8 <configure_rtc_calendar+0xa4>)
    596a:	4798      	blx	r3
	//! [init_rtc]
	
	//[setup and init rtc event]
	struct rtc_calendar_events calendar_event;
	calendar_event.generate_event_on_periodic[3] = true;
    596c:	466b      	mov	r3, sp
    596e:	715d      	strb	r5, [r3, #5]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5970:	6835      	ldr	r5, [r6, #0]

	uint32_t event_mask = 0;

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    5972:	781a      	ldrb	r2, [r3, #0]
		event_mask |= RTC_MODE2_EVCTRL_OVFEO;
    5974:	1e53      	subs	r3, r2, #1
    5976:	419a      	sbcs	r2, r3
    5978:	03d2      	lsls	r2, r2, #15
	}

	/* Check if the user has requested any alarm events */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		if (events->generate_event_on_alarm[i]) {
    597a:	466b      	mov	r3, sp
    597c:	785b      	ldrb	r3, [r3, #1]
    597e:	2b00      	cmp	r3, #0
    5980:	d002      	beq.n	5988 <configure_rtc_calendar+0x64>
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
    5982:	2380      	movs	r3, #128	; 0x80
    5984:	005b      	lsls	r3, r3, #1
    5986:	431a      	orrs	r2, r3
}
//! [setup_rtc_alarm_callback]

//! [initialize_rtc]
void configure_rtc_calendar(void)
{
    5988:	2300      	movs	r3, #0
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
    598a:	2401      	movs	r4, #1
    598c:	20ff      	movs	r0, #255	; 0xff
    598e:	1c19      	adds	r1, r3, #0
    5990:	4469      	add	r1, sp
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
    5992:	7889      	ldrb	r1, [r1, #2]
    5994:	2900      	cmp	r1, #0
    5996:	d003      	beq.n	59a0 <configure_rtc_calendar+0x7c>
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
    5998:	1c21      	adds	r1, r4, #0
    599a:	4099      	lsls	r1, r3
    599c:	4001      	ands	r1, r0
    599e:	430a      	orrs	r2, r1
    59a0:	3301      	adds	r3, #1
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
    59a2:	2b08      	cmp	r3, #8
    59a4:	d1f3      	bne.n	598e <configure_rtc_calendar+0x6a>
		event_mask |= RTC_MODE2_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s) */
	rtc_module->MODE2.EVCTRL.reg |= event_mask;
    59a6:	88ab      	ldrh	r3, [r5, #4]
    59a8:	431a      	orrs	r2, r3
    59aa:	b292      	uxth	r2, r2
    59ac:	80aa      	strh	r2, [r5, #4]
	rtc_calendar_enable_events(&rtc_instance, &calendar_event);
	//[setup and init rtc event]
	
	
	//! [enable]
	rtc_calendar_enable(&rtc_instance);
    59ae:	4804      	ldr	r0, [pc, #16]	; (59c0 <configure_rtc_calendar+0x9c>)
    59b0:	4b06      	ldr	r3, [pc, #24]	; (59cc <configure_rtc_calendar+0xa8>)
    59b2:	4798      	blx	r3
	//! [enable]
}
    59b4:	b008      	add	sp, #32
    59b6:	bd70      	pop	{r4, r5, r6, pc}
    59b8:	20000c30 	.word	0x20000c30
    59bc:	000087fd 	.word	0x000087fd
    59c0:	20000c08 	.word	0x20000c08
    59c4:	40001400 	.word	0x40001400
    59c8:	00001b49 	.word	0x00001b49
    59cc:	000019ed 	.word	0x000019ed

000059d0 <charger_detection>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    59d0:	4b07      	ldr	r3, [pc, #28]	; (59f0 <charger_detection+0x20>)
    59d2:	6a1b      	ldr	r3, [r3, #32]
    59d4:	065b      	lsls	r3, r3, #25
}
//! [setup_14]

void charger_detection(void)
{
	charger_status = port_pin_get_input_level(EXT1_PIN_5);
    59d6:	0fdb      	lsrs	r3, r3, #31
    59d8:	4a06      	ldr	r2, [pc, #24]	; (59f4 <charger_detection+0x24>)
    59da:	7013      	strb	r3, [r2, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    59dc:	d003      	beq.n	59e6 <charger_detection+0x16>
		port_base->OUTSET.reg = pin_mask;
    59de:	4b04      	ldr	r3, [pc, #16]	; (59f0 <charger_detection+0x20>)
    59e0:	2280      	movs	r2, #128	; 0x80
    59e2:	619a      	str	r2, [r3, #24]
    59e4:	e002      	b.n	59ec <charger_detection+0x1c>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    59e6:	4b02      	ldr	r3, [pc, #8]	; (59f0 <charger_detection+0x20>)
    59e8:	2280      	movs	r2, #128	; 0x80
    59ea:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(EXT1_PIN_6,charger_status);
}
    59ec:	4770      	bx	lr
    59ee:	46c0      	nop			; (mov r8, r8)
    59f0:	41004480 	.word	0x41004480
    59f4:	200007b0 	.word	0x200007b0

000059f8 <configure_port_pins>:



void configure_port_pins(void)
{
    59f8:	b538      	push	{r3, r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    59fa:	4c07      	ldr	r4, [pc, #28]	; (5a18 <configure_port_pins+0x20>)
    59fc:	2300      	movs	r3, #0
    59fe:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    5a00:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    5a02:	7063      	strb	r3, [r4, #1]
	
	
	//set EXT1_PIN_5(PB06) as input for charger detect, 1 for charger present/0 for charge not present
	port_pin_set_config(EXT1_PIN_5, &config_port_pin);
    5a04:	2026      	movs	r0, #38	; 0x26
    5a06:	1c21      	adds	r1, r4, #0
    5a08:	4d04      	ldr	r5, [pc, #16]	; (5a1c <configure_port_pins+0x24>)
    5a0a:	47a8      	blx	r5
	
	//set EXT1_PIN_6(PB07) as LED output, on for charger present/off for charger not present 
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    5a0c:	2301      	movs	r3, #1
    5a0e:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(EXT1_PIN_6, &config_port_pin);
    5a10:	2027      	movs	r0, #39	; 0x27
    5a12:	1c21      	adds	r1, r4, #0
    5a14:	47a8      	blx	r5
}
    5a16:	bd38      	pop	{r3, r4, r5, pc}
    5a18:	20000c2c 	.word	0x20000c2c
    5a1c:	000019c9 	.word	0x000019c9

00005a20 <configure_adc>:


//! [setup]
void configure_adc(void)
{
    5a20:	b530      	push	{r4, r5, lr}
    5a22:	b08d      	sub	sp, #52	; 0x34
	//! [setup_config]
	struct adc_config config_adc;
	//! [setup_config]
	
	//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
    5a24:	4668      	mov	r0, sp
    5a26:	4b17      	ldr	r3, [pc, #92]	; (5a84 <configure_adc+0x64>)
    5a28:	4798      	blx	r3
	//! [setup_config_defaults]
	
	config_adc.clock_source = GCLK_GENERATOR_1;
    5a2a:	2301      	movs	r3, #1
    5a2c:	466a      	mov	r2, sp
    5a2e:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    5a30:	2380      	movs	r3, #128	; 0x80
    5a32:	009b      	lsls	r3, r3, #2
    5a34:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    5a36:	2300      	movs	r3, #0
    5a38:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    5a3a:	3318      	adds	r3, #24
    5a3c:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    5a3e:	23c0      	movs	r3, #192	; 0xc0
    5a40:	015b      	lsls	r3, r3, #5
    5a42:	81d3      	strh	r3, [r2, #14]
	config_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    5a44:	2304      	movs	r3, #4
    5a46:	75d3      	strb	r3, [r2, #23]

	//! [setup_set_config]
	adc_init(&adc_instance, ADC, &config_adc);
    5a48:	4c0f      	ldr	r4, [pc, #60]	; (5a88 <configure_adc+0x68>)
    5a4a:	4d10      	ldr	r5, [pc, #64]	; (5a8c <configure_adc+0x6c>)
    5a4c:	1c20      	adds	r0, r4, #0
    5a4e:	1c29      	adds	r1, r5, #0
    5a50:	4b0f      	ldr	r3, [pc, #60]	; (5a90 <configure_adc+0x70>)
    5a52:	4798      	blx	r3
	//! [setup_set_config]
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
    5a54:	2322      	movs	r3, #34	; 0x22
    5a56:	70ab      	strb	r3, [r5, #2]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    5a58:	6822      	ldr	r2, [r4, #0]
    5a5a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    5a5c:	b25b      	sxtb	r3, r3
    5a5e:	2b00      	cmp	r3, #0
    5a60:	dbfb      	blt.n	5a5a <configure_adc+0x3a>
    5a62:	2180      	movs	r1, #128	; 0x80
    5a64:	0409      	lsls	r1, r1, #16
    5a66:	4b0b      	ldr	r3, [pc, #44]	; (5a94 <configure_adc+0x74>)
    5a68:	6019      	str	r1, [r3, #0]
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5a6a:	7811      	ldrb	r1, [r2, #0]
    5a6c:	2302      	movs	r3, #2
    5a6e:	430b      	orrs	r3, r1
    5a70:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    5a72:	4b05      	ldr	r3, [pc, #20]	; (5a88 <configure_adc+0x68>)
    5a74:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    5a76:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    5a78:	b25b      	sxtb	r3, r3
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	dbfb      	blt.n	5a76 <configure_adc+0x56>
	//! [setup_enable]
	adc_enable(&adc_instance);
	//! [setup_enable]
}
    5a7e:	b00d      	add	sp, #52	; 0x34
    5a80:	bd30      	pop	{r4, r5, pc}
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	00000115 	.word	0x00000115
    5a88:	20000c84 	.word	0x20000c84
    5a8c:	42004000 	.word	0x42004000
    5a90:	0000015d 	.word	0x0000015d
    5a94:	e000e100 	.word	0xe000e100

00005a98 <adc_sample_voltage_mapping>:

void adc_sample_voltage_mapping(void)
{
    5a98:	b530      	push	{r4, r5, lr}
	uint8_t string = 0xcc;
    uint8_t string1 = 0xdd;

	//************************************************************************
	if (0 == charger_status)//charger not connected
    5a9a:	4b58      	ldr	r3, [pc, #352]	; (5bfc <adc_sample_voltage_mapping+0x164>)
    5a9c:	781b      	ldrb	r3, [r3, #0]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d146      	bne.n	5b30 <adc_sample_voltage_mapping+0x98>
	{	charge_signal_adc_result = 0;
    5aa2:	2200      	movs	r2, #0
    5aa4:	4b56      	ldr	r3, [pc, #344]	; (5c00 <adc_sample_voltage_mapping+0x168>)
    5aa6:	801a      	strh	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    5aa8:	4b56      	ldr	r3, [pc, #344]	; (5c04 <adc_sample_voltage_mapping+0x16c>)
    5aaa:	6819      	ldr	r1, [r3, #0]
    5aac:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    5aae:	b25b      	sxtb	r3, r3
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	dbfb      	blt.n	5aac <adc_sample_voltage_mapping+0x14>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    5ab4:	690b      	ldr	r3, [r1, #16]
    5ab6:	221f      	movs	r2, #31
    5ab8:	4393      	bics	r3, r2
    5aba:	3a16      	subs	r2, #22
    5abc:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    5abe:	610b      	str	r3, [r1, #16]
    5ac0:	7e4b      	ldrb	r3, [r1, #25]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    5ac2:	b25b      	sxtb	r3, r3
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	dbfb      	blt.n	5ac0 <adc_sample_voltage_mapping+0x28>
    5ac8:	7e4b      	ldrb	r3, [r1, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    5aca:	b25b      	sxtb	r3, r3
    5acc:	2b00      	cmp	r3, #0
    5ace:	dbfb      	blt.n	5ac8 <adc_sample_voltage_mapping+0x30>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    5ad0:	7b0a      	ldrb	r2, [r1, #12]
    5ad2:	2302      	movs	r3, #2
    5ad4:	4313      	orrs	r3, r2
    5ad6:	730b      	strb	r3, [r1, #12]
    5ad8:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    5ada:	b25b      	sxtb	r3, r3
    5adc:	2b00      	cmp	r3, #0
    5ade:	dbfb      	blt.n	5ad8 <adc_sample_voltage_mapping+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5ae0:	2001      	movs	r0, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5ae2:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    5ae4:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5ae6:	7e0b      	ldrb	r3, [r1, #24]
    5ae8:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5aea:	1c02      	adds	r2, r0, #0
    5aec:	401a      	ands	r2, r3
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5aee:	421d      	tst	r5, r3
    5af0:	d000      	beq.n	5af4 <adc_sample_voltage_mapping+0x5c>
		status_flags |= ADC_STATUS_WINDOW;
    5af2:	4322      	orrs	r2, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5af4:	421c      	tst	r4, r3
    5af6:	d000      	beq.n	5afa <adc_sample_voltage_mapping+0x62>
		status_flags |= ADC_STATUS_OVERRUN;
    5af8:	432a      	orrs	r2, r5
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    5afa:	4210      	tst	r0, r2
    5afc:	d0f3      	beq.n	5ae6 <adc_sample_voltage_mapping+0x4e>
    5afe:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    5b00:	b25b      	sxtb	r3, r3
    5b02:	2b00      	cmp	r3, #0
    5b04:	dbfb      	blt.n	5afe <adc_sample_voltage_mapping+0x66>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    5b06:	8b4a      	ldrh	r2, [r1, #26]
    5b08:	4b3f      	ldr	r3, [pc, #252]	; (5c08 <adc_sample_voltage_mapping+0x170>)
    5b0a:	801a      	strh	r2, [r3, #0]
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    5b0c:	2301      	movs	r3, #1
    5b0e:	760b      	strb	r3, [r1, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5b10:	7e0a      	ldrb	r2, [r1, #24]
    5b12:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5b14:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5b16:	0750      	lsls	r0, r2, #29
    5b18:	d501      	bpl.n	5b1e <adc_sample_voltage_mapping+0x86>
		status_flags |= ADC_STATUS_WINDOW;
    5b1a:	2002      	movs	r0, #2
    5b1c:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5b1e:	0792      	lsls	r2, r2, #30
    5b20:	d501      	bpl.n	5b26 <adc_sample_voltage_mapping+0x8e>
		status_flags |= ADC_STATUS_OVERRUN;
    5b22:	2204      	movs	r2, #4
    5b24:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    5b26:	075b      	lsls	r3, r3, #29
    5b28:	d549      	bpl.n	5bbe <adc_sample_voltage_mapping+0x126>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    5b2a:	2302      	movs	r3, #2
    5b2c:	760b      	strb	r3, [r1, #24]
    5b2e:	e046      	b.n	5bbe <adc_sample_voltage_mapping+0x126>
		//adc_discharge_signal_voltage = ((float)discharge_raw_result_signed * (float)ADC_REFERENCE_INT1V_VALUE)/(float)ADC_8BIT_FULL_SCALE_VALUE;

	}
	else
	{
		discharge_signal_adc_result = 0;
    5b30:	2200      	movs	r2, #0
    5b32:	4b35      	ldr	r3, [pc, #212]	; (5c08 <adc_sample_voltage_mapping+0x170>)
    5b34:	801a      	strh	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    5b36:	4b33      	ldr	r3, [pc, #204]	; (5c04 <adc_sample_voltage_mapping+0x16c>)
    5b38:	6819      	ldr	r1, [r3, #0]
    5b3a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    5b3c:	b25b      	sxtb	r3, r3
    5b3e:	2b00      	cmp	r3, #0
    5b40:	dbfb      	blt.n	5b3a <adc_sample_voltage_mapping+0xa2>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    5b42:	690b      	ldr	r3, [r1, #16]
    5b44:	221f      	movs	r2, #31
    5b46:	4393      	bics	r3, r2
    5b48:	3a17      	subs	r2, #23
    5b4a:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    5b4c:	610b      	str	r3, [r1, #16]
    5b4e:	7e4b      	ldrb	r3, [r1, #25]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    5b50:	b25b      	sxtb	r3, r3
    5b52:	2b00      	cmp	r3, #0
    5b54:	dbfb      	blt.n	5b4e <adc_sample_voltage_mapping+0xb6>
    5b56:	7e4b      	ldrb	r3, [r1, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    5b58:	b25b      	sxtb	r3, r3
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	dbfb      	blt.n	5b56 <adc_sample_voltage_mapping+0xbe>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    5b5e:	7b0a      	ldrb	r2, [r1, #12]
    5b60:	2302      	movs	r3, #2
    5b62:	4313      	orrs	r3, r2
    5b64:	730b      	strb	r3, [r1, #12]
    5b66:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    5b68:	b25b      	sxtb	r3, r3
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	dbfb      	blt.n	5b66 <adc_sample_voltage_mapping+0xce>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5b6e:	2001      	movs	r0, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5b70:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    5b72:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5b74:	7e0b      	ldrb	r3, [r1, #24]
    5b76:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5b78:	1c02      	adds	r2, r0, #0
    5b7a:	401a      	ands	r2, r3
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5b7c:	421d      	tst	r5, r3
    5b7e:	d000      	beq.n	5b82 <adc_sample_voltage_mapping+0xea>
		status_flags |= ADC_STATUS_WINDOW;
    5b80:	4322      	orrs	r2, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5b82:	421c      	tst	r4, r3
    5b84:	d000      	beq.n	5b88 <adc_sample_voltage_mapping+0xf0>
		status_flags |= ADC_STATUS_OVERRUN;
    5b86:	432a      	orrs	r2, r5
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    5b88:	4210      	tst	r0, r2
    5b8a:	d0f3      	beq.n	5b74 <adc_sample_voltage_mapping+0xdc>
    5b8c:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    5b8e:	b25b      	sxtb	r3, r3
    5b90:	2b00      	cmp	r3, #0
    5b92:	dbfb      	blt.n	5b8c <adc_sample_voltage_mapping+0xf4>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    5b94:	8b4a      	ldrh	r2, [r1, #26]
    5b96:	4b1a      	ldr	r3, [pc, #104]	; (5c00 <adc_sample_voltage_mapping+0x168>)
    5b98:	801a      	strh	r2, [r3, #0]
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    5b9a:	2301      	movs	r3, #1
    5b9c:	760b      	strb	r3, [r1, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5b9e:	7e0a      	ldrb	r2, [r1, #24]
    5ba0:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5ba2:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5ba4:	0750      	lsls	r0, r2, #29
    5ba6:	d501      	bpl.n	5bac <adc_sample_voltage_mapping+0x114>
		status_flags |= ADC_STATUS_WINDOW;
    5ba8:	2002      	movs	r0, #2
    5baa:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5bac:	0792      	lsls	r2, r2, #30
    5bae:	d501      	bpl.n	5bb4 <adc_sample_voltage_mapping+0x11c>
		status_flags |= ADC_STATUS_OVERRUN;
    5bb0:	2204      	movs	r2, #4
    5bb2:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    5bb4:	075b      	lsls	r3, r3, #29
    5bb6:	d511      	bpl.n	5bdc <adc_sample_voltage_mapping+0x144>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    5bb8:	2302      	movs	r3, #2
    5bba:	760b      	strb	r3, [r1, #24]
    5bbc:	e00e      	b.n	5bdc <adc_sample_voltage_mapping+0x144>
		
		//if (discharge_signal_adc_result < 160)
		//{
			//discharge_signal_adc_result = 0;
		//}
		total_discharge_current += discharge_signal_adc_result;
    5bbe:	4913      	ldr	r1, [pc, #76]	; (5c0c <adc_sample_voltage_mapping+0x174>)
    5bc0:	4811      	ldr	r0, [pc, #68]	; (5c08 <adc_sample_voltage_mapping+0x170>)
    5bc2:	8802      	ldrh	r2, [r0, #0]
    5bc4:	2300      	movs	r3, #0
    5bc6:	680c      	ldr	r4, [r1, #0]
    5bc8:	684d      	ldr	r5, [r1, #4]
    5bca:	1912      	adds	r2, r2, r4
    5bcc:	416b      	adcs	r3, r5
    5bce:	600a      	str	r2, [r1, #0]
    5bd0:	604b      	str	r3, [r1, #4]
		discharge_sample_num ++;
    5bd2:	4a0f      	ldr	r2, [pc, #60]	; (5c10 <adc_sample_voltage_mapping+0x178>)
    5bd4:	6813      	ldr	r3, [r2, #0]
    5bd6:	3301      	adds	r3, #1
    5bd8:	6013      	str	r3, [r2, #0]
    5bda:	e00d      	b.n	5bf8 <adc_sample_voltage_mapping+0x160>
			//charge_signal_adc_result = 0;
		//}
		//
		//udi_cdc_write_buf(&string,1);
		//udi_cdc_write_buf(&charge_signal_adc_result,2);
		total_charge_current += charge_signal_adc_result;
    5bdc:	490d      	ldr	r1, [pc, #52]	; (5c14 <adc_sample_voltage_mapping+0x17c>)
    5bde:	4808      	ldr	r0, [pc, #32]	; (5c00 <adc_sample_voltage_mapping+0x168>)
    5be0:	8802      	ldrh	r2, [r0, #0]
    5be2:	2300      	movs	r3, #0
    5be4:	680c      	ldr	r4, [r1, #0]
    5be6:	684d      	ldr	r5, [r1, #4]
    5be8:	1912      	adds	r2, r2, r4
    5bea:	416b      	adcs	r3, r5
    5bec:	600a      	str	r2, [r1, #0]
    5bee:	604b      	str	r3, [r1, #4]
		charge_sample_num++;
    5bf0:	4a09      	ldr	r2, [pc, #36]	; (5c18 <adc_sample_voltage_mapping+0x180>)
    5bf2:	6813      	ldr	r3, [r2, #0]
    5bf4:	3301      	adds	r3, #1
    5bf6:	6013      	str	r3, [r2, #0]
		//int16_t charge_raw_result_signed;
		//charge_raw_result_signed = (int16_t)charge_signal_adc_result;
		//adc_charge_signal_voltage = ((float)charge_raw_result_signed * (float)ADC_REFERENCE_INT1V_VALUE)/(float)ADC_8BIT_FULL_SCALE_VALUE;
	}
}
    5bf8:	bd30      	pop	{r4, r5, pc}
    5bfa:	46c0      	nop			; (mov r8, r8)
    5bfc:	200007b0 	.word	0x200007b0
    5c00:	20000c28 	.word	0x20000c28
    5c04:	20000c84 	.word	0x20000c84
    5c08:	20000c80 	.word	0x20000c80
    5c0c:	200007b8 	.word	0x200007b8
    5c10:	20000770 	.word	0x20000770
    5c14:	200007c8 	.word	0x200007c8
    5c18:	20000768 	.word	0x20000768

00005c1c <event_counter>:
}


//! [setup_14]
void event_counter(struct events_resource *resource)
{
    5c1c:	b510      	push	{r4, lr}
    5c1e:	1c04      	adds	r4, r0, #0
	if(events_is_interrupt_set(resource, EVENTS_INTERRUPT_DETECT)) {
    5c20:	2101      	movs	r1, #1
    5c22:	4b0f      	ldr	r3, [pc, #60]	; (5c60 <event_counter+0x44>)
    5c24:	4798      	blx	r3
    5c26:	2800      	cmp	r0, #0
    5c28:	d019      	beq.n	5c5e <event_counter+0x42>
		//port_pin_toggle_output_level(LED_0_PIN);
		charger_detection();
    5c2a:	4b0e      	ldr	r3, [pc, #56]	; (5c64 <event_counter+0x48>)
    5c2c:	4798      	blx	r3
		adc_get_temperature();
    5c2e:	4b0e      	ldr	r3, [pc, #56]	; (5c68 <event_counter+0x4c>)
    5c30:	4798      	blx	r3
		adc_sample_voltage_mapping();
    5c32:	4b0e      	ldr	r3, [pc, #56]	; (5c6c <event_counter+0x50>)
    5c34:	4798      	blx	r3
		battery_status_new = battery_status_update();
    5c36:	4b0e      	ldr	r3, [pc, #56]	; (5c70 <event_counter+0x54>)
    5c38:	4798      	blx	r3
    5c3a:	4b0e      	ldr	r3, [pc, #56]	; (5c74 <event_counter+0x58>)
    5c3c:	7018      	strb	r0, [r3, #0]
		if (battery_status_new != battery_status_old) //if battery charging status changes, send data to pc to update
    5c3e:	4b0e      	ldr	r3, [pc, #56]	; (5c78 <event_counter+0x5c>)
    5c40:	781b      	ldrb	r3, [r3, #0]
    5c42:	4283      	cmp	r3, r0
    5c44:	d007      	beq.n	5c56 <event_counter+0x3a>
		{	
			get_avg_current();
    5c46:	4b0d      	ldr	r3, [pc, #52]	; (5c7c <event_counter+0x60>)
    5c48:	4798      	blx	r3
			send_battery_data();
    5c4a:	4b0d      	ldr	r3, [pc, #52]	; (5c80 <event_counter+0x64>)
    5c4c:	4798      	blx	r3
			battery_status_old = battery_status_new;
    5c4e:	4b09      	ldr	r3, [pc, #36]	; (5c74 <event_counter+0x58>)
    5c50:	781a      	ldrb	r2, [r3, #0]
    5c52:	4b09      	ldr	r3, [pc, #36]	; (5c78 <event_counter+0x5c>)
    5c54:	701a      	strb	r2, [r3, #0]
		}
		events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
    5c56:	1c20      	adds	r0, r4, #0
    5c58:	2101      	movs	r1, #1
    5c5a:	4b0a      	ldr	r3, [pc, #40]	; (5c84 <event_counter+0x68>)
    5c5c:	4798      	blx	r3
	}
}
    5c5e:	bd10      	pop	{r4, pc}
    5c60:	000015e9 	.word	0x000015e9
    5c64:	000059d1 	.word	0x000059d1
    5c68:	000058ad 	.word	0x000058ad
    5c6c:	00005a99 	.word	0x00005a99
    5c70:	000057bd 	.word	0x000057bd
    5c74:	200007a0 	.word	0x200007a0
    5c78:	2000079f 	.word	0x2000079f
    5c7c:	00005501 	.word	0x00005501
    5c80:	000055b9 	.word	0x000055b9
    5c84:	0000161d 	.word	0x0000161d

00005c88 <processCommandMsg>:
*	|1st Byte   |2nd Byte      |3rd Byte         | ..........
*   queryType command: commandDataLength and commandData are 0.
***************************************************************/
void processCommandMsg(void)
{	
	commandType = commandMsg[0]; //get commandType
    5c88:	4b13      	ldr	r3, [pc, #76]	; (5cd8 <processCommandMsg+0x50>)
    5c8a:	7819      	ldrb	r1, [r3, #0]
    5c8c:	4a13      	ldr	r2, [pc, #76]	; (5cdc <processCommandMsg+0x54>)
    5c8e:	7011      	strb	r1, [r2, #0]
	commandIndex = commandMsg[1];//get commandIndex
    5c90:	7859      	ldrb	r1, [r3, #1]
    5c92:	4a13      	ldr	r2, [pc, #76]	; (5ce0 <processCommandMsg+0x58>)
    5c94:	7011      	strb	r1, [r2, #0]
	commandDataLength = commandMsg[2];//get commandDataLength
    5c96:	7898      	ldrb	r0, [r3, #2]
    5c98:	4b12      	ldr	r3, [pc, #72]	; (5ce4 <processCommandMsg+0x5c>)
    5c9a:	7018      	strb	r0, [r3, #0]
		
	if (commandDataLength!= 0 )//if commandDataLength is not 0, get commandData.
    5c9c:	2800      	cmp	r0, #0
    5c9e:	d014      	beq.n	5cca <processCommandMsg+0x42>
    5ca0:	4b11      	ldr	r3, [pc, #68]	; (5ce8 <processCommandMsg+0x60>)
    5ca2:	4a12      	ldr	r2, [pc, #72]	; (5cec <processCommandMsg+0x64>)
    5ca4:	1818      	adds	r0, r3, r0
	{
		for (int i=0;i<commandDataLength;i++)
		{
			commandData[i] = commandMsg[i+3];
    5ca6:	7819      	ldrb	r1, [r3, #0]
    5ca8:	7011      	strb	r1, [r2, #0]
    5caa:	3301      	adds	r3, #1
    5cac:	3201      	adds	r2, #1
	commandIndex = commandMsg[1];//get commandIndex
	commandDataLength = commandMsg[2];//get commandDataLength
		
	if (commandDataLength!= 0 )//if commandDataLength is not 0, get commandData.
	{
		for (int i=0;i<commandDataLength;i++)
    5cae:	4283      	cmp	r3, r0
    5cb0:	d1f9      	bne.n	5ca6 <processCommandMsg+0x1e>
    5cb2:	e00a      	b.n	5cca <processCommandMsg+0x42>
		}
	}
	//reset commandMsg[] back to 0;
	for (uint8_t i = 0; i<sizeof(commandMsg); i++)
	{
		commandMsg[i] = 0;
    5cb4:	701a      	strb	r2, [r3, #0]
    5cb6:	3301      	adds	r3, #1
		{
			commandData[i] = commandMsg[i+3];
		}
	}
	//reset commandMsg[] back to 0;
	for (uint8_t i = 0; i<sizeof(commandMsg); i++)
    5cb8:	428b      	cmp	r3, r1
    5cba:	d1fb      	bne.n	5cb4 <processCommandMsg+0x2c>
	{
		commandMsg[i] = 0;
	}
	usbMsgInFlag = 0;//reset MsgIn flag
    5cbc:	2200      	movs	r2, #0
    5cbe:	4b0c      	ldr	r3, [pc, #48]	; (5cf0 <processCommandMsg+0x68>)
    5cc0:	701a      	strb	r2, [r3, #0]
	commandReady = 1;//set commandReady to be executed
    5cc2:	3201      	adds	r2, #1
    5cc4:	4b0b      	ldr	r3, [pc, #44]	; (5cf4 <processCommandMsg+0x6c>)
    5cc6:	701a      	strb	r2, [r3, #0]
    5cc8:	e004      	b.n	5cd4 <processCommandMsg+0x4c>
    5cca:	4b03      	ldr	r3, [pc, #12]	; (5cd8 <processCommandMsg+0x50>)
    5ccc:	1c19      	adds	r1, r3, #0
    5cce:	3114      	adds	r1, #20
		}
	}
	//reset commandMsg[] back to 0;
	for (uint8_t i = 0; i<sizeof(commandMsg); i++)
	{
		commandMsg[i] = 0;
    5cd0:	2200      	movs	r2, #0
    5cd2:	e7ef      	b.n	5cb4 <processCommandMsg+0x2c>
	}
	usbMsgInFlag = 0;//reset MsgIn flag
	commandReady = 1;//set commandReady to be executed
}
    5cd4:	4770      	bx	lr
    5cd6:	46c0      	nop			; (mov r8, r8)
    5cd8:	200007d4 	.word	0x200007d4
    5cdc:	200007b4 	.word	0x200007b4
    5ce0:	200007c1 	.word	0x200007c1
    5ce4:	2000076c 	.word	0x2000076c
    5ce8:	200007d7 	.word	0x200007d7
    5cec:	20000778 	.word	0x20000778
    5cf0:	200007e9 	.word	0x200007e9
    5cf4:	200007b5 	.word	0x200007b5

00005cf8 <execute_system_command>:




void execute_system_command()
{	
    5cf8:	b508      	push	{r3, lr}
	system_busy_flag = 1;
    5cfa:	2201      	movs	r2, #1
    5cfc:	4b10      	ldr	r3, [pc, #64]	; (5d40 <execute_system_command+0x48>)
    5cfe:	701a      	strb	r2, [r3, #0]
	commandReady = 0;
    5d00:	2200      	movs	r2, #0
    5d02:	4b10      	ldr	r3, [pc, #64]	; (5d44 <execute_system_command+0x4c>)
    5d04:	701a      	strb	r2, [r3, #0]
	
	if(commandType == CMD_TYPE_QUERY)
    5d06:	4b10      	ldr	r3, [pc, #64]	; (5d48 <execute_system_command+0x50>)
    5d08:	781b      	ldrb	r3, [r3, #0]
    5d0a:	2b01      	cmp	r3, #1
    5d0c:	d106      	bne.n	5d1c <execute_system_command+0x24>
	{	
		queryAction[commandIndex]();		
    5d0e:	4b0f      	ldr	r3, [pc, #60]	; (5d4c <execute_system_command+0x54>)
    5d10:	781b      	ldrb	r3, [r3, #0]
    5d12:	009b      	lsls	r3, r3, #2
    5d14:	4a0e      	ldr	r2, [pc, #56]	; (5d50 <execute_system_command+0x58>)
    5d16:	589b      	ldr	r3, [r3, r2]
    5d18:	4798      	blx	r3
    5d1a:	e007      	b.n	5d2c <execute_system_command+0x34>
	}else if (commandType == CMD_TYPE_UPDATE)
    5d1c:	2b02      	cmp	r3, #2
    5d1e:	d105      	bne.n	5d2c <execute_system_command+0x34>
	{
		updateAction[commandIndex]();
    5d20:	4b0a      	ldr	r3, [pc, #40]	; (5d4c <execute_system_command+0x54>)
    5d22:	781b      	ldrb	r3, [r3, #0]
    5d24:	009b      	lsls	r3, r3, #2
    5d26:	4a0b      	ldr	r2, [pc, #44]	; (5d54 <execute_system_command+0x5c>)
    5d28:	589b      	ldr	r3, [r3, r2]
    5d2a:	4798      	blx	r3
	}
	
	commandType = 0; //reset commandType to 0
    5d2c:	2300      	movs	r3, #0
    5d2e:	4a06      	ldr	r2, [pc, #24]	; (5d48 <execute_system_command+0x50>)
    5d30:	7013      	strb	r3, [r2, #0]
	commandIndex = 0;//reset commandIndex to 0
    5d32:	4a06      	ldr	r2, [pc, #24]	; (5d4c <execute_system_command+0x54>)
    5d34:	7013      	strb	r3, [r2, #0]
	commandDataLength = 0;//reset commandDataLength to 0
    5d36:	4a08      	ldr	r2, [pc, #32]	; (5d58 <execute_system_command+0x60>)
    5d38:	7013      	strb	r3, [r2, #0]
	system_busy_flag = 0;
    5d3a:	4a01      	ldr	r2, [pc, #4]	; (5d40 <execute_system_command+0x48>)
    5d3c:	7013      	strb	r3, [r2, #0]
}
    5d3e:	bd08      	pop	{r3, pc}
    5d40:	200007ae 	.word	0x200007ae
    5d44:	200007b5 	.word	0x200007b5
    5d48:	200007b4 	.word	0x200007b4
    5d4c:	200007c1 	.word	0x200007c1
    5d50:	20000100 	.word	0x20000100
    5d54:	2000010c 	.word	0x2000010c
    5d58:	2000076c 	.word	0x2000076c

00005d5c <main_suspend_action>:




void main_suspend_action(void)
{
    5d5c:	b508      	push	{r3, lr}
	ui_powerdown();
    5d5e:	4b01      	ldr	r3, [pc, #4]	; (5d64 <main_suspend_action+0x8>)
    5d60:	4798      	blx	r3
}
    5d62:	bd08      	pop	{r3, pc}
    5d64:	000006c1 	.word	0x000006c1

00005d68 <main_resume_action>:

void main_resume_action(void)
{
    5d68:	b508      	push	{r3, lr}
	ui_wakeup();
    5d6a:	4b01      	ldr	r3, [pc, #4]	; (5d70 <main_resume_action+0x8>)
    5d6c:	4798      	blx	r3
}
    5d6e:	bd08      	pop	{r3, pc}
    5d70:	000006e5 	.word	0x000006e5

00005d74 <main_sof_action>:

void main_sof_action(void)
{
    5d74:	b508      	push	{r3, lr}
	if (!main_b_cdc_enable)
    5d76:	4b04      	ldr	r3, [pc, #16]	; (5d88 <main_sof_action+0x14>)
    5d78:	781b      	ldrb	r3, [r3, #0]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d003      	beq.n	5d86 <main_sof_action+0x12>
	return;
	ui_process(udd_get_frame_number());
    5d7e:	4b03      	ldr	r3, [pc, #12]	; (5d8c <main_sof_action+0x18>)
    5d80:	4798      	blx	r3
    5d82:	4b03      	ldr	r3, [pc, #12]	; (5d90 <main_sof_action+0x1c>)
    5d84:	4798      	blx	r3
}
    5d86:	bd08      	pop	{r3, pc}
    5d88:	200007c2 	.word	0x200007c2
    5d8c:	00003bdd 	.word	0x00003bdd
    5d90:	000006f5 	.word	0x000006f5

00005d94 <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    5d94:	b508      	push	{r3, lr}
	ui_powerdown();
    5d96:	4b01      	ldr	r3, [pc, #4]	; (5d9c <main_suspend_lpm_action+0x8>)
    5d98:	4798      	blx	r3
}
    5d9a:	bd08      	pop	{r3, pc}
    5d9c:	000006c1 	.word	0x000006c1

00005da0 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    5da0:	b508      	push	{r3, lr}
	ui_wakeup_disable();
    5da2:	4b01      	ldr	r3, [pc, #4]	; (5da8 <main_remotewakeup_lpm_disable+0x8>)
    5da4:	4798      	blx	r3
}
    5da6:	bd08      	pop	{r3, pc}
    5da8:	000006d5 	.word	0x000006d5

00005dac <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    5dac:	b508      	push	{r3, lr}
	ui_wakeup_enable();
    5dae:	4b01      	ldr	r3, [pc, #4]	; (5db4 <main_remotewakeup_lpm_enable+0x8>)
    5db0:	4798      	blx	r3
}
    5db2:	bd08      	pop	{r3, pc}
    5db4:	000006c5 	.word	0x000006c5

00005db8 <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
    5db8:	b508      	push	{r3, lr}
	main_b_cdc_enable = true;
    5dba:	2201      	movs	r2, #1
    5dbc:	4b02      	ldr	r3, [pc, #8]	; (5dc8 <main_cdc_enable+0x10>)
    5dbe:	701a      	strb	r2, [r3, #0]
	// Open communication
	uart_open(port);
    5dc0:	4b02      	ldr	r3, [pc, #8]	; (5dcc <main_cdc_enable+0x14>)
    5dc2:	4798      	blx	r3
	return true;
}
    5dc4:	2001      	movs	r0, #1
    5dc6:	bd08      	pop	{r3, pc}
    5dc8:	200007c2 	.word	0x200007c2
    5dcc:	00006219 	.word	0x00006219

00005dd0 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
    5dd0:	b508      	push	{r3, lr}
	main_b_cdc_enable = false;
    5dd2:	2200      	movs	r2, #0
    5dd4:	4b02      	ldr	r3, [pc, #8]	; (5de0 <main_cdc_disable+0x10>)
    5dd6:	701a      	strb	r2, [r3, #0]
	// Close communication
	uart_close(port);
    5dd8:	4b02      	ldr	r3, [pc, #8]	; (5de4 <main_cdc_disable+0x14>)
    5dda:	4798      	blx	r3
}
    5ddc:	bd08      	pop	{r3, pc}
    5dde:	46c0      	nop			; (mov r8, r8)
    5de0:	200007c2 	.word	0x200007c2
    5de4:	00006251 	.word	0x00006251

00005de8 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    5de8:	b508      	push	{r3, lr}
	if (b_enable) {
    5dea:	2900      	cmp	r1, #0
    5dec:	d002      	beq.n	5df4 <main_cdc_set_dtr+0xc>
		// Host terminal has open COM
		ui_com_open(port);
    5dee:	4b03      	ldr	r3, [pc, #12]	; (5dfc <main_cdc_set_dtr+0x14>)
    5df0:	4798      	blx	r3
    5df2:	e001      	b.n	5df8 <main_cdc_set_dtr+0x10>
		}else{
		// Host terminal has close COM
		ui_com_close(port);
    5df4:	4b02      	ldr	r3, [pc, #8]	; (5e00 <main_cdc_set_dtr+0x18>)
    5df6:	4798      	blx	r3
	}
}
    5df8:	bd08      	pop	{r3, pc}
    5dfa:	46c0      	nop			; (mov r8, r8)
    5dfc:	000006e9 	.word	0x000006e9
    5e00:	000006ed 	.word	0x000006ed

00005e04 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)

{	struct events_resource example_event;
    5e04:	b570      	push	{r4, r5, r6, lr}
    5e06:	b0b0      	sub	sp, #192	; 0xc0
	struct events_hook hook;

	irq_initialize_vectors();
	cpu_irq_enable();
    5e08:	4d49      	ldr	r5, [pc, #292]	; (5f30 <main+0x12c>)
    5e0a:	2401      	movs	r4, #1
    5e0c:	702c      	strb	r4, [r5, #0]
    5e0e:	f3bf 8f5f 	dmb	sy
    5e12:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    5e14:	4b47      	ldr	r3, [pc, #284]	; (5f34 <main+0x130>)
    5e16:	2200      	movs	r2, #0
    5e18:	701a      	strb	r2, [r3, #0]
    5e1a:	705a      	strb	r2, [r3, #1]
    5e1c:	709a      	strb	r2, [r3, #2]
    5e1e:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5e20:	711c      	strb	r4, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	
	system_init();
    5e22:	4b45      	ldr	r3, [pc, #276]	; (5f38 <main+0x134>)
    5e24:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    5e26:	702c      	strb	r4, [r5, #0]
    5e28:	f3bf 8f5f 	dmb	sy
    5e2c:	b662      	cpsie	i
{
	//! [setup_config]
	struct tcc_config config_tcc;
	//! [setup_config]
	//! [setup_config_defaults]
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
    5e2e:	4d43      	ldr	r5, [pc, #268]	; (5f3c <main+0x138>)
    5e30:	4668      	mov	r0, sp
    5e32:	1c29      	adds	r1, r5, #0
    5e34:	4b42      	ldr	r3, [pc, #264]	; (5f40 <main+0x13c>)
    5e36:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tcc.counter.period = 0xFFFF;
    5e38:	4b42      	ldr	r3, [pc, #264]	; (5f44 <main+0x140>)
    5e3a:	9301      	str	r3, [sp, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    5e3c:	2202      	movs	r2, #2
    5e3e:	4669      	mov	r1, sp
    5e40:	760a      	strb	r2, [r1, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = 0xFFFF;
    5e42:	9307      	str	r3, [sp, #28]
	//! [setup_change_config]

	//! [setup_change_config_pwm]
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
    5e44:	2398      	movs	r3, #152	; 0x98
    5e46:	466a      	mov	r2, sp
    5e48:	54cc      	strb	r4, [r1, r3]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
    5e4a:	3b94      	subs	r3, #148	; 0x94
    5e4c:	9316      	str	r3, [sp, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
    5e4e:	931e      	str	r3, [sp, #120]	; 0x78
	//! [setup_change_config_pwm]

	//! [setup_set_config]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
    5e50:	4c3d      	ldr	r4, [pc, #244]	; (5f48 <main+0x144>)
    5e52:	1c20      	adds	r0, r4, #0
    5e54:	1c29      	adds	r1, r5, #0
    5e56:	4b3d      	ldr	r3, [pc, #244]	; (5f4c <main+0x148>)
    5e58:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5e5a:	6823      	ldr	r3, [r4, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5e5c:	2202      	movs	r2, #2
    5e5e:	6899      	ldr	r1, [r3, #8]
    5e60:	420a      	tst	r2, r1
    5e62:	d1fc      	bne.n	5e5e <main+0x5a>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    5e64:	6819      	ldr	r1, [r3, #0]
    5e66:	2202      	movs	r2, #2
    5e68:	430a      	orrs	r2, r1
    5e6a:	601a      	str	r2, [r3, #0]
}

static void configure_tcc_callbacks(void)
{
	//! [setup_register_callback]
	tcc_register_callback(
    5e6c:	4c36      	ldr	r4, [pc, #216]	; (5f48 <main+0x144>)
    5e6e:	1c20      	adds	r0, r4, #0
    5e70:	4937      	ldr	r1, [pc, #220]	; (5f50 <main+0x14c>)
    5e72:	2208      	movs	r2, #8
    5e74:	4b37      	ldr	r3, [pc, #220]	; (5f54 <main+0x150>)
    5e76:	4798      	blx	r3
	tcc_callback_to_change_duty_cycle,
	(enum tcc_callback)(TCC_CALLBACK_CHANNEL_0 + CONF_PWM_CHANNEL));
	//! [setup_register_callback]

	//! [setup_enable_callback]
	tcc_enable_callback(&tcc_instance,
    5e78:	1c20      	adds	r0, r4, #0
    5e7a:	2108      	movs	r1, #8
    5e7c:	4b36      	ldr	r3, [pc, #216]	; (5f58 <main+0x154>)
    5e7e:	4798      	blx	r3
	configure_tcc_callbacks();
	//! [setup_init]
	
	
	//setup GPIO
	configure_port_pins();
    5e80:	4b36      	ldr	r3, [pc, #216]	; (5f5c <main+0x158>)
    5e82:	4798      	blx	r3
	//! [setup_1]
	struct events_config config;
	//! [setup_1]

	//! [setup_2]
	events_get_config_defaults(&config);
    5e84:	4668      	mov	r0, sp
    5e86:	4b36      	ldr	r3, [pc, #216]	; (5f60 <main+0x15c>)
    5e88:	4798      	blx	r3
	//! [setup_2]

	//! [setup_3]
	config.generator      = CONF_EVENT_GENERATOR;
    5e8a:	2307      	movs	r3, #7
    5e8c:	466a      	mov	r2, sp
    5e8e:	7093      	strb	r3, [r2, #2]
	config.edge_detect    = EVENTS_EDGE_DETECT_RISING;
    5e90:	3b06      	subs	r3, #6
    5e92:	7013      	strb	r3, [r2, #0]
	config.path           = EVENTS_PATH_SYNCHRONOUS;
    5e94:	2400      	movs	r4, #0
    5e96:	7054      	strb	r4, [r2, #1]
	config.clock_source   = GCLK_GENERATOR_0;
    5e98:	70d4      	strb	r4, [r2, #3]
	//! [setup_3]

	//! [setup_4]
	events_allocate(resource, &config);
    5e9a:	a82e      	add	r0, sp, #184	; 0xb8
    5e9c:	4669      	mov	r1, sp
    5e9e:	4b31      	ldr	r3, [pc, #196]	; (5f64 <main+0x160>)
    5ea0:	4798      	blx	r3
}

static void configure_event_user(struct events_resource *resource)
{
	//! [setup_5]
	events_attach_user(resource, CONF_EVENT_USER);
    5ea2:	a82e      	add	r0, sp, #184	; 0xb8
    5ea4:	2100      	movs	r1, #0
    5ea6:	4b30      	ldr	r3, [pc, #192]	; (5f68 <main+0x164>)
    5ea8:	4798      	blx	r3

static void configure_event_interrupt(struct events_resource *resource,
struct events_hook *hook)
{
	//! [setup_12]
	events_create_hook(hook, event_counter);
    5eaa:	a82b      	add	r0, sp, #172	; 0xac
    5eac:	492f      	ldr	r1, [pc, #188]	; (5f6c <main+0x168>)
    5eae:	4b30      	ldr	r3, [pc, #192]	; (5f70 <main+0x16c>)
    5eb0:	4798      	blx	r3
	//! [setup_12]

	//! [setup_13]
	events_add_hook(resource, hook);
    5eb2:	a82e      	add	r0, sp, #184	; 0xb8
    5eb4:	a92b      	add	r1, sp, #172	; 0xac
    5eb6:	4b2f      	ldr	r3, [pc, #188]	; (5f74 <main+0x170>)
    5eb8:	4798      	blx	r3
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
    5eba:	a82e      	add	r0, sp, #184	; 0xb8
    5ebc:	2101      	movs	r1, #1
    5ebe:	4b2e      	ldr	r3, [pc, #184]	; (5f78 <main+0x174>)
    5ec0:	4798      	blx	r3
	configure_event_user(&example_event);
	configure_event_interrupt(&example_event, &hook);
	

	
	configure_rtc_calendar();
    5ec2:	4b2e      	ldr	r3, [pc, #184]	; (5f7c <main+0x178>)
    5ec4:	4798      	blx	r3
	configure_rtc_callbacks();
    5ec6:	4b2e      	ldr	r3, [pc, #184]	; (5f80 <main+0x17c>)
    5ec8:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    5eca:	4d2e      	ldr	r5, [pc, #184]	; (5f84 <main+0x180>)
    5ecc:	1c28      	adds	r0, r5, #0
    5ece:	4b2e      	ldr	r3, [pc, #184]	; (5f88 <main+0x184>)
    5ed0:	4798      	blx	r3
		struct rtc_calendar_time *const time)
{
	time->second = 0;
	time->minute = 0;
	time->hour   = 0;
	time->pm     = 0;
    5ed2:	a929      	add	r1, sp, #164	; 0xa4
    5ed4:	70cc      	strb	r4, [r1, #3]
	
	//! [time]
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
	time.year = 2016;
    5ed6:	23fc      	movs	r3, #252	; 0xfc
    5ed8:	00db      	lsls	r3, r3, #3
    5eda:	80cb      	strh	r3, [r1, #6]
	time.month = 9;
    5edc:	2309      	movs	r3, #9
    5ede:	714b      	strb	r3, [r1, #5]
	time.day = 15;
    5ee0:	3306      	adds	r3, #6
    5ee2:	710b      	strb	r3, [r1, #4]
	time.hour = 15;
    5ee4:	708b      	strb	r3, [r1, #2]
	time.minute = 19;
    5ee6:	3304      	adds	r3, #4
    5ee8:	704b      	strb	r3, [r1, #1]
	time.second = 59;
    5eea:	3328      	adds	r3, #40	; 0x28
    5eec:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &time);
    5eee:	1c28      	adds	r0, r5, #0
    5ef0:	4b26      	ldr	r3, [pc, #152]	; (5f8c <main+0x188>)
    5ef2:	4798      	blx	r3
	//! [time]
	
	configure_adc();
    5ef4:	4b26      	ldr	r3, [pc, #152]	; (5f90 <main+0x18c>)
    5ef6:	4798      	blx	r3
	
	ui_init();
    5ef8:	4b26      	ldr	r3, [pc, #152]	; (5f94 <main+0x190>)
    5efa:	4798      	blx	r3
	ui_powerdown();
    5efc:	4b26      	ldr	r3, [pc, #152]	; (5f98 <main+0x194>)
    5efe:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    5f00:	4b26      	ldr	r3, [pc, #152]	; (5f9c <main+0x198>)
    5f02:	4798      	blx	r3
	
	while (events_is_busy(&example_event)) {
    5f04:	4c26      	ldr	r4, [pc, #152]	; (5fa0 <main+0x19c>)
    5f06:	a82e      	add	r0, sp, #184	; 0xb8
    5f08:	47a0      	blx	r4
    5f0a:	2800      	cmp	r0, #0
    5f0c:	d1fb      	bne.n	5f06 <main+0x102>
	};

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
		if ((1==usbMsgInFlag)){
    5f0e:	4d25      	ldr	r5, [pc, #148]	; (5fa4 <main+0x1a0>)
			processCommandMsg();
    5f10:	4e25      	ldr	r6, [pc, #148]	; (5fa8 <main+0x1a4>)
		}
		if (0==system_busy_flag && 1==commandReady )
    5f12:	4c26      	ldr	r4, [pc, #152]	; (5fac <main+0x1a8>)
	};

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
		if ((1==usbMsgInFlag)){
    5f14:	782b      	ldrb	r3, [r5, #0]
    5f16:	2b01      	cmp	r3, #1
    5f18:	d100      	bne.n	5f1c <main+0x118>
			processCommandMsg();
    5f1a:	47b0      	blx	r6
		}
		if (0==system_busy_flag && 1==commandReady )
    5f1c:	7823      	ldrb	r3, [r4, #0]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d1f8      	bne.n	5f14 <main+0x110>
    5f22:	4b23      	ldr	r3, [pc, #140]	; (5fb0 <main+0x1ac>)
    5f24:	781b      	ldrb	r3, [r3, #0]
    5f26:	2b01      	cmp	r3, #1
    5f28:	d1f4      	bne.n	5f14 <main+0x110>
		{
			execute_system_command();
    5f2a:	4b22      	ldr	r3, [pc, #136]	; (5fb4 <main+0x1b0>)
    5f2c:	4798      	blx	r3
    5f2e:	e7f1      	b.n	5f14 <main+0x110>
    5f30:	200000e8 	.word	0x200000e8
    5f34:	200007f0 	.word	0x200007f0
    5f38:	00002df5 	.word	0x00002df5
    5f3c:	42002000 	.word	0x42002000
    5f40:	00002eb9 	.word	0x00002eb9
    5f44:	0000ffff 	.word	0x0000ffff
    5f48:	20000c3c 	.word	0x20000c3c
    5f4c:	00003009 	.word	0x00003009
    5f50:	0000577d 	.word	0x0000577d
    5f54:	00003441 	.word	0x00003441
    5f58:	00003459 	.word	0x00003459
    5f5c:	000059f9 	.word	0x000059f9
    5f60:	000016cd 	.word	0x000016cd
    5f64:	000016dd 	.word	0x000016dd
    5f68:	000017c1 	.word	0x000017c1
    5f6c:	00005c1d 	.word	0x00005c1d
    5f70:	00001575 	.word	0x00001575
    5f74:	00001581 	.word	0x00001581
    5f78:	000015b5 	.word	0x000015b5
    5f7c:	00005925 	.word	0x00005925
    5f80:	000058fd 	.word	0x000058fd
    5f84:	20000c08 	.word	0x20000c08
    5f88:	000019ed 	.word	0x000019ed
    5f8c:	00001ad5 	.word	0x00001ad5
    5f90:	00005a21 	.word	0x00005a21
    5f94:	00000671 	.word	0x00000671
    5f98:	000006c1 	.word	0x000006c1
    5f9c:	0000100d 	.word	0x0000100d
    5fa0:	000017a1 	.word	0x000017a1
    5fa4:	200007e9 	.word	0x200007e9
    5fa8:	00005c89 	.word	0x00005c89
    5fac:	200007ae 	.word	0x200007ae
    5fb0:	200007b5 	.word	0x200007b5
    5fb4:	00005cf9 	.word	0x00005cf9

00005fb8 <usart_tx_callback>:
		// Fifo empty then Stop UART transmission 
		usart_disable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
		ui_com_rx_stop();
	}
	*/
}
    5fb8:	4770      	bx	lr
    5fba:	46c0      	nop			; (mov r8, r8)

00005fbc <usart_rx_callback>:

	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);

	return;
	*/
}
    5fbc:	4770      	bx	lr
    5fbe:	46c0      	nop			; (mov r8, r8)

00005fc0 <uart_rx_notify>:


//call back when USB received data.
void uart_rx_notify(uint8_t port)
{
    5fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fc2:	4647      	mov	r7, r8
    5fc4:	b480      	push	{r7}
    5fc6:	b0b8      	sub	sp, #224	; 0xe0
    5fc8:	af00      	add	r7, sp, #0
	
	UNUSED(port);
	/* Transmit first data */
	ui_com_rx_start();
    5fca:	4b25      	ldr	r3, [pc, #148]	; (6060 <uart_rx_notify+0xa0>)
    5fcc:	4798      	blx	r3
	uint8_t usb_read_buf[200];
	//usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
	uint8_t usb_data_length = udi_cdc_get_nb_received_data();
    5fce:	4b25      	ldr	r3, [pc, #148]	; (6064 <uart_rx_notify+0xa4>)
    5fd0:	4798      	blx	r3
	if(usb_data_length > 200){
    5fd2:	b2c3      	uxtb	r3, r0
    5fd4:	2bc8      	cmp	r3, #200	; 0xc8
    5fd6:	d919      	bls.n	600c <uart_rx_notify+0x4c>
    5fd8:	46e8      	mov	r8, sp
		uint8_t buff[usb_data_length];
    5fda:	21ff      	movs	r1, #255	; 0xff
    5fdc:	4001      	ands	r1, r0
    5fde:	1dcb      	adds	r3, r1, #7
    5fe0:	08db      	lsrs	r3, r3, #3
    5fe2:	00db      	lsls	r3, r3, #3
    5fe4:	466a      	mov	r2, sp
    5fe6:	1ad3      	subs	r3, r2, r3
    5fe8:	469d      	mov	sp, r3
		uint8_t String[] = "Invalid data length!";
    5fea:	4b1f      	ldr	r3, [pc, #124]	; (6068 <uart_rx_notify+0xa8>)
    5fec:	1c3a      	adds	r2, r7, #0
    5fee:	cb61      	ldmia	r3!, {r0, r5, r6}
    5ff0:	c261      	stmia	r2!, {r0, r5, r6}
    5ff2:	cb21      	ldmia	r3!, {r0, r5}
    5ff4:	c221      	stmia	r2!, {r0, r5}
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	7013      	strb	r3, [r2, #0]
		udi_cdc_read_buf(buff, usb_data_length);
    5ffa:	4668      	mov	r0, sp
    5ffc:	4b1b      	ldr	r3, [pc, #108]	; (606c <uart_rx_notify+0xac>)
    5ffe:	4798      	blx	r3
		udi_cdc_write_buf(String, sizeof(String));	
    6000:	1c38      	adds	r0, r7, #0
    6002:	2115      	movs	r1, #21
    6004:	4b1a      	ldr	r3, [pc, #104]	; (6070 <uart_rx_notify+0xb0>)
    6006:	4798      	blx	r3
    6008:	46c5      	mov	sp, r8
    600a:	e023      	b.n	6054 <uart_rx_notify+0x94>
		return;
	}else{	
		//udi_cdc_multi_getc(cdc_read_buf,20);
		//tx_data = udi_cdc_getc();
		udi_cdc_read_buf(usb_read_buf, usb_data_length);
    600c:	24ff      	movs	r4, #255	; 0xff
    600e:	4004      	ands	r4, r0
    6010:	2318      	movs	r3, #24
    6012:	18f8      	adds	r0, r7, r3
    6014:	1c21      	adds	r1, r4, #0
    6016:	4b15      	ldr	r3, [pc, #84]	; (606c <uart_rx_notify+0xac>)
    6018:	4798      	blx	r3
		
		//check is data correct.
		if (usb_read_buf[0] == START_FLAG && usb_read_buf[usb_data_length-1] == END_FLAG)
    601a:	7e3b      	ldrb	r3, [r7, #24]
    601c:	2b68      	cmp	r3, #104	; 0x68
    601e:	d116      	bne.n	604e <uart_rx_notify+0x8e>
    6020:	3378      	adds	r3, #120	; 0x78
    6022:	18fb      	adds	r3, r7, r3
    6024:	1918      	adds	r0, r3, r4
    6026:	38c9      	subs	r0, #201	; 0xc9
    6028:	7803      	ldrb	r3, [r0, #0]
    602a:	2b88      	cmp	r3, #136	; 0x88
    602c:	d10f      	bne.n	604e <uart_rx_notify+0x8e>
		{
			for (uint8_t i = 0; i < usb_read_buf[1];i++)
    602e:	7e79      	ldrb	r1, [r7, #25]
    6030:	2900      	cmp	r1, #0
    6032:	d00a      	beq.n	604a <uart_rx_notify+0x8a>
    6034:	2300      	movs	r3, #0
			{
				commandMsg[i] = usb_read_buf[i+2];
    6036:	480f      	ldr	r0, [pc, #60]	; (6074 <uart_rx_notify+0xb4>)
    6038:	2218      	movs	r2, #24
    603a:	18ba      	adds	r2, r7, r2
    603c:	18d2      	adds	r2, r2, r3
    603e:	7892      	ldrb	r2, [r2, #2]
    6040:	541a      	strb	r2, [r3, r0]
    6042:	3301      	adds	r3, #1
		udi_cdc_read_buf(usb_read_buf, usb_data_length);
		
		//check is data correct.
		if (usb_read_buf[0] == START_FLAG && usb_read_buf[usb_data_length-1] == END_FLAG)
		{
			for (uint8_t i = 0; i < usb_read_buf[1];i++)
    6044:	b2da      	uxtb	r2, r3
    6046:	428a      	cmp	r2, r1
    6048:	d3f6      	bcc.n	6038 <uart_rx_notify+0x78>
			{
				commandMsg[i] = usb_read_buf[i+2];
			}
			msg_length = usb_read_buf[1];
    604a:	4b0b      	ldr	r3, [pc, #44]	; (6078 <uart_rx_notify+0xb8>)
    604c:	7019      	strb	r1, [r3, #0]
		}
		usbMsgInFlag = 1;
    604e:	2201      	movs	r2, #1
    6050:	4b0a      	ldr	r3, [pc, #40]	; (607c <uart_rx_notify+0xbc>)
    6052:	701a      	strb	r2, [r3, #0]
	}
	//tx_data = udi_cdc_getc();
	//usart_write_buffer_job(&usart_module_edbg, &tx_data, 1);
	return;
}
    6054:	46bd      	mov	sp, r7
    6056:	b038      	add	sp, #224	; 0xe0
    6058:	bc04      	pop	{r2}
    605a:	4690      	mov	r8, r2
    605c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    605e:	46c0      	nop			; (mov r8, r8)
    6060:	000006f1 	.word	0x000006f1
    6064:	00000a39 	.word	0x00000a39
    6068:	00008a30 	.word	0x00008a30
    606c:	00000cf5 	.word	0x00000cf5
    6070:	00000e6d 	.word	0x00000e6d
    6074:	200007d4 	.word	0x200007d4
    6078:	200007e8 	.word	0x200007e8
    607c:	200007e9 	.word	0x200007e9

00006080 <uart_config>:

void uart_config(uint8_t port,usb_cdc_line_coding_t *cfg)
{
    6080:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6082:	4b58      	ldr	r3, [pc, #352]	; (61e4 <uart_config+0x164>)
    6084:	2280      	movs	r2, #128	; 0x80
    6086:	05d2      	lsls	r2, r2, #23
    6088:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    608a:	2200      	movs	r2, #0
    608c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    608e:	20ff      	movs	r0, #255	; 0xff
    6090:	8118      	strh	r0, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    6092:	2000      	movs	r0, #0
    6094:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6096:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    6098:	2496      	movs	r4, #150	; 0x96
    609a:	01a4      	lsls	r4, r4, #6
    609c:	621c      	str	r4, [r3, #32]
	config->receiver_enable  = true;
    609e:	2401      	movs	r4, #1
    60a0:	2524      	movs	r5, #36	; 0x24
    60a2:	555c      	strb	r4, [r3, r5]
	config->transmitter_enable = true;
    60a4:	3501      	adds	r5, #1
    60a6:	555c      	strb	r4, [r3, r5]
	config->clock_polarity_inverted = false;
    60a8:	3425      	adds	r4, #37	; 0x25
    60aa:	551a      	strb	r2, [r3, r4]
	config->use_external_clock = false;
    60ac:	3401      	adds	r4, #1
    60ae:	551a      	strb	r2, [r3, r4]
	config->ext_clock_freq   = 0;
    60b0:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    60b2:	2488      	movs	r4, #136	; 0x88
    60b4:	0364      	lsls	r4, r4, #13
    60b6:	60dc      	str	r4, [r3, #12]
	config->run_in_standby   = false;
    60b8:	242c      	movs	r4, #44	; 0x2c
    60ba:	551a      	strb	r2, [r3, r4]
	config->generator_source = GCLK_GENERATOR_0;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    60bc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    60be:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    60c0:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    60c2:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    60c4:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    60c6:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    60c8:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    60ca:	7618      	strb	r0, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    60cc:	7718      	strb	r0, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    60ce:	7658      	strb	r0, [r3, #25]
	config->receive_pulse_length                    = 19;
    60d0:	2213      	movs	r2, #19
    60d2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    60d4:	7758      	strb	r0, [r3, #29]
	UNUSED(port);
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
	usart_conf.generator_source = GCLK_GENERATOR_3;
    60d6:	2003      	movs	r0, #3
    60d8:	321a      	adds	r2, #26
    60da:	5498      	strb	r0, [r3, r2]

	switch (cfg->bCharFormat) {
    60dc:	790b      	ldrb	r3, [r1, #4]
    60de:	2b02      	cmp	r3, #2
    60e0:	d102      	bne.n	60e8 <uart_config+0x68>
	case CDC_STOP_BITS_2:
		usart_conf.stopbits = USART_STOPBITS_2;
    60e2:	3213      	adds	r2, #19
    60e4:	4b3f      	ldr	r3, [pc, #252]	; (61e4 <uart_config+0x164>)
    60e6:	729a      	strb	r2, [r3, #10]
		/* Default stop bit = 1 stop bit */
		usart_conf.stopbits = USART_STOPBITS_1;
		break;
	}

	switch (cfg->bParityType) {
    60e8:	794b      	ldrb	r3, [r1, #5]
    60ea:	2b01      	cmp	r3, #1
    60ec:	d005      	beq.n	60fa <uart_config+0x7a>
    60ee:	2b02      	cmp	r3, #2
    60f0:	d107      	bne.n	6102 <uart_config+0x82>
	case CDC_PAR_EVEN:
		usart_conf.parity = USART_PARITY_EVEN;
    60f2:	2200      	movs	r2, #0
    60f4:	4b3b      	ldr	r3, [pc, #236]	; (61e4 <uart_config+0x164>)
    60f6:	811a      	strh	r2, [r3, #8]
		break;
    60f8:	e003      	b.n	6102 <uart_config+0x82>

	case CDC_PAR_ODD:
		usart_conf.parity = USART_PARITY_ODD;
    60fa:	2280      	movs	r2, #128	; 0x80
    60fc:	0192      	lsls	r2, r2, #6
    60fe:	4b39      	ldr	r3, [pc, #228]	; (61e4 <uart_config+0x164>)
    6100:	811a      	strh	r2, [r3, #8]
	default:
		usart_conf.parity = USART_PARITY_NONE;
		break;
	}

	switch(cfg->bDataBits) {
    6102:	798b      	ldrb	r3, [r1, #6]
    6104:	2b06      	cmp	r3, #6
    6106:	d007      	beq.n	6118 <uart_config+0x98>
    6108:	2b07      	cmp	r3, #7
    610a:	d009      	beq.n	6120 <uart_config+0xa0>
    610c:	2b05      	cmp	r3, #5
    610e:	d10a      	bne.n	6126 <uart_config+0xa6>
	case 5:
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    6110:	2205      	movs	r2, #5
    6112:	4b34      	ldr	r3, [pc, #208]	; (61e4 <uart_config+0x164>)
    6114:	72da      	strb	r2, [r3, #11]
		break;
    6116:	e006      	b.n	6126 <uart_config+0xa6>
	case 6:
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    6118:	2206      	movs	r2, #6
    611a:	4b32      	ldr	r3, [pc, #200]	; (61e4 <uart_config+0x164>)
    611c:	72da      	strb	r2, [r3, #11]
		break;
    611e:	e002      	b.n	6126 <uart_config+0xa6>
	case 7:
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    6120:	2207      	movs	r2, #7
    6122:	4b30      	ldr	r3, [pc, #192]	; (61e4 <uart_config+0x164>)
    6124:	72da      	strb	r2, [r3, #11]
		usart_conf.character_size = USART_CHARACTER_SIZE_8BIT;
		break;
	}

	/* Options for USART. */
	usart_conf.baudrate = LE32_TO_CPU(cfg->dwDTERate);
    6126:	780c      	ldrb	r4, [r1, #0]
    6128:	784a      	ldrb	r2, [r1, #1]
    612a:	0212      	lsls	r2, r2, #8
    612c:	4322      	orrs	r2, r4
    612e:	788b      	ldrb	r3, [r1, #2]
    6130:	041b      	lsls	r3, r3, #16
    6132:	4313      	orrs	r3, r2
    6134:	1c1a      	adds	r2, r3, #0
    6136:	78cb      	ldrb	r3, [r1, #3]
    6138:	061b      	lsls	r3, r3, #24
    613a:	4313      	orrs	r3, r2
    613c:	4a29      	ldr	r2, [pc, #164]	; (61e4 <uart_config+0x164>)
    613e:	6213      	str	r3, [r2, #32]
	usart_conf.mux_setting = CONF_USART_MUX_SETTING;
    6140:	2380      	movs	r3, #128	; 0x80
    6142:	035b      	lsls	r3, r3, #13
    6144:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_USART_PINMUX_PAD0;
    6146:	4b28      	ldr	r3, [pc, #160]	; (61e8 <uart_config+0x168>)
    6148:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_USART_PINMUX_PAD1;
    614a:	4b28      	ldr	r3, [pc, #160]	; (61ec <uart_config+0x16c>)
    614c:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_USART_PINMUX_PAD2;
    614e:	2301      	movs	r3, #1
    6150:	425b      	negs	r3, r3
    6152:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_USART_PINMUX_PAD3;
    6154:	63d3      	str	r3, [r2, #60]	; 0x3c
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6156:	4d26      	ldr	r5, [pc, #152]	; (61f0 <uart_config+0x170>)
    6158:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    615a:	1c20      	adds	r0, r4, #0
    615c:	4b25      	ldr	r3, [pc, #148]	; (61f4 <uart_config+0x174>)
    615e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6160:	231f      	movs	r3, #31
    6162:	4018      	ands	r0, r3
    6164:	3b1e      	subs	r3, #30
    6166:	4083      	lsls	r3, r0
    6168:	1c18      	adds	r0, r3, #0
    616a:	2380      	movs	r3, #128	; 0x80
    616c:	4a22      	ldr	r2, [pc, #136]	; (61f8 <uart_config+0x178>)
    616e:	50d0      	str	r0, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    6170:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    6172:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    6174:	2b00      	cmp	r3, #0
    6176:	d1fc      	bne.n	6172 <uart_config+0xf2>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6178:	6823      	ldr	r3, [r4, #0]
    617a:	2202      	movs	r2, #2
    617c:	4393      	bics	r3, r2
    617e:	6023      	str	r3, [r4, #0]
	usart_disable(&usart_module_edbg);
	usart_init(&usart_module_edbg, CONF_USART_BASE, &usart_conf);
    6180:	4d1b      	ldr	r5, [pc, #108]	; (61f0 <uart_config+0x170>)
    6182:	1c28      	adds	r0, r5, #0
    6184:	491d      	ldr	r1, [pc, #116]	; (61fc <uart_config+0x17c>)
    6186:	4a17      	ldr	r2, [pc, #92]	; (61e4 <uart_config+0x164>)
    6188:	4b1d      	ldr	r3, [pc, #116]	; (6200 <uart_config+0x180>)
    618a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    618c:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    618e:	1c20      	adds	r0, r4, #0
    6190:	4b18      	ldr	r3, [pc, #96]	; (61f4 <uart_config+0x174>)
    6192:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6194:	231f      	movs	r3, #31
    6196:	4018      	ands	r0, r3
    6198:	3b1e      	subs	r3, #30
    619a:	4083      	lsls	r3, r0
    619c:	1c18      	adds	r0, r3, #0
    619e:	4b16      	ldr	r3, [pc, #88]	; (61f8 <uart_config+0x178>)
    61a0:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    61a2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    61a4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    61a6:	2b00      	cmp	r3, #0
    61a8:	d1fc      	bne.n	61a4 <uart_config+0x124>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    61aa:	6822      	ldr	r2, [r4, #0]
    61ac:	3302      	adds	r3, #2
    61ae:	4313      	orrs	r3, r2
    61b0:	6023      	str	r3, [r4, #0]
	usart_enable(&usart_module_edbg);

	/* Enable interrupts */
	usart_register_callback(&usart_module_edbg, usart_tx_callback,
    61b2:	4c0f      	ldr	r4, [pc, #60]	; (61f0 <uart_config+0x170>)
    61b4:	1c20      	adds	r0, r4, #0
    61b6:	4913      	ldr	r1, [pc, #76]	; (6204 <uart_config+0x184>)
    61b8:	2200      	movs	r2, #0
    61ba:	4e13      	ldr	r6, [pc, #76]	; (6208 <uart_config+0x188>)
    61bc:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    61be:	2531      	movs	r5, #49	; 0x31
    61c0:	5d62      	ldrb	r2, [r4, r5]
    61c2:	2301      	movs	r3, #1
    61c4:	4313      	orrs	r3, r2
    61c6:	5563      	strb	r3, [r4, r5]
			USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_module_edbg, usart_rx_callback,
    61c8:	1c20      	adds	r0, r4, #0
    61ca:	4910      	ldr	r1, [pc, #64]	; (620c <uart_config+0x18c>)
    61cc:	2201      	movs	r2, #1
    61ce:	47b0      	blx	r6
    61d0:	5d62      	ldrb	r2, [r4, r5]
    61d2:	2302      	movs	r3, #2
    61d4:	4313      	orrs	r3, r2
    61d6:	5563      	strb	r3, [r4, r5]
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_module_edbg, USART_CALLBACK_BUFFER_RECEIVED);
	usart_read_buffer_job(&usart_module_edbg, &rx_data, 1);
    61d8:	1c20      	adds	r0, r4, #0
    61da:	490d      	ldr	r1, [pc, #52]	; (6210 <uart_config+0x190>)
    61dc:	2201      	movs	r2, #1
    61de:	4b0d      	ldr	r3, [pc, #52]	; (6214 <uart_config+0x194>)
    61e0:	4798      	blx	r3
}
    61e2:	bd70      	pop	{r4, r5, r6, pc}
    61e4:	20000ca4 	.word	0x20000ca4
    61e8:	00160002 	.word	0x00160002
    61ec:	00170002 	.word	0x00170002
    61f0:	20000ce4 	.word	0x20000ce4
    61f4:	000020a1 	.word	0x000020a1
    61f8:	e000e100 	.word	0xe000e100
    61fc:	42001400 	.word	0x42001400
    6200:	0000212d 	.word	0x0000212d
    6204:	00005fb9 	.word	0x00005fb9
    6208:	000024b5 	.word	0x000024b5
    620c:	00005fbd 	.word	0x00005fbd
    6210:	200007d0 	.word	0x200007d0
    6214:	000024cd 	.word	0x000024cd

00006218 <uart_open>:

void uart_open(uint8_t port)
{
    6218:	b538      	push	{r3, r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    621a:	4d0a      	ldr	r5, [pc, #40]	; (6244 <uart_open+0x2c>)
    621c:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    621e:	1c20      	adds	r0, r4, #0
    6220:	4b09      	ldr	r3, [pc, #36]	; (6248 <uart_open+0x30>)
    6222:	4798      	blx	r3
    6224:	231f      	movs	r3, #31
    6226:	4018      	ands	r0, r3
    6228:	3b1e      	subs	r3, #30
    622a:	4083      	lsls	r3, r0
    622c:	1c18      	adds	r0, r3, #0
    622e:	4b07      	ldr	r3, [pc, #28]	; (624c <uart_open+0x34>)
    6230:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    6232:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    6234:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    6236:	2b00      	cmp	r3, #0
    6238:	d1fc      	bne.n	6234 <uart_open+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    623a:	6822      	ldr	r2, [r4, #0]
    623c:	3302      	adds	r3, #2
    623e:	4313      	orrs	r3, r2
    6240:	6023      	str	r3, [r4, #0]
	UNUSED(port);

	usart_enable(&usart_module_edbg);
}
    6242:	bd38      	pop	{r3, r4, r5, pc}
    6244:	20000ce4 	.word	0x20000ce4
    6248:	000020a1 	.word	0x000020a1
    624c:	e000e100 	.word	0xe000e100

00006250 <uart_close>:

void uart_close(uint8_t port)
{
    6250:	b538      	push	{r3, r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6252:	4d0b      	ldr	r5, [pc, #44]	; (6280 <uart_close+0x30>)
    6254:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    6256:	1c20      	adds	r0, r4, #0
    6258:	4b0a      	ldr	r3, [pc, #40]	; (6284 <uart_close+0x34>)
    625a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    625c:	231f      	movs	r3, #31
    625e:	4018      	ands	r0, r3
    6260:	3b1e      	subs	r3, #30
    6262:	4083      	lsls	r3, r0
    6264:	1c18      	adds	r0, r3, #0
    6266:	2380      	movs	r3, #128	; 0x80
    6268:	4a07      	ldr	r2, [pc, #28]	; (6288 <uart_close+0x38>)
    626a:	50d0      	str	r0, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    626c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    626e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    6270:	2b00      	cmp	r3, #0
    6272:	d1fc      	bne.n	626e <uart_close+0x1e>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6274:	6823      	ldr	r3, [r4, #0]
    6276:	2202      	movs	r2, #2
    6278:	4393      	bics	r3, r2
    627a:	6023      	str	r3, [r4, #0]
	UNUSED(port);
	/* Close RS232 communication */
	usart_disable(&usart_module_edbg);
}
    627c:	bd38      	pop	{r3, r4, r5, pc}
    627e:	46c0      	nop			; (mov r8, r8)
    6280:	20000ce4 	.word	0x20000ce4
    6284:	000020a1 	.word	0x000020a1
    6288:	e000e100 	.word	0xe000e100

0000628c <__aeabi_uidiv>:
    628c:	2200      	movs	r2, #0
    628e:	0843      	lsrs	r3, r0, #1
    6290:	428b      	cmp	r3, r1
    6292:	d374      	bcc.n	637e <__aeabi_uidiv+0xf2>
    6294:	0903      	lsrs	r3, r0, #4
    6296:	428b      	cmp	r3, r1
    6298:	d35f      	bcc.n	635a <__aeabi_uidiv+0xce>
    629a:	0a03      	lsrs	r3, r0, #8
    629c:	428b      	cmp	r3, r1
    629e:	d344      	bcc.n	632a <__aeabi_uidiv+0x9e>
    62a0:	0b03      	lsrs	r3, r0, #12
    62a2:	428b      	cmp	r3, r1
    62a4:	d328      	bcc.n	62f8 <__aeabi_uidiv+0x6c>
    62a6:	0c03      	lsrs	r3, r0, #16
    62a8:	428b      	cmp	r3, r1
    62aa:	d30d      	bcc.n	62c8 <__aeabi_uidiv+0x3c>
    62ac:	22ff      	movs	r2, #255	; 0xff
    62ae:	0209      	lsls	r1, r1, #8
    62b0:	ba12      	rev	r2, r2
    62b2:	0c03      	lsrs	r3, r0, #16
    62b4:	428b      	cmp	r3, r1
    62b6:	d302      	bcc.n	62be <__aeabi_uidiv+0x32>
    62b8:	1212      	asrs	r2, r2, #8
    62ba:	0209      	lsls	r1, r1, #8
    62bc:	d065      	beq.n	638a <__aeabi_uidiv+0xfe>
    62be:	0b03      	lsrs	r3, r0, #12
    62c0:	428b      	cmp	r3, r1
    62c2:	d319      	bcc.n	62f8 <__aeabi_uidiv+0x6c>
    62c4:	e000      	b.n	62c8 <__aeabi_uidiv+0x3c>
    62c6:	0a09      	lsrs	r1, r1, #8
    62c8:	0bc3      	lsrs	r3, r0, #15
    62ca:	428b      	cmp	r3, r1
    62cc:	d301      	bcc.n	62d2 <__aeabi_uidiv+0x46>
    62ce:	03cb      	lsls	r3, r1, #15
    62d0:	1ac0      	subs	r0, r0, r3
    62d2:	4152      	adcs	r2, r2
    62d4:	0b83      	lsrs	r3, r0, #14
    62d6:	428b      	cmp	r3, r1
    62d8:	d301      	bcc.n	62de <__aeabi_uidiv+0x52>
    62da:	038b      	lsls	r3, r1, #14
    62dc:	1ac0      	subs	r0, r0, r3
    62de:	4152      	adcs	r2, r2
    62e0:	0b43      	lsrs	r3, r0, #13
    62e2:	428b      	cmp	r3, r1
    62e4:	d301      	bcc.n	62ea <__aeabi_uidiv+0x5e>
    62e6:	034b      	lsls	r3, r1, #13
    62e8:	1ac0      	subs	r0, r0, r3
    62ea:	4152      	adcs	r2, r2
    62ec:	0b03      	lsrs	r3, r0, #12
    62ee:	428b      	cmp	r3, r1
    62f0:	d301      	bcc.n	62f6 <__aeabi_uidiv+0x6a>
    62f2:	030b      	lsls	r3, r1, #12
    62f4:	1ac0      	subs	r0, r0, r3
    62f6:	4152      	adcs	r2, r2
    62f8:	0ac3      	lsrs	r3, r0, #11
    62fa:	428b      	cmp	r3, r1
    62fc:	d301      	bcc.n	6302 <__aeabi_uidiv+0x76>
    62fe:	02cb      	lsls	r3, r1, #11
    6300:	1ac0      	subs	r0, r0, r3
    6302:	4152      	adcs	r2, r2
    6304:	0a83      	lsrs	r3, r0, #10
    6306:	428b      	cmp	r3, r1
    6308:	d301      	bcc.n	630e <__aeabi_uidiv+0x82>
    630a:	028b      	lsls	r3, r1, #10
    630c:	1ac0      	subs	r0, r0, r3
    630e:	4152      	adcs	r2, r2
    6310:	0a43      	lsrs	r3, r0, #9
    6312:	428b      	cmp	r3, r1
    6314:	d301      	bcc.n	631a <__aeabi_uidiv+0x8e>
    6316:	024b      	lsls	r3, r1, #9
    6318:	1ac0      	subs	r0, r0, r3
    631a:	4152      	adcs	r2, r2
    631c:	0a03      	lsrs	r3, r0, #8
    631e:	428b      	cmp	r3, r1
    6320:	d301      	bcc.n	6326 <__aeabi_uidiv+0x9a>
    6322:	020b      	lsls	r3, r1, #8
    6324:	1ac0      	subs	r0, r0, r3
    6326:	4152      	adcs	r2, r2
    6328:	d2cd      	bcs.n	62c6 <__aeabi_uidiv+0x3a>
    632a:	09c3      	lsrs	r3, r0, #7
    632c:	428b      	cmp	r3, r1
    632e:	d301      	bcc.n	6334 <__aeabi_uidiv+0xa8>
    6330:	01cb      	lsls	r3, r1, #7
    6332:	1ac0      	subs	r0, r0, r3
    6334:	4152      	adcs	r2, r2
    6336:	0983      	lsrs	r3, r0, #6
    6338:	428b      	cmp	r3, r1
    633a:	d301      	bcc.n	6340 <__aeabi_uidiv+0xb4>
    633c:	018b      	lsls	r3, r1, #6
    633e:	1ac0      	subs	r0, r0, r3
    6340:	4152      	adcs	r2, r2
    6342:	0943      	lsrs	r3, r0, #5
    6344:	428b      	cmp	r3, r1
    6346:	d301      	bcc.n	634c <__aeabi_uidiv+0xc0>
    6348:	014b      	lsls	r3, r1, #5
    634a:	1ac0      	subs	r0, r0, r3
    634c:	4152      	adcs	r2, r2
    634e:	0903      	lsrs	r3, r0, #4
    6350:	428b      	cmp	r3, r1
    6352:	d301      	bcc.n	6358 <__aeabi_uidiv+0xcc>
    6354:	010b      	lsls	r3, r1, #4
    6356:	1ac0      	subs	r0, r0, r3
    6358:	4152      	adcs	r2, r2
    635a:	08c3      	lsrs	r3, r0, #3
    635c:	428b      	cmp	r3, r1
    635e:	d301      	bcc.n	6364 <__aeabi_uidiv+0xd8>
    6360:	00cb      	lsls	r3, r1, #3
    6362:	1ac0      	subs	r0, r0, r3
    6364:	4152      	adcs	r2, r2
    6366:	0883      	lsrs	r3, r0, #2
    6368:	428b      	cmp	r3, r1
    636a:	d301      	bcc.n	6370 <__aeabi_uidiv+0xe4>
    636c:	008b      	lsls	r3, r1, #2
    636e:	1ac0      	subs	r0, r0, r3
    6370:	4152      	adcs	r2, r2
    6372:	0843      	lsrs	r3, r0, #1
    6374:	428b      	cmp	r3, r1
    6376:	d301      	bcc.n	637c <__aeabi_uidiv+0xf0>
    6378:	004b      	lsls	r3, r1, #1
    637a:	1ac0      	subs	r0, r0, r3
    637c:	4152      	adcs	r2, r2
    637e:	1a41      	subs	r1, r0, r1
    6380:	d200      	bcs.n	6384 <__aeabi_uidiv+0xf8>
    6382:	4601      	mov	r1, r0
    6384:	4152      	adcs	r2, r2
    6386:	4610      	mov	r0, r2
    6388:	4770      	bx	lr
    638a:	e7ff      	b.n	638c <__aeabi_uidiv+0x100>
    638c:	b501      	push	{r0, lr}
    638e:	2000      	movs	r0, #0
    6390:	f000 f8fc 	bl	658c <__aeabi_idiv0>
    6394:	bd02      	pop	{r1, pc}
    6396:	46c0      	nop			; (mov r8, r8)

00006398 <__aeabi_uidivmod>:
    6398:	2900      	cmp	r1, #0
    639a:	d0f7      	beq.n	638c <__aeabi_uidiv+0x100>
    639c:	b503      	push	{r0, r1, lr}
    639e:	f7ff ff75 	bl	628c <__aeabi_uidiv>
    63a2:	bc0e      	pop	{r1, r2, r3}
    63a4:	4342      	muls	r2, r0
    63a6:	1a89      	subs	r1, r1, r2
    63a8:	4718      	bx	r3
    63aa:	46c0      	nop			; (mov r8, r8)

000063ac <__aeabi_idiv>:
    63ac:	4603      	mov	r3, r0
    63ae:	430b      	orrs	r3, r1
    63b0:	d47f      	bmi.n	64b2 <__aeabi_idiv+0x106>
    63b2:	2200      	movs	r2, #0
    63b4:	0843      	lsrs	r3, r0, #1
    63b6:	428b      	cmp	r3, r1
    63b8:	d374      	bcc.n	64a4 <__aeabi_idiv+0xf8>
    63ba:	0903      	lsrs	r3, r0, #4
    63bc:	428b      	cmp	r3, r1
    63be:	d35f      	bcc.n	6480 <__aeabi_idiv+0xd4>
    63c0:	0a03      	lsrs	r3, r0, #8
    63c2:	428b      	cmp	r3, r1
    63c4:	d344      	bcc.n	6450 <__aeabi_idiv+0xa4>
    63c6:	0b03      	lsrs	r3, r0, #12
    63c8:	428b      	cmp	r3, r1
    63ca:	d328      	bcc.n	641e <__aeabi_idiv+0x72>
    63cc:	0c03      	lsrs	r3, r0, #16
    63ce:	428b      	cmp	r3, r1
    63d0:	d30d      	bcc.n	63ee <__aeabi_idiv+0x42>
    63d2:	22ff      	movs	r2, #255	; 0xff
    63d4:	0209      	lsls	r1, r1, #8
    63d6:	ba12      	rev	r2, r2
    63d8:	0c03      	lsrs	r3, r0, #16
    63da:	428b      	cmp	r3, r1
    63dc:	d302      	bcc.n	63e4 <__aeabi_idiv+0x38>
    63de:	1212      	asrs	r2, r2, #8
    63e0:	0209      	lsls	r1, r1, #8
    63e2:	d065      	beq.n	64b0 <__aeabi_idiv+0x104>
    63e4:	0b03      	lsrs	r3, r0, #12
    63e6:	428b      	cmp	r3, r1
    63e8:	d319      	bcc.n	641e <__aeabi_idiv+0x72>
    63ea:	e000      	b.n	63ee <__aeabi_idiv+0x42>
    63ec:	0a09      	lsrs	r1, r1, #8
    63ee:	0bc3      	lsrs	r3, r0, #15
    63f0:	428b      	cmp	r3, r1
    63f2:	d301      	bcc.n	63f8 <__aeabi_idiv+0x4c>
    63f4:	03cb      	lsls	r3, r1, #15
    63f6:	1ac0      	subs	r0, r0, r3
    63f8:	4152      	adcs	r2, r2
    63fa:	0b83      	lsrs	r3, r0, #14
    63fc:	428b      	cmp	r3, r1
    63fe:	d301      	bcc.n	6404 <__aeabi_idiv+0x58>
    6400:	038b      	lsls	r3, r1, #14
    6402:	1ac0      	subs	r0, r0, r3
    6404:	4152      	adcs	r2, r2
    6406:	0b43      	lsrs	r3, r0, #13
    6408:	428b      	cmp	r3, r1
    640a:	d301      	bcc.n	6410 <__aeabi_idiv+0x64>
    640c:	034b      	lsls	r3, r1, #13
    640e:	1ac0      	subs	r0, r0, r3
    6410:	4152      	adcs	r2, r2
    6412:	0b03      	lsrs	r3, r0, #12
    6414:	428b      	cmp	r3, r1
    6416:	d301      	bcc.n	641c <__aeabi_idiv+0x70>
    6418:	030b      	lsls	r3, r1, #12
    641a:	1ac0      	subs	r0, r0, r3
    641c:	4152      	adcs	r2, r2
    641e:	0ac3      	lsrs	r3, r0, #11
    6420:	428b      	cmp	r3, r1
    6422:	d301      	bcc.n	6428 <__aeabi_idiv+0x7c>
    6424:	02cb      	lsls	r3, r1, #11
    6426:	1ac0      	subs	r0, r0, r3
    6428:	4152      	adcs	r2, r2
    642a:	0a83      	lsrs	r3, r0, #10
    642c:	428b      	cmp	r3, r1
    642e:	d301      	bcc.n	6434 <__aeabi_idiv+0x88>
    6430:	028b      	lsls	r3, r1, #10
    6432:	1ac0      	subs	r0, r0, r3
    6434:	4152      	adcs	r2, r2
    6436:	0a43      	lsrs	r3, r0, #9
    6438:	428b      	cmp	r3, r1
    643a:	d301      	bcc.n	6440 <__aeabi_idiv+0x94>
    643c:	024b      	lsls	r3, r1, #9
    643e:	1ac0      	subs	r0, r0, r3
    6440:	4152      	adcs	r2, r2
    6442:	0a03      	lsrs	r3, r0, #8
    6444:	428b      	cmp	r3, r1
    6446:	d301      	bcc.n	644c <__aeabi_idiv+0xa0>
    6448:	020b      	lsls	r3, r1, #8
    644a:	1ac0      	subs	r0, r0, r3
    644c:	4152      	adcs	r2, r2
    644e:	d2cd      	bcs.n	63ec <__aeabi_idiv+0x40>
    6450:	09c3      	lsrs	r3, r0, #7
    6452:	428b      	cmp	r3, r1
    6454:	d301      	bcc.n	645a <__aeabi_idiv+0xae>
    6456:	01cb      	lsls	r3, r1, #7
    6458:	1ac0      	subs	r0, r0, r3
    645a:	4152      	adcs	r2, r2
    645c:	0983      	lsrs	r3, r0, #6
    645e:	428b      	cmp	r3, r1
    6460:	d301      	bcc.n	6466 <__aeabi_idiv+0xba>
    6462:	018b      	lsls	r3, r1, #6
    6464:	1ac0      	subs	r0, r0, r3
    6466:	4152      	adcs	r2, r2
    6468:	0943      	lsrs	r3, r0, #5
    646a:	428b      	cmp	r3, r1
    646c:	d301      	bcc.n	6472 <__aeabi_idiv+0xc6>
    646e:	014b      	lsls	r3, r1, #5
    6470:	1ac0      	subs	r0, r0, r3
    6472:	4152      	adcs	r2, r2
    6474:	0903      	lsrs	r3, r0, #4
    6476:	428b      	cmp	r3, r1
    6478:	d301      	bcc.n	647e <__aeabi_idiv+0xd2>
    647a:	010b      	lsls	r3, r1, #4
    647c:	1ac0      	subs	r0, r0, r3
    647e:	4152      	adcs	r2, r2
    6480:	08c3      	lsrs	r3, r0, #3
    6482:	428b      	cmp	r3, r1
    6484:	d301      	bcc.n	648a <__aeabi_idiv+0xde>
    6486:	00cb      	lsls	r3, r1, #3
    6488:	1ac0      	subs	r0, r0, r3
    648a:	4152      	adcs	r2, r2
    648c:	0883      	lsrs	r3, r0, #2
    648e:	428b      	cmp	r3, r1
    6490:	d301      	bcc.n	6496 <__aeabi_idiv+0xea>
    6492:	008b      	lsls	r3, r1, #2
    6494:	1ac0      	subs	r0, r0, r3
    6496:	4152      	adcs	r2, r2
    6498:	0843      	lsrs	r3, r0, #1
    649a:	428b      	cmp	r3, r1
    649c:	d301      	bcc.n	64a2 <__aeabi_idiv+0xf6>
    649e:	004b      	lsls	r3, r1, #1
    64a0:	1ac0      	subs	r0, r0, r3
    64a2:	4152      	adcs	r2, r2
    64a4:	1a41      	subs	r1, r0, r1
    64a6:	d200      	bcs.n	64aa <__aeabi_idiv+0xfe>
    64a8:	4601      	mov	r1, r0
    64aa:	4152      	adcs	r2, r2
    64ac:	4610      	mov	r0, r2
    64ae:	4770      	bx	lr
    64b0:	e05d      	b.n	656e <__aeabi_idiv+0x1c2>
    64b2:	0fca      	lsrs	r2, r1, #31
    64b4:	d000      	beq.n	64b8 <__aeabi_idiv+0x10c>
    64b6:	4249      	negs	r1, r1
    64b8:	1003      	asrs	r3, r0, #32
    64ba:	d300      	bcc.n	64be <__aeabi_idiv+0x112>
    64bc:	4240      	negs	r0, r0
    64be:	4053      	eors	r3, r2
    64c0:	2200      	movs	r2, #0
    64c2:	469c      	mov	ip, r3
    64c4:	0903      	lsrs	r3, r0, #4
    64c6:	428b      	cmp	r3, r1
    64c8:	d32d      	bcc.n	6526 <__aeabi_idiv+0x17a>
    64ca:	0a03      	lsrs	r3, r0, #8
    64cc:	428b      	cmp	r3, r1
    64ce:	d312      	bcc.n	64f6 <__aeabi_idiv+0x14a>
    64d0:	22fc      	movs	r2, #252	; 0xfc
    64d2:	0189      	lsls	r1, r1, #6
    64d4:	ba12      	rev	r2, r2
    64d6:	0a03      	lsrs	r3, r0, #8
    64d8:	428b      	cmp	r3, r1
    64da:	d30c      	bcc.n	64f6 <__aeabi_idiv+0x14a>
    64dc:	0189      	lsls	r1, r1, #6
    64de:	1192      	asrs	r2, r2, #6
    64e0:	428b      	cmp	r3, r1
    64e2:	d308      	bcc.n	64f6 <__aeabi_idiv+0x14a>
    64e4:	0189      	lsls	r1, r1, #6
    64e6:	1192      	asrs	r2, r2, #6
    64e8:	428b      	cmp	r3, r1
    64ea:	d304      	bcc.n	64f6 <__aeabi_idiv+0x14a>
    64ec:	0189      	lsls	r1, r1, #6
    64ee:	d03a      	beq.n	6566 <__aeabi_idiv+0x1ba>
    64f0:	1192      	asrs	r2, r2, #6
    64f2:	e000      	b.n	64f6 <__aeabi_idiv+0x14a>
    64f4:	0989      	lsrs	r1, r1, #6
    64f6:	09c3      	lsrs	r3, r0, #7
    64f8:	428b      	cmp	r3, r1
    64fa:	d301      	bcc.n	6500 <__aeabi_idiv+0x154>
    64fc:	01cb      	lsls	r3, r1, #7
    64fe:	1ac0      	subs	r0, r0, r3
    6500:	4152      	adcs	r2, r2
    6502:	0983      	lsrs	r3, r0, #6
    6504:	428b      	cmp	r3, r1
    6506:	d301      	bcc.n	650c <__aeabi_idiv+0x160>
    6508:	018b      	lsls	r3, r1, #6
    650a:	1ac0      	subs	r0, r0, r3
    650c:	4152      	adcs	r2, r2
    650e:	0943      	lsrs	r3, r0, #5
    6510:	428b      	cmp	r3, r1
    6512:	d301      	bcc.n	6518 <__aeabi_idiv+0x16c>
    6514:	014b      	lsls	r3, r1, #5
    6516:	1ac0      	subs	r0, r0, r3
    6518:	4152      	adcs	r2, r2
    651a:	0903      	lsrs	r3, r0, #4
    651c:	428b      	cmp	r3, r1
    651e:	d301      	bcc.n	6524 <__aeabi_idiv+0x178>
    6520:	010b      	lsls	r3, r1, #4
    6522:	1ac0      	subs	r0, r0, r3
    6524:	4152      	adcs	r2, r2
    6526:	08c3      	lsrs	r3, r0, #3
    6528:	428b      	cmp	r3, r1
    652a:	d301      	bcc.n	6530 <__aeabi_idiv+0x184>
    652c:	00cb      	lsls	r3, r1, #3
    652e:	1ac0      	subs	r0, r0, r3
    6530:	4152      	adcs	r2, r2
    6532:	0883      	lsrs	r3, r0, #2
    6534:	428b      	cmp	r3, r1
    6536:	d301      	bcc.n	653c <__aeabi_idiv+0x190>
    6538:	008b      	lsls	r3, r1, #2
    653a:	1ac0      	subs	r0, r0, r3
    653c:	4152      	adcs	r2, r2
    653e:	d2d9      	bcs.n	64f4 <__aeabi_idiv+0x148>
    6540:	0843      	lsrs	r3, r0, #1
    6542:	428b      	cmp	r3, r1
    6544:	d301      	bcc.n	654a <__aeabi_idiv+0x19e>
    6546:	004b      	lsls	r3, r1, #1
    6548:	1ac0      	subs	r0, r0, r3
    654a:	4152      	adcs	r2, r2
    654c:	1a41      	subs	r1, r0, r1
    654e:	d200      	bcs.n	6552 <__aeabi_idiv+0x1a6>
    6550:	4601      	mov	r1, r0
    6552:	4663      	mov	r3, ip
    6554:	4152      	adcs	r2, r2
    6556:	105b      	asrs	r3, r3, #1
    6558:	4610      	mov	r0, r2
    655a:	d301      	bcc.n	6560 <__aeabi_idiv+0x1b4>
    655c:	4240      	negs	r0, r0
    655e:	2b00      	cmp	r3, #0
    6560:	d500      	bpl.n	6564 <__aeabi_idiv+0x1b8>
    6562:	4249      	negs	r1, r1
    6564:	4770      	bx	lr
    6566:	4663      	mov	r3, ip
    6568:	105b      	asrs	r3, r3, #1
    656a:	d300      	bcc.n	656e <__aeabi_idiv+0x1c2>
    656c:	4240      	negs	r0, r0
    656e:	b501      	push	{r0, lr}
    6570:	2000      	movs	r0, #0
    6572:	f000 f80b 	bl	658c <__aeabi_idiv0>
    6576:	bd02      	pop	{r1, pc}

00006578 <__aeabi_idivmod>:
    6578:	2900      	cmp	r1, #0
    657a:	d0f8      	beq.n	656e <__aeabi_idiv+0x1c2>
    657c:	b503      	push	{r0, r1, lr}
    657e:	f7ff ff15 	bl	63ac <__aeabi_idiv>
    6582:	bc0e      	pop	{r1, r2, r3}
    6584:	4342      	muls	r2, r0
    6586:	1a89      	subs	r1, r1, r2
    6588:	4718      	bx	r3
    658a:	46c0      	nop			; (mov r8, r8)

0000658c <__aeabi_idiv0>:
    658c:	4770      	bx	lr
    658e:	46c0      	nop			; (mov r8, r8)

00006590 <__clzsi2>:
    6590:	211c      	movs	r1, #28
    6592:	2301      	movs	r3, #1
    6594:	041b      	lsls	r3, r3, #16
    6596:	4298      	cmp	r0, r3
    6598:	d301      	bcc.n	659e <__clzsi2+0xe>
    659a:	0c00      	lsrs	r0, r0, #16
    659c:	3910      	subs	r1, #16
    659e:	0a1b      	lsrs	r3, r3, #8
    65a0:	4298      	cmp	r0, r3
    65a2:	d301      	bcc.n	65a8 <__clzsi2+0x18>
    65a4:	0a00      	lsrs	r0, r0, #8
    65a6:	3908      	subs	r1, #8
    65a8:	091b      	lsrs	r3, r3, #4
    65aa:	4298      	cmp	r0, r3
    65ac:	d301      	bcc.n	65b2 <__clzsi2+0x22>
    65ae:	0900      	lsrs	r0, r0, #4
    65b0:	3904      	subs	r1, #4
    65b2:	a202      	add	r2, pc, #8	; (adr r2, 65bc <__clzsi2+0x2c>)
    65b4:	5c10      	ldrb	r0, [r2, r0]
    65b6:	1840      	adds	r0, r0, r1
    65b8:	4770      	bx	lr
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	02020304 	.word	0x02020304
    65c0:	01010101 	.word	0x01010101
	...

000065cc <__ctzsi2>:
    65cc:	4241      	negs	r1, r0
    65ce:	4008      	ands	r0, r1
    65d0:	211c      	movs	r1, #28
    65d2:	2301      	movs	r3, #1
    65d4:	041b      	lsls	r3, r3, #16
    65d6:	4298      	cmp	r0, r3
    65d8:	d301      	bcc.n	65de <__ctzsi2+0x12>
    65da:	0c00      	lsrs	r0, r0, #16
    65dc:	3910      	subs	r1, #16
    65de:	0a1b      	lsrs	r3, r3, #8
    65e0:	4298      	cmp	r0, r3
    65e2:	d301      	bcc.n	65e8 <__ctzsi2+0x1c>
    65e4:	0a00      	lsrs	r0, r0, #8
    65e6:	3908      	subs	r1, #8
    65e8:	091b      	lsrs	r3, r3, #4
    65ea:	4298      	cmp	r0, r3
    65ec:	d301      	bcc.n	65f2 <__ctzsi2+0x26>
    65ee:	0900      	lsrs	r0, r0, #4
    65f0:	3904      	subs	r1, #4
    65f2:	a202      	add	r2, pc, #8	; (adr r2, 65fc <__ctzsi2+0x30>)
    65f4:	5c10      	ldrb	r0, [r2, r0]
    65f6:	1a40      	subs	r0, r0, r1
    65f8:	4770      	bx	lr
    65fa:	46c0      	nop			; (mov r8, r8)
    65fc:	1d1d1c1b 	.word	0x1d1d1c1b
    6600:	1e1e1e1e 	.word	0x1e1e1e1e
    6604:	1f1f1f1f 	.word	0x1f1f1f1f
    6608:	1f1f1f1f 	.word	0x1f1f1f1f

0000660c <__aeabi_uldivmod>:
    660c:	2b00      	cmp	r3, #0
    660e:	d111      	bne.n	6634 <__aeabi_uldivmod+0x28>
    6610:	2a00      	cmp	r2, #0
    6612:	d10f      	bne.n	6634 <__aeabi_uldivmod+0x28>
    6614:	2900      	cmp	r1, #0
    6616:	d100      	bne.n	661a <__aeabi_uldivmod+0xe>
    6618:	2800      	cmp	r0, #0
    661a:	d002      	beq.n	6622 <__aeabi_uldivmod+0x16>
    661c:	2100      	movs	r1, #0
    661e:	43c9      	mvns	r1, r1
    6620:	1c08      	adds	r0, r1, #0
    6622:	b407      	push	{r0, r1, r2}
    6624:	4802      	ldr	r0, [pc, #8]	; (6630 <__aeabi_uldivmod+0x24>)
    6626:	a102      	add	r1, pc, #8	; (adr r1, 6630 <__aeabi_uldivmod+0x24>)
    6628:	1840      	adds	r0, r0, r1
    662a:	9002      	str	r0, [sp, #8]
    662c:	bd03      	pop	{r0, r1, pc}
    662e:	46c0      	nop			; (mov r8, r8)
    6630:	ffffff5d 	.word	0xffffff5d
    6634:	b403      	push	{r0, r1}
    6636:	4668      	mov	r0, sp
    6638:	b501      	push	{r0, lr}
    663a:	9802      	ldr	r0, [sp, #8]
    663c:	f000 f864 	bl	6708 <__gnu_uldivmod_helper>
    6640:	9b01      	ldr	r3, [sp, #4]
    6642:	469e      	mov	lr, r3
    6644:	b002      	add	sp, #8
    6646:	bc0c      	pop	{r2, r3}
    6648:	4770      	bx	lr
    664a:	46c0      	nop			; (mov r8, r8)

0000664c <__aeabi_lmul>:
    664c:	b5f0      	push	{r4, r5, r6, r7, lr}
    664e:	464f      	mov	r7, r9
    6650:	4646      	mov	r6, r8
    6652:	0405      	lsls	r5, r0, #16
    6654:	0c2d      	lsrs	r5, r5, #16
    6656:	1c2c      	adds	r4, r5, #0
    6658:	b4c0      	push	{r6, r7}
    665a:	0417      	lsls	r7, r2, #16
    665c:	0c16      	lsrs	r6, r2, #16
    665e:	0c3f      	lsrs	r7, r7, #16
    6660:	4699      	mov	r9, r3
    6662:	0c03      	lsrs	r3, r0, #16
    6664:	437c      	muls	r4, r7
    6666:	4375      	muls	r5, r6
    6668:	435f      	muls	r7, r3
    666a:	4373      	muls	r3, r6
    666c:	197d      	adds	r5, r7, r5
    666e:	0c26      	lsrs	r6, r4, #16
    6670:	19ad      	adds	r5, r5, r6
    6672:	469c      	mov	ip, r3
    6674:	42af      	cmp	r7, r5
    6676:	d903      	bls.n	6680 <__aeabi_lmul+0x34>
    6678:	2380      	movs	r3, #128	; 0x80
    667a:	025b      	lsls	r3, r3, #9
    667c:	4698      	mov	r8, r3
    667e:	44c4      	add	ip, r8
    6680:	464b      	mov	r3, r9
    6682:	4351      	muls	r1, r2
    6684:	4343      	muls	r3, r0
    6686:	0424      	lsls	r4, r4, #16
    6688:	0c2e      	lsrs	r6, r5, #16
    668a:	0c24      	lsrs	r4, r4, #16
    668c:	042d      	lsls	r5, r5, #16
    668e:	4466      	add	r6, ip
    6690:	192c      	adds	r4, r5, r4
    6692:	1859      	adds	r1, r3, r1
    6694:	1989      	adds	r1, r1, r6
    6696:	1c20      	adds	r0, r4, #0
    6698:	bc0c      	pop	{r2, r3}
    669a:	4690      	mov	r8, r2
    669c:	4699      	mov	r9, r3
    669e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000066a0 <__aeabi_f2uiz>:
    66a0:	219e      	movs	r1, #158	; 0x9e
    66a2:	b510      	push	{r4, lr}
    66a4:	05c9      	lsls	r1, r1, #23
    66a6:	1c04      	adds	r4, r0, #0
    66a8:	f001 fe0e 	bl	82c8 <__aeabi_fcmpge>
    66ac:	2800      	cmp	r0, #0
    66ae:	d103      	bne.n	66b8 <__aeabi_f2uiz+0x18>
    66b0:	1c20      	adds	r0, r4, #0
    66b2:	f000 fda7 	bl	7204 <__aeabi_f2iz>
    66b6:	bd10      	pop	{r4, pc}
    66b8:	219e      	movs	r1, #158	; 0x9e
    66ba:	1c20      	adds	r0, r4, #0
    66bc:	05c9      	lsls	r1, r1, #23
    66be:	f000 fc23 	bl	6f08 <__aeabi_fsub>
    66c2:	f000 fd9f 	bl	7204 <__aeabi_f2iz>
    66c6:	2380      	movs	r3, #128	; 0x80
    66c8:	061b      	lsls	r3, r3, #24
    66ca:	469c      	mov	ip, r3
    66cc:	4460      	add	r0, ip
    66ce:	e7f2      	b.n	66b6 <__aeabi_f2uiz+0x16>

000066d0 <__gnu_ldivmod_helper>:
    66d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66d2:	b083      	sub	sp, #12
    66d4:	1c16      	adds	r6, r2, #0
    66d6:	1c1f      	adds	r7, r3, #0
    66d8:	9000      	str	r0, [sp, #0]
    66da:	9101      	str	r1, [sp, #4]
    66dc:	f001 fdfe 	bl	82dc <__divdi3>
    66e0:	1c04      	adds	r4, r0, #0
    66e2:	1c0d      	adds	r5, r1, #0
    66e4:	1c22      	adds	r2, r4, #0
    66e6:	1c2b      	adds	r3, r5, #0
    66e8:	1c30      	adds	r0, r6, #0
    66ea:	1c39      	adds	r1, r7, #0
    66ec:	f7ff ffae 	bl	664c <__aeabi_lmul>
    66f0:	9a00      	ldr	r2, [sp, #0]
    66f2:	9b01      	ldr	r3, [sp, #4]
    66f4:	1a12      	subs	r2, r2, r0
    66f6:	418b      	sbcs	r3, r1
    66f8:	9908      	ldr	r1, [sp, #32]
    66fa:	1c20      	adds	r0, r4, #0
    66fc:	600a      	str	r2, [r1, #0]
    66fe:	604b      	str	r3, [r1, #4]
    6700:	1c29      	adds	r1, r5, #0
    6702:	b003      	add	sp, #12
    6704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6706:	46c0      	nop			; (mov r8, r8)

00006708 <__gnu_uldivmod_helper>:
    6708:	b5f0      	push	{r4, r5, r6, r7, lr}
    670a:	1c14      	adds	r4, r2, #0
    670c:	b083      	sub	sp, #12
    670e:	1c1d      	adds	r5, r3, #0
    6710:	9000      	str	r0, [sp, #0]
    6712:	9101      	str	r1, [sp, #4]
    6714:	f001 feda 	bl	84cc <__udivdi3>
    6718:	1c22      	adds	r2, r4, #0
    671a:	1c2b      	adds	r3, r5, #0
    671c:	1c06      	adds	r6, r0, #0
    671e:	1c0f      	adds	r7, r1, #0
    6720:	f7ff ff94 	bl	664c <__aeabi_lmul>
    6724:	9a00      	ldr	r2, [sp, #0]
    6726:	9b01      	ldr	r3, [sp, #4]
    6728:	1a12      	subs	r2, r2, r0
    672a:	418b      	sbcs	r3, r1
    672c:	9908      	ldr	r1, [sp, #32]
    672e:	1c30      	adds	r0, r6, #0
    6730:	600a      	str	r2, [r1, #0]
    6732:	604b      	str	r3, [r1, #4]
    6734:	1c39      	adds	r1, r7, #0
    6736:	b003      	add	sp, #12
    6738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    673a:	46c0      	nop			; (mov r8, r8)

0000673c <__aeabi_fadd>:
    673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    673e:	004a      	lsls	r2, r1, #1
    6740:	0243      	lsls	r3, r0, #9
    6742:	0044      	lsls	r4, r0, #1
    6744:	024e      	lsls	r6, r1, #9
    6746:	0fc5      	lsrs	r5, r0, #31
    6748:	0e24      	lsrs	r4, r4, #24
    674a:	1c28      	adds	r0, r5, #0
    674c:	099b      	lsrs	r3, r3, #6
    674e:	0e12      	lsrs	r2, r2, #24
    6750:	0fc9      	lsrs	r1, r1, #31
    6752:	09b7      	lsrs	r7, r6, #6
    6754:	428d      	cmp	r5, r1
    6756:	d040      	beq.n	67da <__aeabi_fadd+0x9e>
    6758:	1aa0      	subs	r0, r4, r2
    675a:	2800      	cmp	r0, #0
    675c:	dc00      	bgt.n	6760 <__aeabi_fadd+0x24>
    675e:	e084      	b.n	686a <__aeabi_fadd+0x12e>
    6760:	2a00      	cmp	r2, #0
    6762:	d11c      	bne.n	679e <__aeabi_fadd+0x62>
    6764:	2f00      	cmp	r7, #0
    6766:	d15c      	bne.n	6822 <__aeabi_fadd+0xe6>
    6768:	075a      	lsls	r2, r3, #29
    676a:	d004      	beq.n	6776 <__aeabi_fadd+0x3a>
    676c:	220f      	movs	r2, #15
    676e:	401a      	ands	r2, r3
    6770:	2a04      	cmp	r2, #4
    6772:	d000      	beq.n	6776 <__aeabi_fadd+0x3a>
    6774:	3304      	adds	r3, #4
    6776:	2280      	movs	r2, #128	; 0x80
    6778:	04d2      	lsls	r2, r2, #19
    677a:	401a      	ands	r2, r3
    677c:	1c28      	adds	r0, r5, #0
    677e:	2a00      	cmp	r2, #0
    6780:	d024      	beq.n	67cc <__aeabi_fadd+0x90>
    6782:	3401      	adds	r4, #1
    6784:	2cff      	cmp	r4, #255	; 0xff
    6786:	d100      	bne.n	678a <__aeabi_fadd+0x4e>
    6788:	e07b      	b.n	6882 <__aeabi_fadd+0x146>
    678a:	019b      	lsls	r3, r3, #6
    678c:	0a5b      	lsrs	r3, r3, #9
    678e:	b2e4      	uxtb	r4, r4
    6790:	025b      	lsls	r3, r3, #9
    6792:	05e4      	lsls	r4, r4, #23
    6794:	0a5b      	lsrs	r3, r3, #9
    6796:	4323      	orrs	r3, r4
    6798:	07c0      	lsls	r0, r0, #31
    679a:	4318      	orrs	r0, r3
    679c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    679e:	2cff      	cmp	r4, #255	; 0xff
    67a0:	d0e2      	beq.n	6768 <__aeabi_fadd+0x2c>
    67a2:	2280      	movs	r2, #128	; 0x80
    67a4:	04d2      	lsls	r2, r2, #19
    67a6:	4317      	orrs	r7, r2
    67a8:	2601      	movs	r6, #1
    67aa:	281b      	cmp	r0, #27
    67ac:	dc08      	bgt.n	67c0 <__aeabi_fadd+0x84>
    67ae:	1c39      	adds	r1, r7, #0
    67b0:	2220      	movs	r2, #32
    67b2:	1c3e      	adds	r6, r7, #0
    67b4:	40c1      	lsrs	r1, r0
    67b6:	1a10      	subs	r0, r2, r0
    67b8:	4086      	lsls	r6, r0
    67ba:	1e77      	subs	r7, r6, #1
    67bc:	41be      	sbcs	r6, r7
    67be:	430e      	orrs	r6, r1
    67c0:	1b9b      	subs	r3, r3, r6
    67c2:	015a      	lsls	r2, r3, #5
    67c4:	d433      	bmi.n	682e <__aeabi_fadd+0xf2>
    67c6:	1c28      	adds	r0, r5, #0
    67c8:	075a      	lsls	r2, r3, #29
    67ca:	d1cf      	bne.n	676c <__aeabi_fadd+0x30>
    67cc:	08db      	lsrs	r3, r3, #3
    67ce:	2cff      	cmp	r4, #255	; 0xff
    67d0:	d01e      	beq.n	6810 <__aeabi_fadd+0xd4>
    67d2:	025b      	lsls	r3, r3, #9
    67d4:	0a5b      	lsrs	r3, r3, #9
    67d6:	b2e4      	uxtb	r4, r4
    67d8:	e7da      	b.n	6790 <__aeabi_fadd+0x54>
    67da:	1aa1      	subs	r1, r4, r2
    67dc:	2900      	cmp	r1, #0
    67de:	dd57      	ble.n	6890 <__aeabi_fadd+0x154>
    67e0:	2a00      	cmp	r2, #0
    67e2:	d03a      	beq.n	685a <__aeabi_fadd+0x11e>
    67e4:	2cff      	cmp	r4, #255	; 0xff
    67e6:	d0bf      	beq.n	6768 <__aeabi_fadd+0x2c>
    67e8:	2280      	movs	r2, #128	; 0x80
    67ea:	04d2      	lsls	r2, r2, #19
    67ec:	4317      	orrs	r7, r2
    67ee:	2601      	movs	r6, #1
    67f0:	291b      	cmp	r1, #27
    67f2:	dd72      	ble.n	68da <__aeabi_fadd+0x19e>
    67f4:	199b      	adds	r3, r3, r6
    67f6:	015a      	lsls	r2, r3, #5
    67f8:	d5e5      	bpl.n	67c6 <__aeabi_fadd+0x8a>
    67fa:	3401      	adds	r4, #1
    67fc:	2cff      	cmp	r4, #255	; 0xff
    67fe:	d100      	bne.n	6802 <__aeabi_fadd+0xc6>
    6800:	e087      	b.n	6912 <__aeabi_fadd+0x1d6>
    6802:	2101      	movs	r1, #1
    6804:	4a8a      	ldr	r2, [pc, #552]	; (6a30 <__aeabi_fadd+0x2f4>)
    6806:	4019      	ands	r1, r3
    6808:	4013      	ands	r3, r2
    680a:	085b      	lsrs	r3, r3, #1
    680c:	430b      	orrs	r3, r1
    680e:	e7ab      	b.n	6768 <__aeabi_fadd+0x2c>
    6810:	2b00      	cmp	r3, #0
    6812:	d036      	beq.n	6882 <__aeabi_fadd+0x146>
    6814:	2280      	movs	r2, #128	; 0x80
    6816:	03d2      	lsls	r2, r2, #15
    6818:	4313      	orrs	r3, r2
    681a:	025b      	lsls	r3, r3, #9
    681c:	0a5b      	lsrs	r3, r3, #9
    681e:	24ff      	movs	r4, #255	; 0xff
    6820:	e7b6      	b.n	6790 <__aeabi_fadd+0x54>
    6822:	3801      	subs	r0, #1
    6824:	2800      	cmp	r0, #0
    6826:	d13f      	bne.n	68a8 <__aeabi_fadd+0x16c>
    6828:	1bdb      	subs	r3, r3, r7
    682a:	015a      	lsls	r2, r3, #5
    682c:	d5cb      	bpl.n	67c6 <__aeabi_fadd+0x8a>
    682e:	019b      	lsls	r3, r3, #6
    6830:	099e      	lsrs	r6, r3, #6
    6832:	1c30      	adds	r0, r6, #0
    6834:	f7ff feac 	bl	6590 <__clzsi2>
    6838:	3805      	subs	r0, #5
    683a:	4086      	lsls	r6, r0
    683c:	4284      	cmp	r4, r0
    683e:	dc23      	bgt.n	6888 <__aeabi_fadd+0x14c>
    6840:	1b00      	subs	r0, r0, r4
    6842:	241f      	movs	r4, #31
    6844:	1c32      	adds	r2, r6, #0
    6846:	1c43      	adds	r3, r0, #1
    6848:	1a20      	subs	r0, r4, r0
    684a:	40da      	lsrs	r2, r3
    684c:	4086      	lsls	r6, r0
    684e:	1c13      	adds	r3, r2, #0
    6850:	1e74      	subs	r4, r6, #1
    6852:	41a6      	sbcs	r6, r4
    6854:	2400      	movs	r4, #0
    6856:	4333      	orrs	r3, r6
    6858:	e786      	b.n	6768 <__aeabi_fadd+0x2c>
    685a:	2f00      	cmp	r7, #0
    685c:	d100      	bne.n	6860 <__aeabi_fadd+0x124>
    685e:	e783      	b.n	6768 <__aeabi_fadd+0x2c>
    6860:	3901      	subs	r1, #1
    6862:	2900      	cmp	r1, #0
    6864:	d150      	bne.n	6908 <__aeabi_fadd+0x1cc>
    6866:	19db      	adds	r3, r3, r7
    6868:	e7c5      	b.n	67f6 <__aeabi_fadd+0xba>
    686a:	2800      	cmp	r0, #0
    686c:	d120      	bne.n	68b0 <__aeabi_fadd+0x174>
    686e:	1c62      	adds	r2, r4, #1
    6870:	b2d2      	uxtb	r2, r2
    6872:	2a01      	cmp	r2, #1
    6874:	dd5e      	ble.n	6934 <__aeabi_fadd+0x1f8>
    6876:	1bde      	subs	r6, r3, r7
    6878:	0172      	lsls	r2, r6, #5
    687a:	d528      	bpl.n	68ce <__aeabi_fadd+0x192>
    687c:	1afe      	subs	r6, r7, r3
    687e:	1c0d      	adds	r5, r1, #0
    6880:	e7d7      	b.n	6832 <__aeabi_fadd+0xf6>
    6882:	24ff      	movs	r4, #255	; 0xff
    6884:	2300      	movs	r3, #0
    6886:	e783      	b.n	6790 <__aeabi_fadd+0x54>
    6888:	4b69      	ldr	r3, [pc, #420]	; (6a30 <__aeabi_fadd+0x2f4>)
    688a:	1a24      	subs	r4, r4, r0
    688c:	4033      	ands	r3, r6
    688e:	e76b      	b.n	6768 <__aeabi_fadd+0x2c>
    6890:	2900      	cmp	r1, #0
    6892:	d158      	bne.n	6946 <__aeabi_fadd+0x20a>
    6894:	1c62      	adds	r2, r4, #1
    6896:	b2d1      	uxtb	r1, r2
    6898:	2901      	cmp	r1, #1
    689a:	dd3c      	ble.n	6916 <__aeabi_fadd+0x1da>
    689c:	2aff      	cmp	r2, #255	; 0xff
    689e:	d037      	beq.n	6910 <__aeabi_fadd+0x1d4>
    68a0:	18fb      	adds	r3, r7, r3
    68a2:	085b      	lsrs	r3, r3, #1
    68a4:	1c14      	adds	r4, r2, #0
    68a6:	e75f      	b.n	6768 <__aeabi_fadd+0x2c>
    68a8:	2cff      	cmp	r4, #255	; 0xff
    68aa:	d000      	beq.n	68ae <__aeabi_fadd+0x172>
    68ac:	e77c      	b.n	67a8 <__aeabi_fadd+0x6c>
    68ae:	e75b      	b.n	6768 <__aeabi_fadd+0x2c>
    68b0:	2c00      	cmp	r4, #0
    68b2:	d01e      	beq.n	68f2 <__aeabi_fadd+0x1b6>
    68b4:	2aff      	cmp	r2, #255	; 0xff
    68b6:	d023      	beq.n	6900 <__aeabi_fadd+0x1c4>
    68b8:	2480      	movs	r4, #128	; 0x80
    68ba:	04e4      	lsls	r4, r4, #19
    68bc:	4240      	negs	r0, r0
    68be:	4323      	orrs	r3, r4
    68c0:	281b      	cmp	r0, #27
    68c2:	dd5b      	ble.n	697c <__aeabi_fadd+0x240>
    68c4:	2301      	movs	r3, #1
    68c6:	1afb      	subs	r3, r7, r3
    68c8:	1c14      	adds	r4, r2, #0
    68ca:	1c0d      	adds	r5, r1, #0
    68cc:	e7ad      	b.n	682a <__aeabi_fadd+0xee>
    68ce:	2e00      	cmp	r6, #0
    68d0:	d1af      	bne.n	6832 <__aeabi_fadd+0xf6>
    68d2:	2300      	movs	r3, #0
    68d4:	2000      	movs	r0, #0
    68d6:	2400      	movs	r4, #0
    68d8:	e778      	b.n	67cc <__aeabi_fadd+0x90>
    68da:	1c3a      	adds	r2, r7, #0
    68dc:	40ca      	lsrs	r2, r1
    68de:	4694      	mov	ip, r2
    68e0:	2220      	movs	r2, #32
    68e2:	1c3e      	adds	r6, r7, #0
    68e4:	1a51      	subs	r1, r2, r1
    68e6:	408e      	lsls	r6, r1
    68e8:	4662      	mov	r2, ip
    68ea:	1e77      	subs	r7, r6, #1
    68ec:	41be      	sbcs	r6, r7
    68ee:	4316      	orrs	r6, r2
    68f0:	e780      	b.n	67f4 <__aeabi_fadd+0xb8>
    68f2:	2b00      	cmp	r3, #0
    68f4:	d03e      	beq.n	6974 <__aeabi_fadd+0x238>
    68f6:	43c0      	mvns	r0, r0
    68f8:	2800      	cmp	r0, #0
    68fa:	d0e4      	beq.n	68c6 <__aeabi_fadd+0x18a>
    68fc:	2aff      	cmp	r2, #255	; 0xff
    68fe:	d1df      	bne.n	68c0 <__aeabi_fadd+0x184>
    6900:	1c3b      	adds	r3, r7, #0
    6902:	24ff      	movs	r4, #255	; 0xff
    6904:	1c0d      	adds	r5, r1, #0
    6906:	e72f      	b.n	6768 <__aeabi_fadd+0x2c>
    6908:	2cff      	cmp	r4, #255	; 0xff
    690a:	d000      	beq.n	690e <__aeabi_fadd+0x1d2>
    690c:	e76f      	b.n	67ee <__aeabi_fadd+0xb2>
    690e:	e72b      	b.n	6768 <__aeabi_fadd+0x2c>
    6910:	24ff      	movs	r4, #255	; 0xff
    6912:	2300      	movs	r3, #0
    6914:	e75a      	b.n	67cc <__aeabi_fadd+0x90>
    6916:	2c00      	cmp	r4, #0
    6918:	d15a      	bne.n	69d0 <__aeabi_fadd+0x294>
    691a:	2b00      	cmp	r3, #0
    691c:	d07f      	beq.n	6a1e <__aeabi_fadd+0x2e2>
    691e:	2f00      	cmp	r7, #0
    6920:	d100      	bne.n	6924 <__aeabi_fadd+0x1e8>
    6922:	e721      	b.n	6768 <__aeabi_fadd+0x2c>
    6924:	19db      	adds	r3, r3, r7
    6926:	015a      	lsls	r2, r3, #5
    6928:	d400      	bmi.n	692c <__aeabi_fadd+0x1f0>
    692a:	e74c      	b.n	67c6 <__aeabi_fadd+0x8a>
    692c:	4a40      	ldr	r2, [pc, #256]	; (6a30 <__aeabi_fadd+0x2f4>)
    692e:	3401      	adds	r4, #1
    6930:	4013      	ands	r3, r2
    6932:	e719      	b.n	6768 <__aeabi_fadd+0x2c>
    6934:	2c00      	cmp	r4, #0
    6936:	d115      	bne.n	6964 <__aeabi_fadd+0x228>
    6938:	2b00      	cmp	r3, #0
    693a:	d12f      	bne.n	699c <__aeabi_fadd+0x260>
    693c:	2f00      	cmp	r7, #0
    693e:	d05d      	beq.n	69fc <__aeabi_fadd+0x2c0>
    6940:	1c3b      	adds	r3, r7, #0
    6942:	1c0d      	adds	r5, r1, #0
    6944:	e710      	b.n	6768 <__aeabi_fadd+0x2c>
    6946:	2c00      	cmp	r4, #0
    6948:	d121      	bne.n	698e <__aeabi_fadd+0x252>
    694a:	2b00      	cmp	r3, #0
    694c:	d053      	beq.n	69f6 <__aeabi_fadd+0x2ba>
    694e:	43c9      	mvns	r1, r1
    6950:	2900      	cmp	r1, #0
    6952:	d004      	beq.n	695e <__aeabi_fadd+0x222>
    6954:	2aff      	cmp	r2, #255	; 0xff
    6956:	d04b      	beq.n	69f0 <__aeabi_fadd+0x2b4>
    6958:	291b      	cmp	r1, #27
    695a:	dd57      	ble.n	6a0c <__aeabi_fadd+0x2d0>
    695c:	2301      	movs	r3, #1
    695e:	19db      	adds	r3, r3, r7
    6960:	1c14      	adds	r4, r2, #0
    6962:	e748      	b.n	67f6 <__aeabi_fadd+0xba>
    6964:	2b00      	cmp	r3, #0
    6966:	d122      	bne.n	69ae <__aeabi_fadd+0x272>
    6968:	2f00      	cmp	r7, #0
    696a:	d04a      	beq.n	6a02 <__aeabi_fadd+0x2c6>
    696c:	1c3b      	adds	r3, r7, #0
    696e:	1c0d      	adds	r5, r1, #0
    6970:	24ff      	movs	r4, #255	; 0xff
    6972:	e6f9      	b.n	6768 <__aeabi_fadd+0x2c>
    6974:	1c3b      	adds	r3, r7, #0
    6976:	1c14      	adds	r4, r2, #0
    6978:	1c0d      	adds	r5, r1, #0
    697a:	e6f5      	b.n	6768 <__aeabi_fadd+0x2c>
    697c:	1c1d      	adds	r5, r3, #0
    697e:	2420      	movs	r4, #32
    6980:	40c5      	lsrs	r5, r0
    6982:	1a20      	subs	r0, r4, r0
    6984:	4083      	lsls	r3, r0
    6986:	1e58      	subs	r0, r3, #1
    6988:	4183      	sbcs	r3, r0
    698a:	432b      	orrs	r3, r5
    698c:	e79b      	b.n	68c6 <__aeabi_fadd+0x18a>
    698e:	2aff      	cmp	r2, #255	; 0xff
    6990:	d02e      	beq.n	69f0 <__aeabi_fadd+0x2b4>
    6992:	2480      	movs	r4, #128	; 0x80
    6994:	04e4      	lsls	r4, r4, #19
    6996:	4249      	negs	r1, r1
    6998:	4323      	orrs	r3, r4
    699a:	e7dd      	b.n	6958 <__aeabi_fadd+0x21c>
    699c:	2f00      	cmp	r7, #0
    699e:	d100      	bne.n	69a2 <__aeabi_fadd+0x266>
    69a0:	e6e2      	b.n	6768 <__aeabi_fadd+0x2c>
    69a2:	1bda      	subs	r2, r3, r7
    69a4:	0150      	lsls	r0, r2, #5
    69a6:	d53c      	bpl.n	6a22 <__aeabi_fadd+0x2e6>
    69a8:	1afb      	subs	r3, r7, r3
    69aa:	1c0d      	adds	r5, r1, #0
    69ac:	e6dc      	b.n	6768 <__aeabi_fadd+0x2c>
    69ae:	24ff      	movs	r4, #255	; 0xff
    69b0:	2f00      	cmp	r7, #0
    69b2:	d100      	bne.n	69b6 <__aeabi_fadd+0x27a>
    69b4:	e6d8      	b.n	6768 <__aeabi_fadd+0x2c>
    69b6:	2280      	movs	r2, #128	; 0x80
    69b8:	08db      	lsrs	r3, r3, #3
    69ba:	03d2      	lsls	r2, r2, #15
    69bc:	4213      	tst	r3, r2
    69be:	d004      	beq.n	69ca <__aeabi_fadd+0x28e>
    69c0:	08fe      	lsrs	r6, r7, #3
    69c2:	4216      	tst	r6, r2
    69c4:	d101      	bne.n	69ca <__aeabi_fadd+0x28e>
    69c6:	1c33      	adds	r3, r6, #0
    69c8:	1c0d      	adds	r5, r1, #0
    69ca:	00db      	lsls	r3, r3, #3
    69cc:	24ff      	movs	r4, #255	; 0xff
    69ce:	e6cb      	b.n	6768 <__aeabi_fadd+0x2c>
    69d0:	2b00      	cmp	r3, #0
    69d2:	d00d      	beq.n	69f0 <__aeabi_fadd+0x2b4>
    69d4:	24ff      	movs	r4, #255	; 0xff
    69d6:	2f00      	cmp	r7, #0
    69d8:	d100      	bne.n	69dc <__aeabi_fadd+0x2a0>
    69da:	e6c5      	b.n	6768 <__aeabi_fadd+0x2c>
    69dc:	2280      	movs	r2, #128	; 0x80
    69de:	08db      	lsrs	r3, r3, #3
    69e0:	03d2      	lsls	r2, r2, #15
    69e2:	4213      	tst	r3, r2
    69e4:	d0f1      	beq.n	69ca <__aeabi_fadd+0x28e>
    69e6:	08fe      	lsrs	r6, r7, #3
    69e8:	4216      	tst	r6, r2
    69ea:	d1ee      	bne.n	69ca <__aeabi_fadd+0x28e>
    69ec:	1c33      	adds	r3, r6, #0
    69ee:	e7ec      	b.n	69ca <__aeabi_fadd+0x28e>
    69f0:	1c3b      	adds	r3, r7, #0
    69f2:	24ff      	movs	r4, #255	; 0xff
    69f4:	e6b8      	b.n	6768 <__aeabi_fadd+0x2c>
    69f6:	1c3b      	adds	r3, r7, #0
    69f8:	1c14      	adds	r4, r2, #0
    69fa:	e6b5      	b.n	6768 <__aeabi_fadd+0x2c>
    69fc:	1c23      	adds	r3, r4, #0
    69fe:	2000      	movs	r0, #0
    6a00:	e6e4      	b.n	67cc <__aeabi_fadd+0x90>
    6a02:	2380      	movs	r3, #128	; 0x80
    6a04:	2000      	movs	r0, #0
    6a06:	049b      	lsls	r3, r3, #18
    6a08:	24ff      	movs	r4, #255	; 0xff
    6a0a:	e6df      	b.n	67cc <__aeabi_fadd+0x90>
    6a0c:	1c1e      	adds	r6, r3, #0
    6a0e:	2420      	movs	r4, #32
    6a10:	40ce      	lsrs	r6, r1
    6a12:	1a61      	subs	r1, r4, r1
    6a14:	408b      	lsls	r3, r1
    6a16:	1e59      	subs	r1, r3, #1
    6a18:	418b      	sbcs	r3, r1
    6a1a:	4333      	orrs	r3, r6
    6a1c:	e79f      	b.n	695e <__aeabi_fadd+0x222>
    6a1e:	1c3b      	adds	r3, r7, #0
    6a20:	e6a2      	b.n	6768 <__aeabi_fadd+0x2c>
    6a22:	1e13      	subs	r3, r2, #0
    6a24:	d000      	beq.n	6a28 <__aeabi_fadd+0x2ec>
    6a26:	e6ce      	b.n	67c6 <__aeabi_fadd+0x8a>
    6a28:	2300      	movs	r3, #0
    6a2a:	2000      	movs	r0, #0
    6a2c:	e6ce      	b.n	67cc <__aeabi_fadd+0x90>
    6a2e:	46c0      	nop			; (mov r8, r8)
    6a30:	fbffffff 	.word	0xfbffffff

00006a34 <__aeabi_fdiv>:
    6a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a36:	4656      	mov	r6, sl
    6a38:	464d      	mov	r5, r9
    6a3a:	465f      	mov	r7, fp
    6a3c:	4644      	mov	r4, r8
    6a3e:	b4f0      	push	{r4, r5, r6, r7}
    6a40:	0243      	lsls	r3, r0, #9
    6a42:	0045      	lsls	r5, r0, #1
    6a44:	0fc7      	lsrs	r7, r0, #31
    6a46:	b083      	sub	sp, #12
    6a48:	468a      	mov	sl, r1
    6a4a:	0a5c      	lsrs	r4, r3, #9
    6a4c:	0e2e      	lsrs	r6, r5, #24
    6a4e:	46b9      	mov	r9, r7
    6a50:	d041      	beq.n	6ad6 <__aeabi_fdiv+0xa2>
    6a52:	2eff      	cmp	r6, #255	; 0xff
    6a54:	d026      	beq.n	6aa4 <__aeabi_fdiv+0x70>
    6a56:	2380      	movs	r3, #128	; 0x80
    6a58:	041b      	lsls	r3, r3, #16
    6a5a:	4323      	orrs	r3, r4
    6a5c:	00dc      	lsls	r4, r3, #3
    6a5e:	2300      	movs	r3, #0
    6a60:	4698      	mov	r8, r3
    6a62:	469b      	mov	fp, r3
    6a64:	3e7f      	subs	r6, #127	; 0x7f
    6a66:	4653      	mov	r3, sl
    6a68:	025b      	lsls	r3, r3, #9
    6a6a:	0a5d      	lsrs	r5, r3, #9
    6a6c:	4653      	mov	r3, sl
    6a6e:	005a      	lsls	r2, r3, #1
    6a70:	0fdb      	lsrs	r3, r3, #31
    6a72:	0e12      	lsrs	r2, r2, #24
    6a74:	469a      	mov	sl, r3
    6a76:	d039      	beq.n	6aec <__aeabi_fdiv+0xb8>
    6a78:	2aff      	cmp	r2, #255	; 0xff
    6a7a:	d033      	beq.n	6ae4 <__aeabi_fdiv+0xb0>
    6a7c:	2380      	movs	r3, #128	; 0x80
    6a7e:	041b      	lsls	r3, r3, #16
    6a80:	432b      	orrs	r3, r5
    6a82:	00dd      	lsls	r5, r3, #3
    6a84:	2300      	movs	r3, #0
    6a86:	3a7f      	subs	r2, #127	; 0x7f
    6a88:	4651      	mov	r1, sl
    6a8a:	1ab2      	subs	r2, r6, r2
    6a8c:	4646      	mov	r6, r8
    6a8e:	4079      	eors	r1, r7
    6a90:	1c08      	adds	r0, r1, #0
    6a92:	9201      	str	r2, [sp, #4]
    6a94:	431e      	orrs	r6, r3
    6a96:	2e0f      	cmp	r6, #15
    6a98:	d900      	bls.n	6a9c <__aeabi_fdiv+0x68>
    6a9a:	e076      	b.n	6b8a <__aeabi_fdiv+0x156>
    6a9c:	4a7e      	ldr	r2, [pc, #504]	; (6c98 <__aeabi_fdiv+0x264>)
    6a9e:	00b6      	lsls	r6, r6, #2
    6aa0:	5996      	ldr	r6, [r2, r6]
    6aa2:	46b7      	mov	pc, r6
    6aa4:	2c00      	cmp	r4, #0
    6aa6:	d130      	bne.n	6b0a <__aeabi_fdiv+0xd6>
    6aa8:	2308      	movs	r3, #8
    6aaa:	4698      	mov	r8, r3
    6aac:	3b06      	subs	r3, #6
    6aae:	469b      	mov	fp, r3
    6ab0:	e7d9      	b.n	6a66 <__aeabi_fdiv+0x32>
    6ab2:	2380      	movs	r3, #128	; 0x80
    6ab4:	2100      	movs	r1, #0
    6ab6:	03db      	lsls	r3, r3, #15
    6ab8:	24ff      	movs	r4, #255	; 0xff
    6aba:	025b      	lsls	r3, r3, #9
    6abc:	05e4      	lsls	r4, r4, #23
    6abe:	0a5b      	lsrs	r3, r3, #9
    6ac0:	07c9      	lsls	r1, r1, #31
    6ac2:	4323      	orrs	r3, r4
    6ac4:	430b      	orrs	r3, r1
    6ac6:	1c18      	adds	r0, r3, #0
    6ac8:	b003      	add	sp, #12
    6aca:	bc3c      	pop	{r2, r3, r4, r5}
    6acc:	4690      	mov	r8, r2
    6ace:	4699      	mov	r9, r3
    6ad0:	46a2      	mov	sl, r4
    6ad2:	46ab      	mov	fp, r5
    6ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ad6:	2c00      	cmp	r4, #0
    6ad8:	d128      	bne.n	6b2c <__aeabi_fdiv+0xf8>
    6ada:	2304      	movs	r3, #4
    6adc:	4698      	mov	r8, r3
    6ade:	3b03      	subs	r3, #3
    6ae0:	469b      	mov	fp, r3
    6ae2:	e7c0      	b.n	6a66 <__aeabi_fdiv+0x32>
    6ae4:	2d00      	cmp	r5, #0
    6ae6:	d11f      	bne.n	6b28 <__aeabi_fdiv+0xf4>
    6ae8:	2302      	movs	r3, #2
    6aea:	e002      	b.n	6af2 <__aeabi_fdiv+0xbe>
    6aec:	2d00      	cmp	r5, #0
    6aee:	d111      	bne.n	6b14 <__aeabi_fdiv+0xe0>
    6af0:	2301      	movs	r3, #1
    6af2:	1ab2      	subs	r2, r6, r2
    6af4:	4650      	mov	r0, sl
    6af6:	4646      	mov	r6, r8
    6af8:	4078      	eors	r0, r7
    6afa:	9201      	str	r2, [sp, #4]
    6afc:	431e      	orrs	r6, r3
    6afe:	2e0f      	cmp	r6, #15
    6b00:	d827      	bhi.n	6b52 <__aeabi_fdiv+0x11e>
    6b02:	4966      	ldr	r1, [pc, #408]	; (6c9c <__aeabi_fdiv+0x268>)
    6b04:	00b6      	lsls	r6, r6, #2
    6b06:	5989      	ldr	r1, [r1, r6]
    6b08:	468f      	mov	pc, r1
    6b0a:	230c      	movs	r3, #12
    6b0c:	4698      	mov	r8, r3
    6b0e:	3b09      	subs	r3, #9
    6b10:	469b      	mov	fp, r3
    6b12:	e7a8      	b.n	6a66 <__aeabi_fdiv+0x32>
    6b14:	1c28      	adds	r0, r5, #0
    6b16:	f7ff fd3b 	bl	6590 <__clzsi2>
    6b1a:	2276      	movs	r2, #118	; 0x76
    6b1c:	1f43      	subs	r3, r0, #5
    6b1e:	4252      	negs	r2, r2
    6b20:	409d      	lsls	r5, r3
    6b22:	1a12      	subs	r2, r2, r0
    6b24:	2300      	movs	r3, #0
    6b26:	e7af      	b.n	6a88 <__aeabi_fdiv+0x54>
    6b28:	2303      	movs	r3, #3
    6b2a:	e7ad      	b.n	6a88 <__aeabi_fdiv+0x54>
    6b2c:	1c20      	adds	r0, r4, #0
    6b2e:	f7ff fd2f 	bl	6590 <__clzsi2>
    6b32:	1f43      	subs	r3, r0, #5
    6b34:	409c      	lsls	r4, r3
    6b36:	2376      	movs	r3, #118	; 0x76
    6b38:	425b      	negs	r3, r3
    6b3a:	1a1e      	subs	r6, r3, r0
    6b3c:	2300      	movs	r3, #0
    6b3e:	4698      	mov	r8, r3
    6b40:	469b      	mov	fp, r3
    6b42:	e790      	b.n	6a66 <__aeabi_fdiv+0x32>
    6b44:	2500      	movs	r5, #0
    6b46:	46d1      	mov	r9, sl
    6b48:	469b      	mov	fp, r3
    6b4a:	465b      	mov	r3, fp
    6b4c:	4648      	mov	r0, r9
    6b4e:	2b02      	cmp	r3, #2
    6b50:	d16f      	bne.n	6c32 <__aeabi_fdiv+0x1fe>
    6b52:	2101      	movs	r1, #1
    6b54:	24ff      	movs	r4, #255	; 0xff
    6b56:	4001      	ands	r1, r0
    6b58:	2300      	movs	r3, #0
    6b5a:	e7ae      	b.n	6aba <__aeabi_fdiv+0x86>
    6b5c:	237e      	movs	r3, #126	; 0x7e
    6b5e:	9a01      	ldr	r2, [sp, #4]
    6b60:	425b      	negs	r3, r3
    6b62:	1a9b      	subs	r3, r3, r2
    6b64:	2b1b      	cmp	r3, #27
    6b66:	dd6d      	ble.n	6c44 <__aeabi_fdiv+0x210>
    6b68:	2101      	movs	r1, #1
    6b6a:	464b      	mov	r3, r9
    6b6c:	4019      	ands	r1, r3
    6b6e:	2400      	movs	r4, #0
    6b70:	2300      	movs	r3, #0
    6b72:	e7a2      	b.n	6aba <__aeabi_fdiv+0x86>
    6b74:	2380      	movs	r3, #128	; 0x80
    6b76:	03db      	lsls	r3, r3, #15
    6b78:	421c      	tst	r4, r3
    6b7a:	d149      	bne.n	6c10 <__aeabi_fdiv+0x1dc>
    6b7c:	2380      	movs	r3, #128	; 0x80
    6b7e:	03db      	lsls	r3, r3, #15
    6b80:	4323      	orrs	r3, r4
    6b82:	025b      	lsls	r3, r3, #9
    6b84:	0a5b      	lsrs	r3, r3, #9
    6b86:	1c39      	adds	r1, r7, #0
    6b88:	e796      	b.n	6ab8 <__aeabi_fdiv+0x84>
    6b8a:	0163      	lsls	r3, r4, #5
    6b8c:	016d      	lsls	r5, r5, #5
    6b8e:	42ab      	cmp	r3, r5
    6b90:	d337      	bcc.n	6c02 <__aeabi_fdiv+0x1ce>
    6b92:	4689      	mov	r9, r1
    6b94:	201a      	movs	r0, #26
    6b96:	2101      	movs	r1, #1
    6b98:	1b5b      	subs	r3, r3, r5
    6b9a:	2401      	movs	r4, #1
    6b9c:	1c1e      	adds	r6, r3, #0
    6b9e:	0049      	lsls	r1, r1, #1
    6ba0:	005b      	lsls	r3, r3, #1
    6ba2:	2e00      	cmp	r6, #0
    6ba4:	db01      	blt.n	6baa <__aeabi_fdiv+0x176>
    6ba6:	42ab      	cmp	r3, r5
    6ba8:	d301      	bcc.n	6bae <__aeabi_fdiv+0x17a>
    6baa:	1b5b      	subs	r3, r3, r5
    6bac:	4321      	orrs	r1, r4
    6bae:	3801      	subs	r0, #1
    6bb0:	2800      	cmp	r0, #0
    6bb2:	d1f3      	bne.n	6b9c <__aeabi_fdiv+0x168>
    6bb4:	1e58      	subs	r0, r3, #1
    6bb6:	4183      	sbcs	r3, r0
    6bb8:	430b      	orrs	r3, r1
    6bba:	1c1d      	adds	r5, r3, #0
    6bbc:	9c01      	ldr	r4, [sp, #4]
    6bbe:	347f      	adds	r4, #127	; 0x7f
    6bc0:	2c00      	cmp	r4, #0
    6bc2:	ddcb      	ble.n	6b5c <__aeabi_fdiv+0x128>
    6bc4:	076b      	lsls	r3, r5, #29
    6bc6:	d004      	beq.n	6bd2 <__aeabi_fdiv+0x19e>
    6bc8:	230f      	movs	r3, #15
    6bca:	402b      	ands	r3, r5
    6bcc:	2b04      	cmp	r3, #4
    6bce:	d000      	beq.n	6bd2 <__aeabi_fdiv+0x19e>
    6bd0:	3504      	adds	r5, #4
    6bd2:	012b      	lsls	r3, r5, #4
    6bd4:	d504      	bpl.n	6be0 <__aeabi_fdiv+0x1ac>
    6bd6:	9a01      	ldr	r2, [sp, #4]
    6bd8:	4b31      	ldr	r3, [pc, #196]	; (6ca0 <__aeabi_fdiv+0x26c>)
    6bda:	3280      	adds	r2, #128	; 0x80
    6bdc:	1c14      	adds	r4, r2, #0
    6bde:	401d      	ands	r5, r3
    6be0:	2cfe      	cmp	r4, #254	; 0xfe
    6be2:	dd07      	ble.n	6bf4 <__aeabi_fdiv+0x1c0>
    6be4:	464b      	mov	r3, r9
    6be6:	2101      	movs	r1, #1
    6be8:	24ff      	movs	r4, #255	; 0xff
    6bea:	4019      	ands	r1, r3
    6bec:	2300      	movs	r3, #0
    6bee:	e764      	b.n	6aba <__aeabi_fdiv+0x86>
    6bf0:	1c25      	adds	r5, r4, #0
    6bf2:	e7aa      	b.n	6b4a <__aeabi_fdiv+0x116>
    6bf4:	2101      	movs	r1, #1
    6bf6:	464a      	mov	r2, r9
    6bf8:	01ab      	lsls	r3, r5, #6
    6bfa:	0a5b      	lsrs	r3, r3, #9
    6bfc:	b2e4      	uxtb	r4, r4
    6bfe:	4011      	ands	r1, r2
    6c00:	e75b      	b.n	6aba <__aeabi_fdiv+0x86>
    6c02:	9a01      	ldr	r2, [sp, #4]
    6c04:	4689      	mov	r9, r1
    6c06:	3a01      	subs	r2, #1
    6c08:	9201      	str	r2, [sp, #4]
    6c0a:	201b      	movs	r0, #27
    6c0c:	2100      	movs	r1, #0
    6c0e:	e7c4      	b.n	6b9a <__aeabi_fdiv+0x166>
    6c10:	421d      	tst	r5, r3
    6c12:	d007      	beq.n	6c24 <__aeabi_fdiv+0x1f0>
    6c14:	4323      	orrs	r3, r4
    6c16:	025b      	lsls	r3, r3, #9
    6c18:	0a5b      	lsrs	r3, r3, #9
    6c1a:	1c39      	adds	r1, r7, #0
    6c1c:	e74c      	b.n	6ab8 <__aeabi_fdiv+0x84>
    6c1e:	2500      	movs	r5, #0
    6c20:	0263      	lsls	r3, r4, #9
    6c22:	d5ab      	bpl.n	6b7c <__aeabi_fdiv+0x148>
    6c24:	2380      	movs	r3, #128	; 0x80
    6c26:	03db      	lsls	r3, r3, #15
    6c28:	432b      	orrs	r3, r5
    6c2a:	025b      	lsls	r3, r3, #9
    6c2c:	0a5b      	lsrs	r3, r3, #9
    6c2e:	4651      	mov	r1, sl
    6c30:	e742      	b.n	6ab8 <__aeabi_fdiv+0x84>
    6c32:	2b03      	cmp	r3, #3
    6c34:	d025      	beq.n	6c82 <__aeabi_fdiv+0x24e>
    6c36:	2b01      	cmp	r3, #1
    6c38:	d1c0      	bne.n	6bbc <__aeabi_fdiv+0x188>
    6c3a:	2101      	movs	r1, #1
    6c3c:	2400      	movs	r4, #0
    6c3e:	4001      	ands	r1, r0
    6c40:	2300      	movs	r3, #0
    6c42:	e73a      	b.n	6aba <__aeabi_fdiv+0x86>
    6c44:	1c29      	adds	r1, r5, #0
    6c46:	40d9      	lsrs	r1, r3
    6c48:	1c2b      	adds	r3, r5, #0
    6c4a:	9a01      	ldr	r2, [sp, #4]
    6c4c:	329e      	adds	r2, #158	; 0x9e
    6c4e:	4093      	lsls	r3, r2
    6c50:	1e5d      	subs	r5, r3, #1
    6c52:	41ab      	sbcs	r3, r5
    6c54:	430b      	orrs	r3, r1
    6c56:	075a      	lsls	r2, r3, #29
    6c58:	d004      	beq.n	6c64 <__aeabi_fdiv+0x230>
    6c5a:	220f      	movs	r2, #15
    6c5c:	401a      	ands	r2, r3
    6c5e:	2a04      	cmp	r2, #4
    6c60:	d000      	beq.n	6c64 <__aeabi_fdiv+0x230>
    6c62:	3304      	adds	r3, #4
    6c64:	015a      	lsls	r2, r3, #5
    6c66:	d505      	bpl.n	6c74 <__aeabi_fdiv+0x240>
    6c68:	464b      	mov	r3, r9
    6c6a:	2101      	movs	r1, #1
    6c6c:	2401      	movs	r4, #1
    6c6e:	4019      	ands	r1, r3
    6c70:	2300      	movs	r3, #0
    6c72:	e722      	b.n	6aba <__aeabi_fdiv+0x86>
    6c74:	2101      	movs	r1, #1
    6c76:	464a      	mov	r2, r9
    6c78:	019b      	lsls	r3, r3, #6
    6c7a:	0a5b      	lsrs	r3, r3, #9
    6c7c:	4011      	ands	r1, r2
    6c7e:	2400      	movs	r4, #0
    6c80:	e71b      	b.n	6aba <__aeabi_fdiv+0x86>
    6c82:	2380      	movs	r3, #128	; 0x80
    6c84:	2101      	movs	r1, #1
    6c86:	464a      	mov	r2, r9
    6c88:	03db      	lsls	r3, r3, #15
    6c8a:	432b      	orrs	r3, r5
    6c8c:	025b      	lsls	r3, r3, #9
    6c8e:	400a      	ands	r2, r1
    6c90:	0a5b      	lsrs	r3, r3, #9
    6c92:	1c11      	adds	r1, r2, #0
    6c94:	e710      	b.n	6ab8 <__aeabi_fdiv+0x84>
    6c96:	46c0      	nop			; (mov r8, r8)
    6c98:	00008a48 	.word	0x00008a48
    6c9c:	00008a88 	.word	0x00008a88
    6ca0:	f7ffffff 	.word	0xf7ffffff

00006ca4 <__aeabi_fmul>:
    6ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ca6:	465f      	mov	r7, fp
    6ca8:	4656      	mov	r6, sl
    6caa:	464d      	mov	r5, r9
    6cac:	4644      	mov	r4, r8
    6cae:	b4f0      	push	{r4, r5, r6, r7}
    6cb0:	0245      	lsls	r5, r0, #9
    6cb2:	0046      	lsls	r6, r0, #1
    6cb4:	0fc4      	lsrs	r4, r0, #31
    6cb6:	b083      	sub	sp, #12
    6cb8:	1c0f      	adds	r7, r1, #0
    6cba:	0a6d      	lsrs	r5, r5, #9
    6cbc:	0e36      	lsrs	r6, r6, #24
    6cbe:	46a3      	mov	fp, r4
    6cc0:	d045      	beq.n	6d4e <__aeabi_fmul+0xaa>
    6cc2:	2eff      	cmp	r6, #255	; 0xff
    6cc4:	d025      	beq.n	6d12 <__aeabi_fmul+0x6e>
    6cc6:	2380      	movs	r3, #128	; 0x80
    6cc8:	041b      	lsls	r3, r3, #16
    6cca:	431d      	orrs	r5, r3
    6ccc:	2300      	movs	r3, #0
    6cce:	469a      	mov	sl, r3
    6cd0:	00ed      	lsls	r5, r5, #3
    6cd2:	3e7f      	subs	r6, #127	; 0x7f
    6cd4:	9301      	str	r3, [sp, #4]
    6cd6:	027b      	lsls	r3, r7, #9
    6cd8:	0a5b      	lsrs	r3, r3, #9
    6cda:	4698      	mov	r8, r3
    6cdc:	0078      	lsls	r0, r7, #1
    6cde:	0ffb      	lsrs	r3, r7, #31
    6ce0:	0e00      	lsrs	r0, r0, #24
    6ce2:	4699      	mov	r9, r3
    6ce4:	d040      	beq.n	6d68 <__aeabi_fmul+0xc4>
    6ce6:	28ff      	cmp	r0, #255	; 0xff
    6ce8:	d038      	beq.n	6d5c <__aeabi_fmul+0xb8>
    6cea:	2380      	movs	r3, #128	; 0x80
    6cec:	4642      	mov	r2, r8
    6cee:	041b      	lsls	r3, r3, #16
    6cf0:	4313      	orrs	r3, r2
    6cf2:	00db      	lsls	r3, r3, #3
    6cf4:	4698      	mov	r8, r3
    6cf6:	2300      	movs	r3, #0
    6cf8:	387f      	subs	r0, #127	; 0x7f
    6cfa:	464a      	mov	r2, r9
    6cfc:	9f01      	ldr	r7, [sp, #4]
    6cfe:	1830      	adds	r0, r6, r0
    6d00:	4062      	eors	r2, r4
    6d02:	1c41      	adds	r1, r0, #1
    6d04:	431f      	orrs	r7, r3
    6d06:	2f0f      	cmp	r7, #15
    6d08:	d869      	bhi.n	6dde <__aeabi_fmul+0x13a>
    6d0a:	4e7d      	ldr	r6, [pc, #500]	; (6f00 <__aeabi_fmul+0x25c>)
    6d0c:	00bf      	lsls	r7, r7, #2
    6d0e:	59f6      	ldr	r6, [r6, r7]
    6d10:	46b7      	mov	pc, r6
    6d12:	2d00      	cmp	r5, #0
    6d14:	d145      	bne.n	6da2 <__aeabi_fmul+0xfe>
    6d16:	2308      	movs	r3, #8
    6d18:	9301      	str	r3, [sp, #4]
    6d1a:	3b06      	subs	r3, #6
    6d1c:	469a      	mov	sl, r3
    6d1e:	e7da      	b.n	6cd6 <__aeabi_fmul+0x32>
    6d20:	4693      	mov	fp, r2
    6d22:	4653      	mov	r3, sl
    6d24:	2b02      	cmp	r3, #2
    6d26:	d12f      	bne.n	6d88 <__aeabi_fmul+0xe4>
    6d28:	465b      	mov	r3, fp
    6d2a:	2401      	movs	r4, #1
    6d2c:	2500      	movs	r5, #0
    6d2e:	401c      	ands	r4, r3
    6d30:	23ff      	movs	r3, #255	; 0xff
    6d32:	026d      	lsls	r5, r5, #9
    6d34:	05db      	lsls	r3, r3, #23
    6d36:	0a6d      	lsrs	r5, r5, #9
    6d38:	07e4      	lsls	r4, r4, #31
    6d3a:	431d      	orrs	r5, r3
    6d3c:	4325      	orrs	r5, r4
    6d3e:	1c28      	adds	r0, r5, #0
    6d40:	b003      	add	sp, #12
    6d42:	bc3c      	pop	{r2, r3, r4, r5}
    6d44:	4690      	mov	r8, r2
    6d46:	4699      	mov	r9, r3
    6d48:	46a2      	mov	sl, r4
    6d4a:	46ab      	mov	fp, r5
    6d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d4e:	2d00      	cmp	r5, #0
    6d50:	d12c      	bne.n	6dac <__aeabi_fmul+0x108>
    6d52:	2304      	movs	r3, #4
    6d54:	9301      	str	r3, [sp, #4]
    6d56:	3b03      	subs	r3, #3
    6d58:	469a      	mov	sl, r3
    6d5a:	e7bc      	b.n	6cd6 <__aeabi_fmul+0x32>
    6d5c:	4643      	mov	r3, r8
    6d5e:	425a      	negs	r2, r3
    6d60:	4153      	adcs	r3, r2
    6d62:	2203      	movs	r2, #3
    6d64:	1ad3      	subs	r3, r2, r3
    6d66:	e7c8      	b.n	6cfa <__aeabi_fmul+0x56>
    6d68:	4642      	mov	r2, r8
    6d6a:	2301      	movs	r3, #1
    6d6c:	2a00      	cmp	r2, #0
    6d6e:	d0c4      	beq.n	6cfa <__aeabi_fmul+0x56>
    6d70:	4640      	mov	r0, r8
    6d72:	f7ff fc0d 	bl	6590 <__clzsi2>
    6d76:	4642      	mov	r2, r8
    6d78:	1f43      	subs	r3, r0, #5
    6d7a:	409a      	lsls	r2, r3
    6d7c:	2376      	movs	r3, #118	; 0x76
    6d7e:	425b      	negs	r3, r3
    6d80:	1a18      	subs	r0, r3, r0
    6d82:	4690      	mov	r8, r2
    6d84:	2300      	movs	r3, #0
    6d86:	e7b8      	b.n	6cfa <__aeabi_fmul+0x56>
    6d88:	2b03      	cmp	r3, #3
    6d8a:	d100      	bne.n	6d8e <__aeabi_fmul+0xea>
    6d8c:	e0ad      	b.n	6eea <__aeabi_fmul+0x246>
    6d8e:	2b01      	cmp	r3, #1
    6d90:	d000      	beq.n	6d94 <__aeabi_fmul+0xf0>
    6d92:	e08c      	b.n	6eae <__aeabi_fmul+0x20a>
    6d94:	465b      	mov	r3, fp
    6d96:	4654      	mov	r4, sl
    6d98:	401c      	ands	r4, r3
    6d9a:	b2e4      	uxtb	r4, r4
    6d9c:	2300      	movs	r3, #0
    6d9e:	2500      	movs	r5, #0
    6da0:	e7c7      	b.n	6d32 <__aeabi_fmul+0x8e>
    6da2:	230c      	movs	r3, #12
    6da4:	9301      	str	r3, [sp, #4]
    6da6:	3b09      	subs	r3, #9
    6da8:	469a      	mov	sl, r3
    6daa:	e794      	b.n	6cd6 <__aeabi_fmul+0x32>
    6dac:	1c28      	adds	r0, r5, #0
    6dae:	f7ff fbef 	bl	6590 <__clzsi2>
    6db2:	2676      	movs	r6, #118	; 0x76
    6db4:	1f43      	subs	r3, r0, #5
    6db6:	409d      	lsls	r5, r3
    6db8:	2300      	movs	r3, #0
    6dba:	4276      	negs	r6, r6
    6dbc:	1a36      	subs	r6, r6, r0
    6dbe:	9301      	str	r3, [sp, #4]
    6dc0:	469a      	mov	sl, r3
    6dc2:	e788      	b.n	6cd6 <__aeabi_fmul+0x32>
    6dc4:	2580      	movs	r5, #128	; 0x80
    6dc6:	2400      	movs	r4, #0
    6dc8:	03ed      	lsls	r5, r5, #15
    6dca:	23ff      	movs	r3, #255	; 0xff
    6dcc:	e7b1      	b.n	6d32 <__aeabi_fmul+0x8e>
    6dce:	4645      	mov	r5, r8
    6dd0:	46cb      	mov	fp, r9
    6dd2:	469a      	mov	sl, r3
    6dd4:	e7a5      	b.n	6d22 <__aeabi_fmul+0x7e>
    6dd6:	4645      	mov	r5, r8
    6dd8:	4693      	mov	fp, r2
    6dda:	469a      	mov	sl, r3
    6ddc:	e7a1      	b.n	6d22 <__aeabi_fmul+0x7e>
    6dde:	4643      	mov	r3, r8
    6de0:	042c      	lsls	r4, r5, #16
    6de2:	0c1b      	lsrs	r3, r3, #16
    6de4:	469c      	mov	ip, r3
    6de6:	0c23      	lsrs	r3, r4, #16
    6de8:	4644      	mov	r4, r8
    6dea:	0426      	lsls	r6, r4, #16
    6dec:	1c1c      	adds	r4, r3, #0
    6dee:	0c36      	lsrs	r6, r6, #16
    6df0:	0c2f      	lsrs	r7, r5, #16
    6df2:	4374      	muls	r4, r6
    6df4:	1c35      	adds	r5, r6, #0
    6df6:	4666      	mov	r6, ip
    6df8:	437d      	muls	r5, r7
    6dfa:	4373      	muls	r3, r6
    6dfc:	4377      	muls	r7, r6
    6dfe:	18eb      	adds	r3, r5, r3
    6e00:	0c26      	lsrs	r6, r4, #16
    6e02:	199e      	adds	r6, r3, r6
    6e04:	42b5      	cmp	r5, r6
    6e06:	d903      	bls.n	6e10 <__aeabi_fmul+0x16c>
    6e08:	2380      	movs	r3, #128	; 0x80
    6e0a:	025b      	lsls	r3, r3, #9
    6e0c:	469c      	mov	ip, r3
    6e0e:	4467      	add	r7, ip
    6e10:	0424      	lsls	r4, r4, #16
    6e12:	0433      	lsls	r3, r6, #16
    6e14:	0c24      	lsrs	r4, r4, #16
    6e16:	191b      	adds	r3, r3, r4
    6e18:	019d      	lsls	r5, r3, #6
    6e1a:	1e6c      	subs	r4, r5, #1
    6e1c:	41a5      	sbcs	r5, r4
    6e1e:	0e9b      	lsrs	r3, r3, #26
    6e20:	0c36      	lsrs	r6, r6, #16
    6e22:	432b      	orrs	r3, r5
    6e24:	19bd      	adds	r5, r7, r6
    6e26:	01ad      	lsls	r5, r5, #6
    6e28:	431d      	orrs	r5, r3
    6e2a:	012b      	lsls	r3, r5, #4
    6e2c:	d504      	bpl.n	6e38 <__aeabi_fmul+0x194>
    6e2e:	2301      	movs	r3, #1
    6e30:	0868      	lsrs	r0, r5, #1
    6e32:	401d      	ands	r5, r3
    6e34:	4305      	orrs	r5, r0
    6e36:	1c08      	adds	r0, r1, #0
    6e38:	1c03      	adds	r3, r0, #0
    6e3a:	337f      	adds	r3, #127	; 0x7f
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	dd2c      	ble.n	6e9a <__aeabi_fmul+0x1f6>
    6e40:	0769      	lsls	r1, r5, #29
    6e42:	d004      	beq.n	6e4e <__aeabi_fmul+0x1aa>
    6e44:	210f      	movs	r1, #15
    6e46:	4029      	ands	r1, r5
    6e48:	2904      	cmp	r1, #4
    6e4a:	d000      	beq.n	6e4e <__aeabi_fmul+0x1aa>
    6e4c:	3504      	adds	r5, #4
    6e4e:	0129      	lsls	r1, r5, #4
    6e50:	d503      	bpl.n	6e5a <__aeabi_fmul+0x1b6>
    6e52:	4b2c      	ldr	r3, [pc, #176]	; (6f04 <__aeabi_fmul+0x260>)
    6e54:	401d      	ands	r5, r3
    6e56:	1c03      	adds	r3, r0, #0
    6e58:	3380      	adds	r3, #128	; 0x80
    6e5a:	2bfe      	cmp	r3, #254	; 0xfe
    6e5c:	dd17      	ble.n	6e8e <__aeabi_fmul+0x1ea>
    6e5e:	2401      	movs	r4, #1
    6e60:	23ff      	movs	r3, #255	; 0xff
    6e62:	4014      	ands	r4, r2
    6e64:	2500      	movs	r5, #0
    6e66:	e764      	b.n	6d32 <__aeabi_fmul+0x8e>
    6e68:	2080      	movs	r0, #128	; 0x80
    6e6a:	03c0      	lsls	r0, r0, #15
    6e6c:	4205      	tst	r5, r0
    6e6e:	d009      	beq.n	6e84 <__aeabi_fmul+0x1e0>
    6e70:	4643      	mov	r3, r8
    6e72:	4203      	tst	r3, r0
    6e74:	d106      	bne.n	6e84 <__aeabi_fmul+0x1e0>
    6e76:	4645      	mov	r5, r8
    6e78:	4305      	orrs	r5, r0
    6e7a:	026d      	lsls	r5, r5, #9
    6e7c:	0a6d      	lsrs	r5, r5, #9
    6e7e:	464c      	mov	r4, r9
    6e80:	23ff      	movs	r3, #255	; 0xff
    6e82:	e756      	b.n	6d32 <__aeabi_fmul+0x8e>
    6e84:	4305      	orrs	r5, r0
    6e86:	026d      	lsls	r5, r5, #9
    6e88:	0a6d      	lsrs	r5, r5, #9
    6e8a:	23ff      	movs	r3, #255	; 0xff
    6e8c:	e751      	b.n	6d32 <__aeabi_fmul+0x8e>
    6e8e:	2401      	movs	r4, #1
    6e90:	01ad      	lsls	r5, r5, #6
    6e92:	0a6d      	lsrs	r5, r5, #9
    6e94:	b2db      	uxtb	r3, r3
    6e96:	4014      	ands	r4, r2
    6e98:	e74b      	b.n	6d32 <__aeabi_fmul+0x8e>
    6e9a:	237e      	movs	r3, #126	; 0x7e
    6e9c:	425b      	negs	r3, r3
    6e9e:	1a1b      	subs	r3, r3, r0
    6ea0:	2b1b      	cmp	r3, #27
    6ea2:	dd07      	ble.n	6eb4 <__aeabi_fmul+0x210>
    6ea4:	2401      	movs	r4, #1
    6ea6:	2300      	movs	r3, #0
    6ea8:	4014      	ands	r4, r2
    6eaa:	2500      	movs	r5, #0
    6eac:	e741      	b.n	6d32 <__aeabi_fmul+0x8e>
    6eae:	1c08      	adds	r0, r1, #0
    6eb0:	465a      	mov	r2, fp
    6eb2:	e7c1      	b.n	6e38 <__aeabi_fmul+0x194>
    6eb4:	309e      	adds	r0, #158	; 0x9e
    6eb6:	1c29      	adds	r1, r5, #0
    6eb8:	4085      	lsls	r5, r0
    6eba:	40d9      	lsrs	r1, r3
    6ebc:	1e68      	subs	r0, r5, #1
    6ebe:	4185      	sbcs	r5, r0
    6ec0:	430d      	orrs	r5, r1
    6ec2:	076b      	lsls	r3, r5, #29
    6ec4:	d004      	beq.n	6ed0 <__aeabi_fmul+0x22c>
    6ec6:	230f      	movs	r3, #15
    6ec8:	402b      	ands	r3, r5
    6eca:	2b04      	cmp	r3, #4
    6ecc:	d000      	beq.n	6ed0 <__aeabi_fmul+0x22c>
    6ece:	3504      	adds	r5, #4
    6ed0:	016b      	lsls	r3, r5, #5
    6ed2:	d504      	bpl.n	6ede <__aeabi_fmul+0x23a>
    6ed4:	2401      	movs	r4, #1
    6ed6:	2301      	movs	r3, #1
    6ed8:	4014      	ands	r4, r2
    6eda:	2500      	movs	r5, #0
    6edc:	e729      	b.n	6d32 <__aeabi_fmul+0x8e>
    6ede:	2401      	movs	r4, #1
    6ee0:	01ad      	lsls	r5, r5, #6
    6ee2:	0a6d      	lsrs	r5, r5, #9
    6ee4:	4014      	ands	r4, r2
    6ee6:	2300      	movs	r3, #0
    6ee8:	e723      	b.n	6d32 <__aeabi_fmul+0x8e>
    6eea:	2380      	movs	r3, #128	; 0x80
    6eec:	03db      	lsls	r3, r3, #15
    6eee:	431d      	orrs	r5, r3
    6ef0:	2401      	movs	r4, #1
    6ef2:	465b      	mov	r3, fp
    6ef4:	026d      	lsls	r5, r5, #9
    6ef6:	4023      	ands	r3, r4
    6ef8:	1c1c      	adds	r4, r3, #0
    6efa:	0a6d      	lsrs	r5, r5, #9
    6efc:	23ff      	movs	r3, #255	; 0xff
    6efe:	e718      	b.n	6d32 <__aeabi_fmul+0x8e>
    6f00:	00008ac8 	.word	0x00008ac8
    6f04:	f7ffffff 	.word	0xf7ffffff

00006f08 <__aeabi_fsub>:
    6f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f0a:	004a      	lsls	r2, r1, #1
    6f0c:	0243      	lsls	r3, r0, #9
    6f0e:	0044      	lsls	r4, r0, #1
    6f10:	024d      	lsls	r5, r1, #9
    6f12:	0fc0      	lsrs	r0, r0, #31
    6f14:	0e24      	lsrs	r4, r4, #24
    6f16:	1c06      	adds	r6, r0, #0
    6f18:	099b      	lsrs	r3, r3, #6
    6f1a:	0e12      	lsrs	r2, r2, #24
    6f1c:	0fc9      	lsrs	r1, r1, #31
    6f1e:	09ad      	lsrs	r5, r5, #6
    6f20:	2aff      	cmp	r2, #255	; 0xff
    6f22:	d100      	bne.n	6f26 <__aeabi_fsub+0x1e>
    6f24:	e075      	b.n	7012 <__aeabi_fsub+0x10a>
    6f26:	2701      	movs	r7, #1
    6f28:	4079      	eors	r1, r7
    6f2a:	4288      	cmp	r0, r1
    6f2c:	d050      	beq.n	6fd0 <__aeabi_fsub+0xc8>
    6f2e:	1aa0      	subs	r0, r4, r2
    6f30:	2800      	cmp	r0, #0
    6f32:	dc00      	bgt.n	6f36 <__aeabi_fsub+0x2e>
    6f34:	e08f      	b.n	7056 <__aeabi_fsub+0x14e>
    6f36:	2a00      	cmp	r2, #0
    6f38:	d11e      	bne.n	6f78 <__aeabi_fsub+0x70>
    6f3a:	2d00      	cmp	r5, #0
    6f3c:	d000      	beq.n	6f40 <__aeabi_fsub+0x38>
    6f3e:	e075      	b.n	702c <__aeabi_fsub+0x124>
    6f40:	075a      	lsls	r2, r3, #29
    6f42:	d004      	beq.n	6f4e <__aeabi_fsub+0x46>
    6f44:	220f      	movs	r2, #15
    6f46:	401a      	ands	r2, r3
    6f48:	2a04      	cmp	r2, #4
    6f4a:	d000      	beq.n	6f4e <__aeabi_fsub+0x46>
    6f4c:	3304      	adds	r3, #4
    6f4e:	2280      	movs	r2, #128	; 0x80
    6f50:	2001      	movs	r0, #1
    6f52:	04d2      	lsls	r2, r2, #19
    6f54:	401a      	ands	r2, r3
    6f56:	4030      	ands	r0, r6
    6f58:	2a00      	cmp	r2, #0
    6f5a:	d032      	beq.n	6fc2 <__aeabi_fsub+0xba>
    6f5c:	3401      	adds	r4, #1
    6f5e:	2cff      	cmp	r4, #255	; 0xff
    6f60:	d100      	bne.n	6f64 <__aeabi_fsub+0x5c>
    6f62:	e084      	b.n	706e <__aeabi_fsub+0x166>
    6f64:	019b      	lsls	r3, r3, #6
    6f66:	0a5b      	lsrs	r3, r3, #9
    6f68:	b2e4      	uxtb	r4, r4
    6f6a:	025b      	lsls	r3, r3, #9
    6f6c:	05e4      	lsls	r4, r4, #23
    6f6e:	0a5b      	lsrs	r3, r3, #9
    6f70:	4323      	orrs	r3, r4
    6f72:	07c0      	lsls	r0, r0, #31
    6f74:	4318      	orrs	r0, r3
    6f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f78:	2cff      	cmp	r4, #255	; 0xff
    6f7a:	d0e1      	beq.n	6f40 <__aeabi_fsub+0x38>
    6f7c:	2280      	movs	r2, #128	; 0x80
    6f7e:	04d2      	lsls	r2, r2, #19
    6f80:	4315      	orrs	r5, r2
    6f82:	281b      	cmp	r0, #27
    6f84:	dd7a      	ble.n	707c <__aeabi_fsub+0x174>
    6f86:	2501      	movs	r5, #1
    6f88:	1b5b      	subs	r3, r3, r5
    6f8a:	015a      	lsls	r2, r3, #5
    6f8c:	d55d      	bpl.n	704a <__aeabi_fsub+0x142>
    6f8e:	019b      	lsls	r3, r3, #6
    6f90:	099f      	lsrs	r7, r3, #6
    6f92:	1c38      	adds	r0, r7, #0
    6f94:	f7ff fafc 	bl	6590 <__clzsi2>
    6f98:	3805      	subs	r0, #5
    6f9a:	4087      	lsls	r7, r0
    6f9c:	4284      	cmp	r4, r0
    6f9e:	dc69      	bgt.n	7074 <__aeabi_fsub+0x16c>
    6fa0:	1b00      	subs	r0, r0, r4
    6fa2:	241f      	movs	r4, #31
    6fa4:	1c3a      	adds	r2, r7, #0
    6fa6:	1c43      	adds	r3, r0, #1
    6fa8:	1a20      	subs	r0, r4, r0
    6faa:	40da      	lsrs	r2, r3
    6fac:	4087      	lsls	r7, r0
    6fae:	1c13      	adds	r3, r2, #0
    6fb0:	1e7c      	subs	r4, r7, #1
    6fb2:	41a7      	sbcs	r7, r4
    6fb4:	2400      	movs	r4, #0
    6fb6:	433b      	orrs	r3, r7
    6fb8:	e7c2      	b.n	6f40 <__aeabi_fsub+0x38>
    6fba:	1e13      	subs	r3, r2, #0
    6fbc:	d145      	bne.n	704a <__aeabi_fsub+0x142>
    6fbe:	2300      	movs	r3, #0
    6fc0:	2000      	movs	r0, #0
    6fc2:	08db      	lsrs	r3, r3, #3
    6fc4:	2cff      	cmp	r4, #255	; 0xff
    6fc6:	d028      	beq.n	701a <__aeabi_fsub+0x112>
    6fc8:	025b      	lsls	r3, r3, #9
    6fca:	0a5b      	lsrs	r3, r3, #9
    6fcc:	b2e4      	uxtb	r4, r4
    6fce:	e7cc      	b.n	6f6a <__aeabi_fsub+0x62>
    6fd0:	1aa1      	subs	r1, r4, r2
    6fd2:	2900      	cmp	r1, #0
    6fd4:	dd5b      	ble.n	708e <__aeabi_fsub+0x186>
    6fd6:	2a00      	cmp	r2, #0
    6fd8:	d02e      	beq.n	7038 <__aeabi_fsub+0x130>
    6fda:	2cff      	cmp	r4, #255	; 0xff
    6fdc:	d0b0      	beq.n	6f40 <__aeabi_fsub+0x38>
    6fde:	2280      	movs	r2, #128	; 0x80
    6fe0:	04d2      	lsls	r2, r2, #19
    6fe2:	4315      	orrs	r5, r2
    6fe4:	291b      	cmp	r1, #27
    6fe6:	dc74      	bgt.n	70d2 <__aeabi_fsub+0x1ca>
    6fe8:	1c2f      	adds	r7, r5, #0
    6fea:	2220      	movs	r2, #32
    6fec:	40cf      	lsrs	r7, r1
    6fee:	1a51      	subs	r1, r2, r1
    6ff0:	408d      	lsls	r5, r1
    6ff2:	1e69      	subs	r1, r5, #1
    6ff4:	418d      	sbcs	r5, r1
    6ff6:	433d      	orrs	r5, r7
    6ff8:	195b      	adds	r3, r3, r5
    6ffa:	015a      	lsls	r2, r3, #5
    6ffc:	d525      	bpl.n	704a <__aeabi_fsub+0x142>
    6ffe:	3401      	adds	r4, #1
    7000:	2cff      	cmp	r4, #255	; 0xff
    7002:	d074      	beq.n	70ee <__aeabi_fsub+0x1e6>
    7004:	2101      	movs	r1, #1
    7006:	4a7e      	ldr	r2, [pc, #504]	; (7200 <__aeabi_fsub+0x2f8>)
    7008:	4019      	ands	r1, r3
    700a:	4013      	ands	r3, r2
    700c:	085b      	lsrs	r3, r3, #1
    700e:	430b      	orrs	r3, r1
    7010:	e796      	b.n	6f40 <__aeabi_fsub+0x38>
    7012:	2d00      	cmp	r5, #0
    7014:	d000      	beq.n	7018 <__aeabi_fsub+0x110>
    7016:	e788      	b.n	6f2a <__aeabi_fsub+0x22>
    7018:	e785      	b.n	6f26 <__aeabi_fsub+0x1e>
    701a:	2b00      	cmp	r3, #0
    701c:	d027      	beq.n	706e <__aeabi_fsub+0x166>
    701e:	2280      	movs	r2, #128	; 0x80
    7020:	03d2      	lsls	r2, r2, #15
    7022:	4313      	orrs	r3, r2
    7024:	025b      	lsls	r3, r3, #9
    7026:	0a5b      	lsrs	r3, r3, #9
    7028:	24ff      	movs	r4, #255	; 0xff
    702a:	e79e      	b.n	6f6a <__aeabi_fsub+0x62>
    702c:	3801      	subs	r0, #1
    702e:	2800      	cmp	r0, #0
    7030:	d0aa      	beq.n	6f88 <__aeabi_fsub+0x80>
    7032:	2cff      	cmp	r4, #255	; 0xff
    7034:	d1a5      	bne.n	6f82 <__aeabi_fsub+0x7a>
    7036:	e783      	b.n	6f40 <__aeabi_fsub+0x38>
    7038:	2d00      	cmp	r5, #0
    703a:	d100      	bne.n	703e <__aeabi_fsub+0x136>
    703c:	e780      	b.n	6f40 <__aeabi_fsub+0x38>
    703e:	3901      	subs	r1, #1
    7040:	2900      	cmp	r1, #0
    7042:	d0d9      	beq.n	6ff8 <__aeabi_fsub+0xf0>
    7044:	2cff      	cmp	r4, #255	; 0xff
    7046:	d1cd      	bne.n	6fe4 <__aeabi_fsub+0xdc>
    7048:	e77a      	b.n	6f40 <__aeabi_fsub+0x38>
    704a:	075a      	lsls	r2, r3, #29
    704c:	d000      	beq.n	7050 <__aeabi_fsub+0x148>
    704e:	e779      	b.n	6f44 <__aeabi_fsub+0x3c>
    7050:	2001      	movs	r0, #1
    7052:	4030      	ands	r0, r6
    7054:	e7b5      	b.n	6fc2 <__aeabi_fsub+0xba>
    7056:	2800      	cmp	r0, #0
    7058:	d125      	bne.n	70a6 <__aeabi_fsub+0x19e>
    705a:	1c62      	adds	r2, r4, #1
    705c:	b2d2      	uxtb	r2, r2
    705e:	2a01      	cmp	r2, #1
    7060:	dd55      	ble.n	710e <__aeabi_fsub+0x206>
    7062:	1b5f      	subs	r7, r3, r5
    7064:	017a      	lsls	r2, r7, #5
    7066:	d52d      	bpl.n	70c4 <__aeabi_fsub+0x1bc>
    7068:	1aef      	subs	r7, r5, r3
    706a:	1c0e      	adds	r6, r1, #0
    706c:	e791      	b.n	6f92 <__aeabi_fsub+0x8a>
    706e:	24ff      	movs	r4, #255	; 0xff
    7070:	2300      	movs	r3, #0
    7072:	e77a      	b.n	6f6a <__aeabi_fsub+0x62>
    7074:	4b62      	ldr	r3, [pc, #392]	; (7200 <__aeabi_fsub+0x2f8>)
    7076:	1a24      	subs	r4, r4, r0
    7078:	403b      	ands	r3, r7
    707a:	e761      	b.n	6f40 <__aeabi_fsub+0x38>
    707c:	1c29      	adds	r1, r5, #0
    707e:	2220      	movs	r2, #32
    7080:	40c1      	lsrs	r1, r0
    7082:	1a10      	subs	r0, r2, r0
    7084:	4085      	lsls	r5, r0
    7086:	1e68      	subs	r0, r5, #1
    7088:	4185      	sbcs	r5, r0
    708a:	430d      	orrs	r5, r1
    708c:	e77c      	b.n	6f88 <__aeabi_fsub+0x80>
    708e:	2900      	cmp	r1, #0
    7090:	d146      	bne.n	7120 <__aeabi_fsub+0x218>
    7092:	1c62      	adds	r2, r4, #1
    7094:	b2d1      	uxtb	r1, r2
    7096:	2901      	cmp	r1, #1
    7098:	dd2b      	ble.n	70f2 <__aeabi_fsub+0x1ea>
    709a:	2aff      	cmp	r2, #255	; 0xff
    709c:	d026      	beq.n	70ec <__aeabi_fsub+0x1e4>
    709e:	18eb      	adds	r3, r5, r3
    70a0:	085b      	lsrs	r3, r3, #1
    70a2:	1c14      	adds	r4, r2, #0
    70a4:	e74c      	b.n	6f40 <__aeabi_fsub+0x38>
    70a6:	2c00      	cmp	r4, #0
    70a8:	d015      	beq.n	70d6 <__aeabi_fsub+0x1ce>
    70aa:	2aff      	cmp	r2, #255	; 0xff
    70ac:	d01a      	beq.n	70e4 <__aeabi_fsub+0x1dc>
    70ae:	2480      	movs	r4, #128	; 0x80
    70b0:	04e4      	lsls	r4, r4, #19
    70b2:	4240      	negs	r0, r0
    70b4:	4323      	orrs	r3, r4
    70b6:	281b      	cmp	r0, #27
    70b8:	dd4d      	ble.n	7156 <__aeabi_fsub+0x24e>
    70ba:	2301      	movs	r3, #1
    70bc:	1aeb      	subs	r3, r5, r3
    70be:	1c14      	adds	r4, r2, #0
    70c0:	1c0e      	adds	r6, r1, #0
    70c2:	e762      	b.n	6f8a <__aeabi_fsub+0x82>
    70c4:	2f00      	cmp	r7, #0
    70c6:	d000      	beq.n	70ca <__aeabi_fsub+0x1c2>
    70c8:	e763      	b.n	6f92 <__aeabi_fsub+0x8a>
    70ca:	2300      	movs	r3, #0
    70cc:	2000      	movs	r0, #0
    70ce:	2400      	movs	r4, #0
    70d0:	e777      	b.n	6fc2 <__aeabi_fsub+0xba>
    70d2:	2501      	movs	r5, #1
    70d4:	e790      	b.n	6ff8 <__aeabi_fsub+0xf0>
    70d6:	2b00      	cmp	r3, #0
    70d8:	d039      	beq.n	714e <__aeabi_fsub+0x246>
    70da:	43c0      	mvns	r0, r0
    70dc:	2800      	cmp	r0, #0
    70de:	d0ed      	beq.n	70bc <__aeabi_fsub+0x1b4>
    70e0:	2aff      	cmp	r2, #255	; 0xff
    70e2:	d1e8      	bne.n	70b6 <__aeabi_fsub+0x1ae>
    70e4:	1c2b      	adds	r3, r5, #0
    70e6:	24ff      	movs	r4, #255	; 0xff
    70e8:	1c0e      	adds	r6, r1, #0
    70ea:	e729      	b.n	6f40 <__aeabi_fsub+0x38>
    70ec:	24ff      	movs	r4, #255	; 0xff
    70ee:	2300      	movs	r3, #0
    70f0:	e767      	b.n	6fc2 <__aeabi_fsub+0xba>
    70f2:	2c00      	cmp	r4, #0
    70f4:	d15a      	bne.n	71ac <__aeabi_fsub+0x2a4>
    70f6:	2b00      	cmp	r3, #0
    70f8:	d07f      	beq.n	71fa <__aeabi_fsub+0x2f2>
    70fa:	2d00      	cmp	r5, #0
    70fc:	d100      	bne.n	7100 <__aeabi_fsub+0x1f8>
    70fe:	e71f      	b.n	6f40 <__aeabi_fsub+0x38>
    7100:	195b      	adds	r3, r3, r5
    7102:	015a      	lsls	r2, r3, #5
    7104:	d5a1      	bpl.n	704a <__aeabi_fsub+0x142>
    7106:	4a3e      	ldr	r2, [pc, #248]	; (7200 <__aeabi_fsub+0x2f8>)
    7108:	3401      	adds	r4, #1
    710a:	4013      	ands	r3, r2
    710c:	e718      	b.n	6f40 <__aeabi_fsub+0x38>
    710e:	2c00      	cmp	r4, #0
    7110:	d115      	bne.n	713e <__aeabi_fsub+0x236>
    7112:	2b00      	cmp	r3, #0
    7114:	d12f      	bne.n	7176 <__aeabi_fsub+0x26e>
    7116:	2d00      	cmp	r5, #0
    7118:	d05e      	beq.n	71d8 <__aeabi_fsub+0x2d0>
    711a:	1c2b      	adds	r3, r5, #0
    711c:	1c0e      	adds	r6, r1, #0
    711e:	e70f      	b.n	6f40 <__aeabi_fsub+0x38>
    7120:	2c00      	cmp	r4, #0
    7122:	d121      	bne.n	7168 <__aeabi_fsub+0x260>
    7124:	2b00      	cmp	r3, #0
    7126:	d054      	beq.n	71d2 <__aeabi_fsub+0x2ca>
    7128:	43c9      	mvns	r1, r1
    712a:	2900      	cmp	r1, #0
    712c:	d004      	beq.n	7138 <__aeabi_fsub+0x230>
    712e:	2aff      	cmp	r2, #255	; 0xff
    7130:	d04c      	beq.n	71cc <__aeabi_fsub+0x2c4>
    7132:	291b      	cmp	r1, #27
    7134:	dd58      	ble.n	71e8 <__aeabi_fsub+0x2e0>
    7136:	2301      	movs	r3, #1
    7138:	195b      	adds	r3, r3, r5
    713a:	1c14      	adds	r4, r2, #0
    713c:	e75d      	b.n	6ffa <__aeabi_fsub+0xf2>
    713e:	2b00      	cmp	r3, #0
    7140:	d123      	bne.n	718a <__aeabi_fsub+0x282>
    7142:	2d00      	cmp	r5, #0
    7144:	d04b      	beq.n	71de <__aeabi_fsub+0x2d6>
    7146:	1c2b      	adds	r3, r5, #0
    7148:	1c0e      	adds	r6, r1, #0
    714a:	24ff      	movs	r4, #255	; 0xff
    714c:	e6f8      	b.n	6f40 <__aeabi_fsub+0x38>
    714e:	1c2b      	adds	r3, r5, #0
    7150:	1c14      	adds	r4, r2, #0
    7152:	1c0e      	adds	r6, r1, #0
    7154:	e6f4      	b.n	6f40 <__aeabi_fsub+0x38>
    7156:	1c1e      	adds	r6, r3, #0
    7158:	2420      	movs	r4, #32
    715a:	40c6      	lsrs	r6, r0
    715c:	1a20      	subs	r0, r4, r0
    715e:	4083      	lsls	r3, r0
    7160:	1e58      	subs	r0, r3, #1
    7162:	4183      	sbcs	r3, r0
    7164:	4333      	orrs	r3, r6
    7166:	e7a9      	b.n	70bc <__aeabi_fsub+0x1b4>
    7168:	2aff      	cmp	r2, #255	; 0xff
    716a:	d02f      	beq.n	71cc <__aeabi_fsub+0x2c4>
    716c:	2480      	movs	r4, #128	; 0x80
    716e:	04e4      	lsls	r4, r4, #19
    7170:	4249      	negs	r1, r1
    7172:	4323      	orrs	r3, r4
    7174:	e7dd      	b.n	7132 <__aeabi_fsub+0x22a>
    7176:	2d00      	cmp	r5, #0
    7178:	d100      	bne.n	717c <__aeabi_fsub+0x274>
    717a:	e6e1      	b.n	6f40 <__aeabi_fsub+0x38>
    717c:	1b5a      	subs	r2, r3, r5
    717e:	0150      	lsls	r0, r2, #5
    7180:	d400      	bmi.n	7184 <__aeabi_fsub+0x27c>
    7182:	e71a      	b.n	6fba <__aeabi_fsub+0xb2>
    7184:	1aeb      	subs	r3, r5, r3
    7186:	1c0e      	adds	r6, r1, #0
    7188:	e6da      	b.n	6f40 <__aeabi_fsub+0x38>
    718a:	24ff      	movs	r4, #255	; 0xff
    718c:	2d00      	cmp	r5, #0
    718e:	d100      	bne.n	7192 <__aeabi_fsub+0x28a>
    7190:	e6d6      	b.n	6f40 <__aeabi_fsub+0x38>
    7192:	2280      	movs	r2, #128	; 0x80
    7194:	08db      	lsrs	r3, r3, #3
    7196:	03d2      	lsls	r2, r2, #15
    7198:	4213      	tst	r3, r2
    719a:	d004      	beq.n	71a6 <__aeabi_fsub+0x29e>
    719c:	08ed      	lsrs	r5, r5, #3
    719e:	4215      	tst	r5, r2
    71a0:	d101      	bne.n	71a6 <__aeabi_fsub+0x29e>
    71a2:	1c2b      	adds	r3, r5, #0
    71a4:	1c0e      	adds	r6, r1, #0
    71a6:	00db      	lsls	r3, r3, #3
    71a8:	24ff      	movs	r4, #255	; 0xff
    71aa:	e6c9      	b.n	6f40 <__aeabi_fsub+0x38>
    71ac:	2b00      	cmp	r3, #0
    71ae:	d00d      	beq.n	71cc <__aeabi_fsub+0x2c4>
    71b0:	24ff      	movs	r4, #255	; 0xff
    71b2:	2d00      	cmp	r5, #0
    71b4:	d100      	bne.n	71b8 <__aeabi_fsub+0x2b0>
    71b6:	e6c3      	b.n	6f40 <__aeabi_fsub+0x38>
    71b8:	2280      	movs	r2, #128	; 0x80
    71ba:	08db      	lsrs	r3, r3, #3
    71bc:	03d2      	lsls	r2, r2, #15
    71be:	4213      	tst	r3, r2
    71c0:	d0f1      	beq.n	71a6 <__aeabi_fsub+0x29e>
    71c2:	08ed      	lsrs	r5, r5, #3
    71c4:	4215      	tst	r5, r2
    71c6:	d1ee      	bne.n	71a6 <__aeabi_fsub+0x29e>
    71c8:	1c2b      	adds	r3, r5, #0
    71ca:	e7ec      	b.n	71a6 <__aeabi_fsub+0x29e>
    71cc:	1c2b      	adds	r3, r5, #0
    71ce:	24ff      	movs	r4, #255	; 0xff
    71d0:	e6b6      	b.n	6f40 <__aeabi_fsub+0x38>
    71d2:	1c2b      	adds	r3, r5, #0
    71d4:	1c14      	adds	r4, r2, #0
    71d6:	e6b3      	b.n	6f40 <__aeabi_fsub+0x38>
    71d8:	1c23      	adds	r3, r4, #0
    71da:	2000      	movs	r0, #0
    71dc:	e6f1      	b.n	6fc2 <__aeabi_fsub+0xba>
    71de:	2380      	movs	r3, #128	; 0x80
    71e0:	2000      	movs	r0, #0
    71e2:	049b      	lsls	r3, r3, #18
    71e4:	24ff      	movs	r4, #255	; 0xff
    71e6:	e6ec      	b.n	6fc2 <__aeabi_fsub+0xba>
    71e8:	1c1f      	adds	r7, r3, #0
    71ea:	2420      	movs	r4, #32
    71ec:	40cf      	lsrs	r7, r1
    71ee:	1a61      	subs	r1, r4, r1
    71f0:	408b      	lsls	r3, r1
    71f2:	1e59      	subs	r1, r3, #1
    71f4:	418b      	sbcs	r3, r1
    71f6:	433b      	orrs	r3, r7
    71f8:	e79e      	b.n	7138 <__aeabi_fsub+0x230>
    71fa:	1c2b      	adds	r3, r5, #0
    71fc:	e6a0      	b.n	6f40 <__aeabi_fsub+0x38>
    71fe:	46c0      	nop			; (mov r8, r8)
    7200:	fbffffff 	.word	0xfbffffff

00007204 <__aeabi_f2iz>:
    7204:	0242      	lsls	r2, r0, #9
    7206:	0a51      	lsrs	r1, r2, #9
    7208:	0042      	lsls	r2, r0, #1
    720a:	0fc3      	lsrs	r3, r0, #31
    720c:	0e12      	lsrs	r2, r2, #24
    720e:	2000      	movs	r0, #0
    7210:	2a7e      	cmp	r2, #126	; 0x7e
    7212:	dd0d      	ble.n	7230 <__aeabi_f2iz+0x2c>
    7214:	2a9d      	cmp	r2, #157	; 0x9d
    7216:	dc0c      	bgt.n	7232 <__aeabi_f2iz+0x2e>
    7218:	2080      	movs	r0, #128	; 0x80
    721a:	0400      	lsls	r0, r0, #16
    721c:	4301      	orrs	r1, r0
    721e:	2a95      	cmp	r2, #149	; 0x95
    7220:	dc0a      	bgt.n	7238 <__aeabi_f2iz+0x34>
    7222:	2096      	movs	r0, #150	; 0x96
    7224:	1a82      	subs	r2, r0, r2
    7226:	40d1      	lsrs	r1, r2
    7228:	1c0a      	adds	r2, r1, #0
    722a:	4258      	negs	r0, r3
    722c:	4042      	eors	r2, r0
    722e:	18d0      	adds	r0, r2, r3
    7230:	4770      	bx	lr
    7232:	4a03      	ldr	r2, [pc, #12]	; (7240 <__aeabi_f2iz+0x3c>)
    7234:	1898      	adds	r0, r3, r2
    7236:	e7fb      	b.n	7230 <__aeabi_f2iz+0x2c>
    7238:	3a96      	subs	r2, #150	; 0x96
    723a:	4091      	lsls	r1, r2
    723c:	1c0a      	adds	r2, r1, #0
    723e:	e7f4      	b.n	722a <__aeabi_f2iz+0x26>
    7240:	7fffffff 	.word	0x7fffffff

00007244 <__aeabi_i2f>:
    7244:	b570      	push	{r4, r5, r6, lr}
    7246:	1e04      	subs	r4, r0, #0
    7248:	d039      	beq.n	72be <__aeabi_i2f+0x7a>
    724a:	0fc5      	lsrs	r5, r0, #31
    724c:	d000      	beq.n	7250 <__aeabi_i2f+0xc>
    724e:	4244      	negs	r4, r0
    7250:	1c20      	adds	r0, r4, #0
    7252:	f7ff f99d 	bl	6590 <__clzsi2>
    7256:	239e      	movs	r3, #158	; 0x9e
    7258:	1c26      	adds	r6, r4, #0
    725a:	1a1b      	subs	r3, r3, r0
    725c:	2b96      	cmp	r3, #150	; 0x96
    725e:	dc07      	bgt.n	7270 <__aeabi_i2f+0x2c>
    7260:	2808      	cmp	r0, #8
    7262:	dd01      	ble.n	7268 <__aeabi_i2f+0x24>
    7264:	3808      	subs	r0, #8
    7266:	4084      	lsls	r4, r0
    7268:	0264      	lsls	r4, r4, #9
    726a:	0a64      	lsrs	r4, r4, #9
    726c:	b2d8      	uxtb	r0, r3
    726e:	e01e      	b.n	72ae <__aeabi_i2f+0x6a>
    7270:	2b99      	cmp	r3, #153	; 0x99
    7272:	dd0a      	ble.n	728a <__aeabi_i2f+0x46>
    7274:	2205      	movs	r2, #5
    7276:	1c21      	adds	r1, r4, #0
    7278:	1a12      	subs	r2, r2, r0
    727a:	40d1      	lsrs	r1, r2
    727c:	1c0a      	adds	r2, r1, #0
    727e:	1c01      	adds	r1, r0, #0
    7280:	311b      	adds	r1, #27
    7282:	408e      	lsls	r6, r1
    7284:	1e71      	subs	r1, r6, #1
    7286:	418e      	sbcs	r6, r1
    7288:	4316      	orrs	r6, r2
    728a:	2805      	cmp	r0, #5
    728c:	dd01      	ble.n	7292 <__aeabi_i2f+0x4e>
    728e:	1f42      	subs	r2, r0, #5
    7290:	4096      	lsls	r6, r2
    7292:	4c0f      	ldr	r4, [pc, #60]	; (72d0 <__aeabi_i2f+0x8c>)
    7294:	4034      	ands	r4, r6
    7296:	0772      	lsls	r2, r6, #29
    7298:	d004      	beq.n	72a4 <__aeabi_i2f+0x60>
    729a:	220f      	movs	r2, #15
    729c:	4016      	ands	r6, r2
    729e:	2e04      	cmp	r6, #4
    72a0:	d000      	beq.n	72a4 <__aeabi_i2f+0x60>
    72a2:	3404      	adds	r4, #4
    72a4:	0162      	lsls	r2, r4, #5
    72a6:	d40e      	bmi.n	72c6 <__aeabi_i2f+0x82>
    72a8:	01a4      	lsls	r4, r4, #6
    72aa:	0a64      	lsrs	r4, r4, #9
    72ac:	b2d8      	uxtb	r0, r3
    72ae:	0264      	lsls	r4, r4, #9
    72b0:	05c0      	lsls	r0, r0, #23
    72b2:	0a64      	lsrs	r4, r4, #9
    72b4:	07ed      	lsls	r5, r5, #31
    72b6:	4304      	orrs	r4, r0
    72b8:	432c      	orrs	r4, r5
    72ba:	1c20      	adds	r0, r4, #0
    72bc:	bd70      	pop	{r4, r5, r6, pc}
    72be:	2500      	movs	r5, #0
    72c0:	2000      	movs	r0, #0
    72c2:	2400      	movs	r4, #0
    72c4:	e7f3      	b.n	72ae <__aeabi_i2f+0x6a>
    72c6:	4b02      	ldr	r3, [pc, #8]	; (72d0 <__aeabi_i2f+0x8c>)
    72c8:	401c      	ands	r4, r3
    72ca:	239f      	movs	r3, #159	; 0x9f
    72cc:	1a1b      	subs	r3, r3, r0
    72ce:	e7eb      	b.n	72a8 <__aeabi_i2f+0x64>
    72d0:	fbffffff 	.word	0xfbffffff

000072d4 <__aeabi_ui2f>:
    72d4:	b510      	push	{r4, lr}
    72d6:	1e04      	subs	r4, r0, #0
    72d8:	d035      	beq.n	7346 <__aeabi_ui2f+0x72>
    72da:	f7ff f959 	bl	6590 <__clzsi2>
    72de:	219e      	movs	r1, #158	; 0x9e
    72e0:	1a09      	subs	r1, r1, r0
    72e2:	2996      	cmp	r1, #150	; 0x96
    72e4:	dc09      	bgt.n	72fa <__aeabi_ui2f+0x26>
    72e6:	2808      	cmp	r0, #8
    72e8:	dd30      	ble.n	734c <__aeabi_ui2f+0x78>
    72ea:	1c02      	adds	r2, r0, #0
    72ec:	1c23      	adds	r3, r4, #0
    72ee:	3a08      	subs	r2, #8
    72f0:	4093      	lsls	r3, r2
    72f2:	025b      	lsls	r3, r3, #9
    72f4:	0a5b      	lsrs	r3, r3, #9
    72f6:	b2c8      	uxtb	r0, r1
    72f8:	e020      	b.n	733c <__aeabi_ui2f+0x68>
    72fa:	2999      	cmp	r1, #153	; 0x99
    72fc:	dd0c      	ble.n	7318 <__aeabi_ui2f+0x44>
    72fe:	2205      	movs	r2, #5
    7300:	1c23      	adds	r3, r4, #0
    7302:	1a12      	subs	r2, r2, r0
    7304:	40d3      	lsrs	r3, r2
    7306:	1c1a      	adds	r2, r3, #0
    7308:	1c03      	adds	r3, r0, #0
    730a:	331b      	adds	r3, #27
    730c:	409c      	lsls	r4, r3
    730e:	1c23      	adds	r3, r4, #0
    7310:	1e5c      	subs	r4, r3, #1
    7312:	41a3      	sbcs	r3, r4
    7314:	4313      	orrs	r3, r2
    7316:	1c1c      	adds	r4, r3, #0
    7318:	2805      	cmp	r0, #5
    731a:	dd01      	ble.n	7320 <__aeabi_ui2f+0x4c>
    731c:	1f43      	subs	r3, r0, #5
    731e:	409c      	lsls	r4, r3
    7320:	4b0f      	ldr	r3, [pc, #60]	; (7360 <__aeabi_ui2f+0x8c>)
    7322:	4023      	ands	r3, r4
    7324:	0762      	lsls	r2, r4, #29
    7326:	d004      	beq.n	7332 <__aeabi_ui2f+0x5e>
    7328:	220f      	movs	r2, #15
    732a:	4014      	ands	r4, r2
    732c:	2c04      	cmp	r4, #4
    732e:	d000      	beq.n	7332 <__aeabi_ui2f+0x5e>
    7330:	3304      	adds	r3, #4
    7332:	015a      	lsls	r2, r3, #5
    7334:	d40e      	bmi.n	7354 <__aeabi_ui2f+0x80>
    7336:	019b      	lsls	r3, r3, #6
    7338:	0a5b      	lsrs	r3, r3, #9
    733a:	b2c8      	uxtb	r0, r1
    733c:	025b      	lsls	r3, r3, #9
    733e:	0a5b      	lsrs	r3, r3, #9
    7340:	05c0      	lsls	r0, r0, #23
    7342:	4318      	orrs	r0, r3
    7344:	bd10      	pop	{r4, pc}
    7346:	2000      	movs	r0, #0
    7348:	2300      	movs	r3, #0
    734a:	e7f7      	b.n	733c <__aeabi_ui2f+0x68>
    734c:	0263      	lsls	r3, r4, #9
    734e:	0a5b      	lsrs	r3, r3, #9
    7350:	b2c8      	uxtb	r0, r1
    7352:	e7f3      	b.n	733c <__aeabi_ui2f+0x68>
    7354:	219f      	movs	r1, #159	; 0x9f
    7356:	4a02      	ldr	r2, [pc, #8]	; (7360 <__aeabi_ui2f+0x8c>)
    7358:	1a09      	subs	r1, r1, r0
    735a:	4013      	ands	r3, r2
    735c:	e7eb      	b.n	7336 <__aeabi_ui2f+0x62>
    735e:	46c0      	nop			; (mov r8, r8)
    7360:	fbffffff 	.word	0xfbffffff

00007364 <__aeabi_ddiv>:
    7364:	b5f0      	push	{r4, r5, r6, r7, lr}
    7366:	465f      	mov	r7, fp
    7368:	4656      	mov	r6, sl
    736a:	464d      	mov	r5, r9
    736c:	4644      	mov	r4, r8
    736e:	b4f0      	push	{r4, r5, r6, r7}
    7370:	030f      	lsls	r7, r1, #12
    7372:	b087      	sub	sp, #28
    7374:	4698      	mov	r8, r3
    7376:	004d      	lsls	r5, r1, #1
    7378:	0b3b      	lsrs	r3, r7, #12
    737a:	0fcc      	lsrs	r4, r1, #31
    737c:	1c06      	adds	r6, r0, #0
    737e:	4692      	mov	sl, r2
    7380:	4681      	mov	r9, r0
    7382:	469b      	mov	fp, r3
    7384:	0d6d      	lsrs	r5, r5, #21
    7386:	9401      	str	r4, [sp, #4]
    7388:	d06b      	beq.n	7462 <__aeabi_ddiv+0xfe>
    738a:	4b66      	ldr	r3, [pc, #408]	; (7524 <__aeabi_ddiv+0x1c0>)
    738c:	429d      	cmp	r5, r3
    738e:	d035      	beq.n	73fc <__aeabi_ddiv+0x98>
    7390:	2780      	movs	r7, #128	; 0x80
    7392:	465b      	mov	r3, fp
    7394:	037f      	lsls	r7, r7, #13
    7396:	431f      	orrs	r7, r3
    7398:	00f3      	lsls	r3, r6, #3
    739a:	4699      	mov	r9, r3
    739c:	4b62      	ldr	r3, [pc, #392]	; (7528 <__aeabi_ddiv+0x1c4>)
    739e:	00ff      	lsls	r7, r7, #3
    73a0:	0f40      	lsrs	r0, r0, #29
    73a2:	469c      	mov	ip, r3
    73a4:	4307      	orrs	r7, r0
    73a6:	2300      	movs	r3, #0
    73a8:	46bb      	mov	fp, r7
    73aa:	2600      	movs	r6, #0
    73ac:	4465      	add	r5, ip
    73ae:	9300      	str	r3, [sp, #0]
    73b0:	4642      	mov	r2, r8
    73b2:	0317      	lsls	r7, r2, #12
    73b4:	0050      	lsls	r0, r2, #1
    73b6:	0fd2      	lsrs	r2, r2, #31
    73b8:	4653      	mov	r3, sl
    73ba:	0b3f      	lsrs	r7, r7, #12
    73bc:	0d40      	lsrs	r0, r0, #21
    73be:	4690      	mov	r8, r2
    73c0:	d100      	bne.n	73c4 <__aeabi_ddiv+0x60>
    73c2:	e072      	b.n	74aa <__aeabi_ddiv+0x146>
    73c4:	4a57      	ldr	r2, [pc, #348]	; (7524 <__aeabi_ddiv+0x1c0>)
    73c6:	4290      	cmp	r0, r2
    73c8:	d067      	beq.n	749a <__aeabi_ddiv+0x136>
    73ca:	2380      	movs	r3, #128	; 0x80
    73cc:	035b      	lsls	r3, r3, #13
    73ce:	431f      	orrs	r7, r3
    73d0:	4653      	mov	r3, sl
    73d2:	4a55      	ldr	r2, [pc, #340]	; (7528 <__aeabi_ddiv+0x1c4>)
    73d4:	0f5b      	lsrs	r3, r3, #29
    73d6:	00ff      	lsls	r7, r7, #3
    73d8:	431f      	orrs	r7, r3
    73da:	4694      	mov	ip, r2
    73dc:	4653      	mov	r3, sl
    73de:	2100      	movs	r1, #0
    73e0:	00db      	lsls	r3, r3, #3
    73e2:	4460      	add	r0, ip
    73e4:	4642      	mov	r2, r8
    73e6:	4062      	eors	r2, r4
    73e8:	4692      	mov	sl, r2
    73ea:	1a2d      	subs	r5, r5, r0
    73ec:	430e      	orrs	r6, r1
    73ee:	2e0f      	cmp	r6, #15
    73f0:	d900      	bls.n	73f4 <__aeabi_ddiv+0x90>
    73f2:	e0a1      	b.n	7538 <__aeabi_ddiv+0x1d4>
    73f4:	484d      	ldr	r0, [pc, #308]	; (752c <__aeabi_ddiv+0x1c8>)
    73f6:	00b6      	lsls	r6, r6, #2
    73f8:	5980      	ldr	r0, [r0, r6]
    73fa:	4687      	mov	pc, r0
    73fc:	465b      	mov	r3, fp
    73fe:	431e      	orrs	r6, r3
    7400:	d000      	beq.n	7404 <__aeabi_ddiv+0xa0>
    7402:	e076      	b.n	74f2 <__aeabi_ddiv+0x18e>
    7404:	2300      	movs	r3, #0
    7406:	469b      	mov	fp, r3
    7408:	4699      	mov	r9, r3
    740a:	3302      	adds	r3, #2
    740c:	2608      	movs	r6, #8
    740e:	9300      	str	r3, [sp, #0]
    7410:	e7ce      	b.n	73b0 <__aeabi_ddiv+0x4c>
    7412:	4699      	mov	r9, r3
    7414:	4643      	mov	r3, r8
    7416:	46bb      	mov	fp, r7
    7418:	9301      	str	r3, [sp, #4]
    741a:	9100      	str	r1, [sp, #0]
    741c:	9b00      	ldr	r3, [sp, #0]
    741e:	2b02      	cmp	r3, #2
    7420:	d16b      	bne.n	74fa <__aeabi_ddiv+0x196>
    7422:	9b01      	ldr	r3, [sp, #4]
    7424:	469a      	mov	sl, r3
    7426:	2100      	movs	r1, #0
    7428:	4653      	mov	r3, sl
    742a:	2201      	movs	r2, #1
    742c:	2700      	movs	r7, #0
    742e:	4689      	mov	r9, r1
    7430:	401a      	ands	r2, r3
    7432:	4b3c      	ldr	r3, [pc, #240]	; (7524 <__aeabi_ddiv+0x1c0>)
    7434:	2100      	movs	r1, #0
    7436:	033f      	lsls	r7, r7, #12
    7438:	0d0c      	lsrs	r4, r1, #20
    743a:	0524      	lsls	r4, r4, #20
    743c:	0b3f      	lsrs	r7, r7, #12
    743e:	4327      	orrs	r7, r4
    7440:	4c3b      	ldr	r4, [pc, #236]	; (7530 <__aeabi_ddiv+0x1cc>)
    7442:	051b      	lsls	r3, r3, #20
    7444:	4027      	ands	r7, r4
    7446:	431f      	orrs	r7, r3
    7448:	007f      	lsls	r7, r7, #1
    744a:	07d2      	lsls	r2, r2, #31
    744c:	087f      	lsrs	r7, r7, #1
    744e:	4317      	orrs	r7, r2
    7450:	4648      	mov	r0, r9
    7452:	1c39      	adds	r1, r7, #0
    7454:	b007      	add	sp, #28
    7456:	bc3c      	pop	{r2, r3, r4, r5}
    7458:	4690      	mov	r8, r2
    745a:	4699      	mov	r9, r3
    745c:	46a2      	mov	sl, r4
    745e:	46ab      	mov	fp, r5
    7460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7462:	4303      	orrs	r3, r0
    7464:	d03e      	beq.n	74e4 <__aeabi_ddiv+0x180>
    7466:	465b      	mov	r3, fp
    7468:	2b00      	cmp	r3, #0
    746a:	d100      	bne.n	746e <__aeabi_ddiv+0x10a>
    746c:	e19c      	b.n	77a8 <__aeabi_ddiv+0x444>
    746e:	4658      	mov	r0, fp
    7470:	f7ff f88e 	bl	6590 <__clzsi2>
    7474:	2328      	movs	r3, #40	; 0x28
    7476:	1c31      	adds	r1, r6, #0
    7478:	1a1b      	subs	r3, r3, r0
    747a:	1c02      	adds	r2, r0, #0
    747c:	465f      	mov	r7, fp
    747e:	40d9      	lsrs	r1, r3
    7480:	3a08      	subs	r2, #8
    7482:	4097      	lsls	r7, r2
    7484:	1c0b      	adds	r3, r1, #0
    7486:	4096      	lsls	r6, r2
    7488:	433b      	orrs	r3, r7
    748a:	469b      	mov	fp, r3
    748c:	46b1      	mov	r9, r6
    748e:	2300      	movs	r3, #0
    7490:	4d28      	ldr	r5, [pc, #160]	; (7534 <__aeabi_ddiv+0x1d0>)
    7492:	2600      	movs	r6, #0
    7494:	1a2d      	subs	r5, r5, r0
    7496:	9300      	str	r3, [sp, #0]
    7498:	e78a      	b.n	73b0 <__aeabi_ddiv+0x4c>
    749a:	4652      	mov	r2, sl
    749c:	2103      	movs	r1, #3
    749e:	433a      	orrs	r2, r7
    74a0:	d1a0      	bne.n	73e4 <__aeabi_ddiv+0x80>
    74a2:	2700      	movs	r7, #0
    74a4:	2300      	movs	r3, #0
    74a6:	2102      	movs	r1, #2
    74a8:	e79c      	b.n	73e4 <__aeabi_ddiv+0x80>
    74aa:	4652      	mov	r2, sl
    74ac:	433a      	orrs	r2, r7
    74ae:	d015      	beq.n	74dc <__aeabi_ddiv+0x178>
    74b0:	2f00      	cmp	r7, #0
    74b2:	d100      	bne.n	74b6 <__aeabi_ddiv+0x152>
    74b4:	e185      	b.n	77c2 <__aeabi_ddiv+0x45e>
    74b6:	1c38      	adds	r0, r7, #0
    74b8:	f7ff f86a 	bl	6590 <__clzsi2>
    74bc:	1c02      	adds	r2, r0, #0
    74be:	2128      	movs	r1, #40	; 0x28
    74c0:	4650      	mov	r0, sl
    74c2:	1a89      	subs	r1, r1, r2
    74c4:	1c13      	adds	r3, r2, #0
    74c6:	40c8      	lsrs	r0, r1
    74c8:	4651      	mov	r1, sl
    74ca:	3b08      	subs	r3, #8
    74cc:	4099      	lsls	r1, r3
    74ce:	409f      	lsls	r7, r3
    74d0:	1c0b      	adds	r3, r1, #0
    74d2:	4307      	orrs	r7, r0
    74d4:	4817      	ldr	r0, [pc, #92]	; (7534 <__aeabi_ddiv+0x1d0>)
    74d6:	2100      	movs	r1, #0
    74d8:	1a80      	subs	r0, r0, r2
    74da:	e783      	b.n	73e4 <__aeabi_ddiv+0x80>
    74dc:	2700      	movs	r7, #0
    74de:	2300      	movs	r3, #0
    74e0:	2101      	movs	r1, #1
    74e2:	e77f      	b.n	73e4 <__aeabi_ddiv+0x80>
    74e4:	2300      	movs	r3, #0
    74e6:	469b      	mov	fp, r3
    74e8:	4699      	mov	r9, r3
    74ea:	3301      	adds	r3, #1
    74ec:	2604      	movs	r6, #4
    74ee:	9300      	str	r3, [sp, #0]
    74f0:	e75e      	b.n	73b0 <__aeabi_ddiv+0x4c>
    74f2:	2303      	movs	r3, #3
    74f4:	260c      	movs	r6, #12
    74f6:	9300      	str	r3, [sp, #0]
    74f8:	e75a      	b.n	73b0 <__aeabi_ddiv+0x4c>
    74fa:	2b03      	cmp	r3, #3
    74fc:	d100      	bne.n	7500 <__aeabi_ddiv+0x19c>
    74fe:	e23c      	b.n	797a <__aeabi_ddiv+0x616>
    7500:	2b01      	cmp	r3, #1
    7502:	d000      	beq.n	7506 <__aeabi_ddiv+0x1a2>
    7504:	e1bf      	b.n	7886 <__aeabi_ddiv+0x522>
    7506:	1c1a      	adds	r2, r3, #0
    7508:	9b01      	ldr	r3, [sp, #4]
    750a:	401a      	ands	r2, r3
    750c:	2100      	movs	r1, #0
    750e:	2300      	movs	r3, #0
    7510:	2700      	movs	r7, #0
    7512:	4689      	mov	r9, r1
    7514:	e78e      	b.n	7434 <__aeabi_ddiv+0xd0>
    7516:	2300      	movs	r3, #0
    7518:	2780      	movs	r7, #128	; 0x80
    751a:	4699      	mov	r9, r3
    751c:	2200      	movs	r2, #0
    751e:	033f      	lsls	r7, r7, #12
    7520:	4b00      	ldr	r3, [pc, #0]	; (7524 <__aeabi_ddiv+0x1c0>)
    7522:	e787      	b.n	7434 <__aeabi_ddiv+0xd0>
    7524:	000007ff 	.word	0x000007ff
    7528:	fffffc01 	.word	0xfffffc01
    752c:	00008b08 	.word	0x00008b08
    7530:	800fffff 	.word	0x800fffff
    7534:	fffffc0d 	.word	0xfffffc0d
    7538:	45bb      	cmp	fp, r7
    753a:	d900      	bls.n	753e <__aeabi_ddiv+0x1da>
    753c:	e151      	b.n	77e2 <__aeabi_ddiv+0x47e>
    753e:	d100      	bne.n	7542 <__aeabi_ddiv+0x1de>
    7540:	e14c      	b.n	77dc <__aeabi_ddiv+0x478>
    7542:	464a      	mov	r2, r9
    7544:	9203      	str	r2, [sp, #12]
    7546:	2200      	movs	r2, #0
    7548:	465c      	mov	r4, fp
    754a:	4690      	mov	r8, r2
    754c:	3d01      	subs	r5, #1
    754e:	0e18      	lsrs	r0, r3, #24
    7550:	023f      	lsls	r7, r7, #8
    7552:	4338      	orrs	r0, r7
    7554:	021b      	lsls	r3, r3, #8
    7556:	9301      	str	r3, [sp, #4]
    7558:	0c03      	lsrs	r3, r0, #16
    755a:	4699      	mov	r9, r3
    755c:	0403      	lsls	r3, r0, #16
    755e:	0c1b      	lsrs	r3, r3, #16
    7560:	4649      	mov	r1, r9
    7562:	1c06      	adds	r6, r0, #0
    7564:	1c20      	adds	r0, r4, #0
    7566:	1c1f      	adds	r7, r3, #0
    7568:	9300      	str	r3, [sp, #0]
    756a:	f7fe fe8f 	bl	628c <__aeabi_uidiv>
    756e:	1c02      	adds	r2, r0, #0
    7570:	437a      	muls	r2, r7
    7572:	9002      	str	r0, [sp, #8]
    7574:	4649      	mov	r1, r9
    7576:	1c20      	adds	r0, r4, #0
    7578:	1c17      	adds	r7, r2, #0
    757a:	f7fe ff0d 	bl	6398 <__aeabi_uidivmod>
    757e:	9b03      	ldr	r3, [sp, #12]
    7580:	0409      	lsls	r1, r1, #16
    7582:	0c1b      	lsrs	r3, r3, #16
    7584:	4319      	orrs	r1, r3
    7586:	428f      	cmp	r7, r1
    7588:	d90c      	bls.n	75a4 <__aeabi_ddiv+0x240>
    758a:	9b02      	ldr	r3, [sp, #8]
    758c:	1989      	adds	r1, r1, r6
    758e:	3b01      	subs	r3, #1
    7590:	428e      	cmp	r6, r1
    7592:	d900      	bls.n	7596 <__aeabi_ddiv+0x232>
    7594:	e152      	b.n	783c <__aeabi_ddiv+0x4d8>
    7596:	428f      	cmp	r7, r1
    7598:	d800      	bhi.n	759c <__aeabi_ddiv+0x238>
    759a:	e14f      	b.n	783c <__aeabi_ddiv+0x4d8>
    759c:	9b02      	ldr	r3, [sp, #8]
    759e:	1989      	adds	r1, r1, r6
    75a0:	3b02      	subs	r3, #2
    75a2:	9302      	str	r3, [sp, #8]
    75a4:	1bcc      	subs	r4, r1, r7
    75a6:	1c20      	adds	r0, r4, #0
    75a8:	4649      	mov	r1, r9
    75aa:	f7fe fe6f 	bl	628c <__aeabi_uidiv>
    75ae:	9f00      	ldr	r7, [sp, #0]
    75b0:	4683      	mov	fp, r0
    75b2:	4347      	muls	r7, r0
    75b4:	4649      	mov	r1, r9
    75b6:	1c20      	adds	r0, r4, #0
    75b8:	f7fe feee 	bl	6398 <__aeabi_uidivmod>
    75bc:	9a03      	ldr	r2, [sp, #12]
    75be:	040b      	lsls	r3, r1, #16
    75c0:	0414      	lsls	r4, r2, #16
    75c2:	0c24      	lsrs	r4, r4, #16
    75c4:	4323      	orrs	r3, r4
    75c6:	429f      	cmp	r7, r3
    75c8:	d90d      	bls.n	75e6 <__aeabi_ddiv+0x282>
    75ca:	465a      	mov	r2, fp
    75cc:	199b      	adds	r3, r3, r6
    75ce:	3a01      	subs	r2, #1
    75d0:	429e      	cmp	r6, r3
    75d2:	d900      	bls.n	75d6 <__aeabi_ddiv+0x272>
    75d4:	e130      	b.n	7838 <__aeabi_ddiv+0x4d4>
    75d6:	429f      	cmp	r7, r3
    75d8:	d800      	bhi.n	75dc <__aeabi_ddiv+0x278>
    75da:	e12d      	b.n	7838 <__aeabi_ddiv+0x4d4>
    75dc:	2202      	movs	r2, #2
    75de:	4252      	negs	r2, r2
    75e0:	4694      	mov	ip, r2
    75e2:	199b      	adds	r3, r3, r6
    75e4:	44e3      	add	fp, ip
    75e6:	9a02      	ldr	r2, [sp, #8]
    75e8:	1bdb      	subs	r3, r3, r7
    75ea:	0417      	lsls	r7, r2, #16
    75ec:	465a      	mov	r2, fp
    75ee:	433a      	orrs	r2, r7
    75f0:	4693      	mov	fp, r2
    75f2:	9c01      	ldr	r4, [sp, #4]
    75f4:	0c17      	lsrs	r7, r2, #16
    75f6:	0c22      	lsrs	r2, r4, #16
    75f8:	1c10      	adds	r0, r2, #0
    75fa:	9204      	str	r2, [sp, #16]
    75fc:	465a      	mov	r2, fp
    75fe:	0411      	lsls	r1, r2, #16
    7600:	0422      	lsls	r2, r4, #16
    7602:	0c12      	lsrs	r2, r2, #16
    7604:	1c14      	adds	r4, r2, #0
    7606:	0c09      	lsrs	r1, r1, #16
    7608:	437c      	muls	r4, r7
    760a:	9205      	str	r2, [sp, #20]
    760c:	434a      	muls	r2, r1
    760e:	4341      	muls	r1, r0
    7610:	4347      	muls	r7, r0
    7612:	1861      	adds	r1, r4, r1
    7614:	0c10      	lsrs	r0, r2, #16
    7616:	1809      	adds	r1, r1, r0
    7618:	428c      	cmp	r4, r1
    761a:	d903      	bls.n	7624 <__aeabi_ddiv+0x2c0>
    761c:	2080      	movs	r0, #128	; 0x80
    761e:	0240      	lsls	r0, r0, #9
    7620:	4684      	mov	ip, r0
    7622:	4467      	add	r7, ip
    7624:	0c0c      	lsrs	r4, r1, #16
    7626:	0412      	lsls	r2, r2, #16
    7628:	0408      	lsls	r0, r1, #16
    762a:	0c12      	lsrs	r2, r2, #16
    762c:	193c      	adds	r4, r7, r4
    762e:	1881      	adds	r1, r0, r2
    7630:	42a3      	cmp	r3, r4
    7632:	d200      	bcs.n	7636 <__aeabi_ddiv+0x2d2>
    7634:	e0e5      	b.n	7802 <__aeabi_ddiv+0x49e>
    7636:	d100      	bne.n	763a <__aeabi_ddiv+0x2d6>
    7638:	e0df      	b.n	77fa <__aeabi_ddiv+0x496>
    763a:	1b1f      	subs	r7, r3, r4
    763c:	4643      	mov	r3, r8
    763e:	1a5c      	subs	r4, r3, r1
    7640:	45a0      	cmp	r8, r4
    7642:	4192      	sbcs	r2, r2
    7644:	4252      	negs	r2, r2
    7646:	1abf      	subs	r7, r7, r2
    7648:	42b7      	cmp	r7, r6
    764a:	d100      	bne.n	764e <__aeabi_ddiv+0x2ea>
    764c:	e10e      	b.n	786c <__aeabi_ddiv+0x508>
    764e:	1c38      	adds	r0, r7, #0
    7650:	4649      	mov	r1, r9
    7652:	f7fe fe1b 	bl	628c <__aeabi_uidiv>
    7656:	9b00      	ldr	r3, [sp, #0]
    7658:	9002      	str	r0, [sp, #8]
    765a:	4343      	muls	r3, r0
    765c:	4649      	mov	r1, r9
    765e:	1c38      	adds	r0, r7, #0
    7660:	4698      	mov	r8, r3
    7662:	f7fe fe99 	bl	6398 <__aeabi_uidivmod>
    7666:	0c23      	lsrs	r3, r4, #16
    7668:	040f      	lsls	r7, r1, #16
    766a:	431f      	orrs	r7, r3
    766c:	45b8      	cmp	r8, r7
    766e:	d90c      	bls.n	768a <__aeabi_ddiv+0x326>
    7670:	9b02      	ldr	r3, [sp, #8]
    7672:	19bf      	adds	r7, r7, r6
    7674:	3b01      	subs	r3, #1
    7676:	42be      	cmp	r6, r7
    7678:	d900      	bls.n	767c <__aeabi_ddiv+0x318>
    767a:	e0fb      	b.n	7874 <__aeabi_ddiv+0x510>
    767c:	45b8      	cmp	r8, r7
    767e:	d800      	bhi.n	7682 <__aeabi_ddiv+0x31e>
    7680:	e0f8      	b.n	7874 <__aeabi_ddiv+0x510>
    7682:	9b02      	ldr	r3, [sp, #8]
    7684:	19bf      	adds	r7, r7, r6
    7686:	3b02      	subs	r3, #2
    7688:	9302      	str	r3, [sp, #8]
    768a:	4643      	mov	r3, r8
    768c:	1aff      	subs	r7, r7, r3
    768e:	4649      	mov	r1, r9
    7690:	1c38      	adds	r0, r7, #0
    7692:	f7fe fdfb 	bl	628c <__aeabi_uidiv>
    7696:	9b00      	ldr	r3, [sp, #0]
    7698:	9003      	str	r0, [sp, #12]
    769a:	4343      	muls	r3, r0
    769c:	4649      	mov	r1, r9
    769e:	1c38      	adds	r0, r7, #0
    76a0:	4698      	mov	r8, r3
    76a2:	f7fe fe79 	bl	6398 <__aeabi_uidivmod>
    76a6:	0424      	lsls	r4, r4, #16
    76a8:	0409      	lsls	r1, r1, #16
    76aa:	0c24      	lsrs	r4, r4, #16
    76ac:	4321      	orrs	r1, r4
    76ae:	4588      	cmp	r8, r1
    76b0:	d90c      	bls.n	76cc <__aeabi_ddiv+0x368>
    76b2:	9b03      	ldr	r3, [sp, #12]
    76b4:	1989      	adds	r1, r1, r6
    76b6:	3b01      	subs	r3, #1
    76b8:	428e      	cmp	r6, r1
    76ba:	d900      	bls.n	76be <__aeabi_ddiv+0x35a>
    76bc:	e0dc      	b.n	7878 <__aeabi_ddiv+0x514>
    76be:	4588      	cmp	r8, r1
    76c0:	d800      	bhi.n	76c4 <__aeabi_ddiv+0x360>
    76c2:	e0d9      	b.n	7878 <__aeabi_ddiv+0x514>
    76c4:	9b03      	ldr	r3, [sp, #12]
    76c6:	1989      	adds	r1, r1, r6
    76c8:	3b02      	subs	r3, #2
    76ca:	9303      	str	r3, [sp, #12]
    76cc:	4643      	mov	r3, r8
    76ce:	1ac9      	subs	r1, r1, r3
    76d0:	9b02      	ldr	r3, [sp, #8]
    76d2:	9a03      	ldr	r2, [sp, #12]
    76d4:	041b      	lsls	r3, r3, #16
    76d6:	9c05      	ldr	r4, [sp, #20]
    76d8:	431a      	orrs	r2, r3
    76da:	0c10      	lsrs	r0, r2, #16
    76dc:	0413      	lsls	r3, r2, #16
    76de:	4691      	mov	r9, r2
    76e0:	1c22      	adds	r2, r4, #0
    76e2:	9f04      	ldr	r7, [sp, #16]
    76e4:	0c1b      	lsrs	r3, r3, #16
    76e6:	435a      	muls	r2, r3
    76e8:	4344      	muls	r4, r0
    76ea:	437b      	muls	r3, r7
    76ec:	4378      	muls	r0, r7
    76ee:	18e3      	adds	r3, r4, r3
    76f0:	0c17      	lsrs	r7, r2, #16
    76f2:	19db      	adds	r3, r3, r7
    76f4:	429c      	cmp	r4, r3
    76f6:	d903      	bls.n	7700 <__aeabi_ddiv+0x39c>
    76f8:	2480      	movs	r4, #128	; 0x80
    76fa:	0264      	lsls	r4, r4, #9
    76fc:	46a4      	mov	ip, r4
    76fe:	4460      	add	r0, ip
    7700:	0c1c      	lsrs	r4, r3, #16
    7702:	0412      	lsls	r2, r2, #16
    7704:	041b      	lsls	r3, r3, #16
    7706:	0c12      	lsrs	r2, r2, #16
    7708:	1900      	adds	r0, r0, r4
    770a:	189b      	adds	r3, r3, r2
    770c:	4281      	cmp	r1, r0
    770e:	d200      	bcs.n	7712 <__aeabi_ddiv+0x3ae>
    7710:	e096      	b.n	7840 <__aeabi_ddiv+0x4dc>
    7712:	d100      	bne.n	7716 <__aeabi_ddiv+0x3b2>
    7714:	e0fc      	b.n	7910 <__aeabi_ddiv+0x5ac>
    7716:	464a      	mov	r2, r9
    7718:	2301      	movs	r3, #1
    771a:	431a      	orrs	r2, r3
    771c:	4691      	mov	r9, r2
    771e:	4b9b      	ldr	r3, [pc, #620]	; (798c <__aeabi_ddiv+0x628>)
    7720:	18eb      	adds	r3, r5, r3
    7722:	2b00      	cmp	r3, #0
    7724:	dc00      	bgt.n	7728 <__aeabi_ddiv+0x3c4>
    7726:	e099      	b.n	785c <__aeabi_ddiv+0x4f8>
    7728:	464a      	mov	r2, r9
    772a:	0752      	lsls	r2, r2, #29
    772c:	d00a      	beq.n	7744 <__aeabi_ddiv+0x3e0>
    772e:	220f      	movs	r2, #15
    7730:	4649      	mov	r1, r9
    7732:	400a      	ands	r2, r1
    7734:	2a04      	cmp	r2, #4
    7736:	d005      	beq.n	7744 <__aeabi_ddiv+0x3e0>
    7738:	3104      	adds	r1, #4
    773a:	4549      	cmp	r1, r9
    773c:	4192      	sbcs	r2, r2
    773e:	4689      	mov	r9, r1
    7740:	4252      	negs	r2, r2
    7742:	4493      	add	fp, r2
    7744:	465a      	mov	r2, fp
    7746:	01d2      	lsls	r2, r2, #7
    7748:	d506      	bpl.n	7758 <__aeabi_ddiv+0x3f4>
    774a:	465a      	mov	r2, fp
    774c:	4b90      	ldr	r3, [pc, #576]	; (7990 <__aeabi_ddiv+0x62c>)
    774e:	401a      	ands	r2, r3
    7750:	2380      	movs	r3, #128	; 0x80
    7752:	4693      	mov	fp, r2
    7754:	00db      	lsls	r3, r3, #3
    7756:	18eb      	adds	r3, r5, r3
    7758:	4a8e      	ldr	r2, [pc, #568]	; (7994 <__aeabi_ddiv+0x630>)
    775a:	4293      	cmp	r3, r2
    775c:	dd00      	ble.n	7760 <__aeabi_ddiv+0x3fc>
    775e:	e662      	b.n	7426 <__aeabi_ddiv+0xc2>
    7760:	464a      	mov	r2, r9
    7762:	4659      	mov	r1, fp
    7764:	08d2      	lsrs	r2, r2, #3
    7766:	0749      	lsls	r1, r1, #29
    7768:	4311      	orrs	r1, r2
    776a:	465a      	mov	r2, fp
    776c:	4689      	mov	r9, r1
    776e:	0257      	lsls	r7, r2, #9
    7770:	4651      	mov	r1, sl
    7772:	2201      	movs	r2, #1
    7774:	055b      	lsls	r3, r3, #21
    7776:	0b3f      	lsrs	r7, r7, #12
    7778:	0d5b      	lsrs	r3, r3, #21
    777a:	400a      	ands	r2, r1
    777c:	e65a      	b.n	7434 <__aeabi_ddiv+0xd0>
    777e:	2080      	movs	r0, #128	; 0x80
    7780:	465a      	mov	r2, fp
    7782:	0300      	lsls	r0, r0, #12
    7784:	4202      	tst	r2, r0
    7786:	d008      	beq.n	779a <__aeabi_ddiv+0x436>
    7788:	4207      	tst	r7, r0
    778a:	d106      	bne.n	779a <__aeabi_ddiv+0x436>
    778c:	4307      	orrs	r7, r0
    778e:	033f      	lsls	r7, r7, #12
    7790:	4699      	mov	r9, r3
    7792:	0b3f      	lsrs	r7, r7, #12
    7794:	4642      	mov	r2, r8
    7796:	4b80      	ldr	r3, [pc, #512]	; (7998 <__aeabi_ddiv+0x634>)
    7798:	e64c      	b.n	7434 <__aeabi_ddiv+0xd0>
    779a:	465f      	mov	r7, fp
    779c:	4307      	orrs	r7, r0
    779e:	033f      	lsls	r7, r7, #12
    77a0:	0b3f      	lsrs	r7, r7, #12
    77a2:	1c22      	adds	r2, r4, #0
    77a4:	4b7c      	ldr	r3, [pc, #496]	; (7998 <__aeabi_ddiv+0x634>)
    77a6:	e645      	b.n	7434 <__aeabi_ddiv+0xd0>
    77a8:	f7fe fef2 	bl	6590 <__clzsi2>
    77ac:	1c03      	adds	r3, r0, #0
    77ae:	3020      	adds	r0, #32
    77b0:	2827      	cmp	r0, #39	; 0x27
    77b2:	dc00      	bgt.n	77b6 <__aeabi_ddiv+0x452>
    77b4:	e65e      	b.n	7474 <__aeabi_ddiv+0x110>
    77b6:	3b08      	subs	r3, #8
    77b8:	409e      	lsls	r6, r3
    77ba:	2300      	movs	r3, #0
    77bc:	46b3      	mov	fp, r6
    77be:	4699      	mov	r9, r3
    77c0:	e665      	b.n	748e <__aeabi_ddiv+0x12a>
    77c2:	4650      	mov	r0, sl
    77c4:	f7fe fee4 	bl	6590 <__clzsi2>
    77c8:	1c02      	adds	r2, r0, #0
    77ca:	3220      	adds	r2, #32
    77cc:	2a27      	cmp	r2, #39	; 0x27
    77ce:	dc00      	bgt.n	77d2 <__aeabi_ddiv+0x46e>
    77d0:	e675      	b.n	74be <__aeabi_ddiv+0x15a>
    77d2:	4657      	mov	r7, sl
    77d4:	3808      	subs	r0, #8
    77d6:	4087      	lsls	r7, r0
    77d8:	2300      	movs	r3, #0
    77da:	e67b      	b.n	74d4 <__aeabi_ddiv+0x170>
    77dc:	4599      	cmp	r9, r3
    77de:	d200      	bcs.n	77e2 <__aeabi_ddiv+0x47e>
    77e0:	e6af      	b.n	7542 <__aeabi_ddiv+0x1de>
    77e2:	465a      	mov	r2, fp
    77e4:	4659      	mov	r1, fp
    77e6:	0854      	lsrs	r4, r2, #1
    77e8:	464a      	mov	r2, r9
    77ea:	07c8      	lsls	r0, r1, #31
    77ec:	0852      	lsrs	r2, r2, #1
    77ee:	4302      	orrs	r2, r0
    77f0:	9203      	str	r2, [sp, #12]
    77f2:	464a      	mov	r2, r9
    77f4:	07d2      	lsls	r2, r2, #31
    77f6:	4690      	mov	r8, r2
    77f8:	e6a9      	b.n	754e <__aeabi_ddiv+0x1ea>
    77fa:	2700      	movs	r7, #0
    77fc:	4588      	cmp	r8, r1
    77fe:	d300      	bcc.n	7802 <__aeabi_ddiv+0x49e>
    7800:	e71c      	b.n	763c <__aeabi_ddiv+0x2d8>
    7802:	9f01      	ldr	r7, [sp, #4]
    7804:	465a      	mov	r2, fp
    7806:	46bc      	mov	ip, r7
    7808:	44e0      	add	r8, ip
    780a:	45b8      	cmp	r8, r7
    780c:	41bf      	sbcs	r7, r7
    780e:	427f      	negs	r7, r7
    7810:	19bf      	adds	r7, r7, r6
    7812:	18ff      	adds	r7, r7, r3
    7814:	3a01      	subs	r2, #1
    7816:	42be      	cmp	r6, r7
    7818:	d206      	bcs.n	7828 <__aeabi_ddiv+0x4c4>
    781a:	42bc      	cmp	r4, r7
    781c:	d85f      	bhi.n	78de <__aeabi_ddiv+0x57a>
    781e:	d100      	bne.n	7822 <__aeabi_ddiv+0x4be>
    7820:	e09f      	b.n	7962 <__aeabi_ddiv+0x5fe>
    7822:	1b3f      	subs	r7, r7, r4
    7824:	4693      	mov	fp, r2
    7826:	e709      	b.n	763c <__aeabi_ddiv+0x2d8>
    7828:	42b7      	cmp	r7, r6
    782a:	d1fa      	bne.n	7822 <__aeabi_ddiv+0x4be>
    782c:	9b01      	ldr	r3, [sp, #4]
    782e:	4543      	cmp	r3, r8
    7830:	d9f3      	bls.n	781a <__aeabi_ddiv+0x4b6>
    7832:	1b37      	subs	r7, r6, r4
    7834:	4693      	mov	fp, r2
    7836:	e701      	b.n	763c <__aeabi_ddiv+0x2d8>
    7838:	4693      	mov	fp, r2
    783a:	e6d4      	b.n	75e6 <__aeabi_ddiv+0x282>
    783c:	9302      	str	r3, [sp, #8]
    783e:	e6b1      	b.n	75a4 <__aeabi_ddiv+0x240>
    7840:	464a      	mov	r2, r9
    7842:	1989      	adds	r1, r1, r6
    7844:	3a01      	subs	r2, #1
    7846:	428e      	cmp	r6, r1
    7848:	d918      	bls.n	787c <__aeabi_ddiv+0x518>
    784a:	4691      	mov	r9, r2
    784c:	4281      	cmp	r1, r0
    784e:	d000      	beq.n	7852 <__aeabi_ddiv+0x4ee>
    7850:	e761      	b.n	7716 <__aeabi_ddiv+0x3b2>
    7852:	9a01      	ldr	r2, [sp, #4]
    7854:	429a      	cmp	r2, r3
    7856:	d000      	beq.n	785a <__aeabi_ddiv+0x4f6>
    7858:	e75d      	b.n	7716 <__aeabi_ddiv+0x3b2>
    785a:	e760      	b.n	771e <__aeabi_ddiv+0x3ba>
    785c:	4f4f      	ldr	r7, [pc, #316]	; (799c <__aeabi_ddiv+0x638>)
    785e:	1b7f      	subs	r7, r7, r5
    7860:	2f38      	cmp	r7, #56	; 0x38
    7862:	dd13      	ble.n	788c <__aeabi_ddiv+0x528>
    7864:	2201      	movs	r2, #1
    7866:	4653      	mov	r3, sl
    7868:	401a      	ands	r2, r3
    786a:	e64f      	b.n	750c <__aeabi_ddiv+0x1a8>
    786c:	2301      	movs	r3, #1
    786e:	425b      	negs	r3, r3
    7870:	4699      	mov	r9, r3
    7872:	e754      	b.n	771e <__aeabi_ddiv+0x3ba>
    7874:	9302      	str	r3, [sp, #8]
    7876:	e708      	b.n	768a <__aeabi_ddiv+0x326>
    7878:	9303      	str	r3, [sp, #12]
    787a:	e727      	b.n	76cc <__aeabi_ddiv+0x368>
    787c:	4288      	cmp	r0, r1
    787e:	d83c      	bhi.n	78fa <__aeabi_ddiv+0x596>
    7880:	d074      	beq.n	796c <__aeabi_ddiv+0x608>
    7882:	4691      	mov	r9, r2
    7884:	e747      	b.n	7716 <__aeabi_ddiv+0x3b2>
    7886:	9b01      	ldr	r3, [sp, #4]
    7888:	469a      	mov	sl, r3
    788a:	e748      	b.n	771e <__aeabi_ddiv+0x3ba>
    788c:	2f1f      	cmp	r7, #31
    788e:	dc44      	bgt.n	791a <__aeabi_ddiv+0x5b6>
    7890:	4b43      	ldr	r3, [pc, #268]	; (79a0 <__aeabi_ddiv+0x63c>)
    7892:	464a      	mov	r2, r9
    7894:	469c      	mov	ip, r3
    7896:	465b      	mov	r3, fp
    7898:	4465      	add	r5, ip
    789a:	40fa      	lsrs	r2, r7
    789c:	40ab      	lsls	r3, r5
    789e:	4313      	orrs	r3, r2
    78a0:	464a      	mov	r2, r9
    78a2:	40aa      	lsls	r2, r5
    78a4:	1c15      	adds	r5, r2, #0
    78a6:	1e6a      	subs	r2, r5, #1
    78a8:	4195      	sbcs	r5, r2
    78aa:	465a      	mov	r2, fp
    78ac:	40fa      	lsrs	r2, r7
    78ae:	432b      	orrs	r3, r5
    78b0:	1c17      	adds	r7, r2, #0
    78b2:	075a      	lsls	r2, r3, #29
    78b4:	d009      	beq.n	78ca <__aeabi_ddiv+0x566>
    78b6:	220f      	movs	r2, #15
    78b8:	401a      	ands	r2, r3
    78ba:	2a04      	cmp	r2, #4
    78bc:	d005      	beq.n	78ca <__aeabi_ddiv+0x566>
    78be:	1d1a      	adds	r2, r3, #4
    78c0:	429a      	cmp	r2, r3
    78c2:	419b      	sbcs	r3, r3
    78c4:	425b      	negs	r3, r3
    78c6:	18ff      	adds	r7, r7, r3
    78c8:	1c13      	adds	r3, r2, #0
    78ca:	023a      	lsls	r2, r7, #8
    78cc:	d53e      	bpl.n	794c <__aeabi_ddiv+0x5e8>
    78ce:	4653      	mov	r3, sl
    78d0:	2201      	movs	r2, #1
    78d2:	2100      	movs	r1, #0
    78d4:	401a      	ands	r2, r3
    78d6:	2700      	movs	r7, #0
    78d8:	2301      	movs	r3, #1
    78da:	4689      	mov	r9, r1
    78dc:	e5aa      	b.n	7434 <__aeabi_ddiv+0xd0>
    78de:	2302      	movs	r3, #2
    78e0:	425b      	negs	r3, r3
    78e2:	469c      	mov	ip, r3
    78e4:	9a01      	ldr	r2, [sp, #4]
    78e6:	44e3      	add	fp, ip
    78e8:	4694      	mov	ip, r2
    78ea:	44e0      	add	r8, ip
    78ec:	4590      	cmp	r8, r2
    78ee:	419b      	sbcs	r3, r3
    78f0:	425b      	negs	r3, r3
    78f2:	199b      	adds	r3, r3, r6
    78f4:	19df      	adds	r7, r3, r7
    78f6:	1b3f      	subs	r7, r7, r4
    78f8:	e6a0      	b.n	763c <__aeabi_ddiv+0x2d8>
    78fa:	9f01      	ldr	r7, [sp, #4]
    78fc:	464a      	mov	r2, r9
    78fe:	007c      	lsls	r4, r7, #1
    7900:	42bc      	cmp	r4, r7
    7902:	41bf      	sbcs	r7, r7
    7904:	427f      	negs	r7, r7
    7906:	19bf      	adds	r7, r7, r6
    7908:	3a02      	subs	r2, #2
    790a:	19c9      	adds	r1, r1, r7
    790c:	9401      	str	r4, [sp, #4]
    790e:	e79c      	b.n	784a <__aeabi_ddiv+0x4e6>
    7910:	2b00      	cmp	r3, #0
    7912:	d195      	bne.n	7840 <__aeabi_ddiv+0x4dc>
    7914:	2200      	movs	r2, #0
    7916:	9201      	str	r2, [sp, #4]
    7918:	e79b      	b.n	7852 <__aeabi_ddiv+0x4ee>
    791a:	465a      	mov	r2, fp
    791c:	4b21      	ldr	r3, [pc, #132]	; (79a4 <__aeabi_ddiv+0x640>)
    791e:	1b5b      	subs	r3, r3, r5
    7920:	40da      	lsrs	r2, r3
    7922:	2f20      	cmp	r7, #32
    7924:	d027      	beq.n	7976 <__aeabi_ddiv+0x612>
    7926:	4b20      	ldr	r3, [pc, #128]	; (79a8 <__aeabi_ddiv+0x644>)
    7928:	469c      	mov	ip, r3
    792a:	465b      	mov	r3, fp
    792c:	4465      	add	r5, ip
    792e:	40ab      	lsls	r3, r5
    7930:	4649      	mov	r1, r9
    7932:	430b      	orrs	r3, r1
    7934:	1e59      	subs	r1, r3, #1
    7936:	418b      	sbcs	r3, r1
    7938:	4313      	orrs	r3, r2
    793a:	2207      	movs	r2, #7
    793c:	2700      	movs	r7, #0
    793e:	401a      	ands	r2, r3
    7940:	d007      	beq.n	7952 <__aeabi_ddiv+0x5ee>
    7942:	220f      	movs	r2, #15
    7944:	2700      	movs	r7, #0
    7946:	401a      	ands	r2, r3
    7948:	2a04      	cmp	r2, #4
    794a:	d1b8      	bne.n	78be <__aeabi_ddiv+0x55a>
    794c:	077a      	lsls	r2, r7, #29
    794e:	027f      	lsls	r7, r7, #9
    7950:	0b3f      	lsrs	r7, r7, #12
    7952:	08db      	lsrs	r3, r3, #3
    7954:	4313      	orrs	r3, r2
    7956:	4699      	mov	r9, r3
    7958:	2201      	movs	r2, #1
    795a:	4653      	mov	r3, sl
    795c:	401a      	ands	r2, r3
    795e:	2300      	movs	r3, #0
    7960:	e568      	b.n	7434 <__aeabi_ddiv+0xd0>
    7962:	4541      	cmp	r1, r8
    7964:	d8bb      	bhi.n	78de <__aeabi_ddiv+0x57a>
    7966:	4693      	mov	fp, r2
    7968:	2700      	movs	r7, #0
    796a:	e667      	b.n	763c <__aeabi_ddiv+0x2d8>
    796c:	9c01      	ldr	r4, [sp, #4]
    796e:	429c      	cmp	r4, r3
    7970:	d3c3      	bcc.n	78fa <__aeabi_ddiv+0x596>
    7972:	4691      	mov	r9, r2
    7974:	e76d      	b.n	7852 <__aeabi_ddiv+0x4ee>
    7976:	2300      	movs	r3, #0
    7978:	e7da      	b.n	7930 <__aeabi_ddiv+0x5cc>
    797a:	2780      	movs	r7, #128	; 0x80
    797c:	465b      	mov	r3, fp
    797e:	033f      	lsls	r7, r7, #12
    7980:	431f      	orrs	r7, r3
    7982:	033f      	lsls	r7, r7, #12
    7984:	0b3f      	lsrs	r7, r7, #12
    7986:	9a01      	ldr	r2, [sp, #4]
    7988:	4b03      	ldr	r3, [pc, #12]	; (7998 <__aeabi_ddiv+0x634>)
    798a:	e553      	b.n	7434 <__aeabi_ddiv+0xd0>
    798c:	000003ff 	.word	0x000003ff
    7990:	feffffff 	.word	0xfeffffff
    7994:	000007fe 	.word	0x000007fe
    7998:	000007ff 	.word	0x000007ff
    799c:	fffffc02 	.word	0xfffffc02
    79a0:	0000041e 	.word	0x0000041e
    79a4:	fffffbe2 	.word	0xfffffbe2
    79a8:	0000043e 	.word	0x0000043e

000079ac <__aeabi_dsub>:
    79ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ae:	464d      	mov	r5, r9
    79b0:	4644      	mov	r4, r8
    79b2:	465f      	mov	r7, fp
    79b4:	4656      	mov	r6, sl
    79b6:	b4f0      	push	{r4, r5, r6, r7}
    79b8:	1c0e      	adds	r6, r1, #0
    79ba:	1c11      	adds	r1, r2, #0
    79bc:	0332      	lsls	r2, r6, #12
    79be:	0a52      	lsrs	r2, r2, #9
    79c0:	0f47      	lsrs	r7, r0, #29
    79c2:	4317      	orrs	r7, r2
    79c4:	00c5      	lsls	r5, r0, #3
    79c6:	031a      	lsls	r2, r3, #12
    79c8:	0058      	lsls	r0, r3, #1
    79ca:	0fdb      	lsrs	r3, r3, #31
    79cc:	4699      	mov	r9, r3
    79ce:	0a52      	lsrs	r2, r2, #9
    79d0:	0f4b      	lsrs	r3, r1, #29
    79d2:	b083      	sub	sp, #12
    79d4:	431a      	orrs	r2, r3
    79d6:	00cb      	lsls	r3, r1, #3
    79d8:	9301      	str	r3, [sp, #4]
    79da:	4bcf      	ldr	r3, [pc, #828]	; (7d18 <__aeabi_dsub+0x36c>)
    79dc:	0074      	lsls	r4, r6, #1
    79de:	0ff6      	lsrs	r6, r6, #31
    79e0:	0d64      	lsrs	r4, r4, #21
    79e2:	46b0      	mov	r8, r6
    79e4:	0d40      	lsrs	r0, r0, #21
    79e6:	4298      	cmp	r0, r3
    79e8:	d100      	bne.n	79ec <__aeabi_dsub+0x40>
    79ea:	e0e8      	b.n	7bbe <__aeabi_dsub+0x212>
    79ec:	2301      	movs	r3, #1
    79ee:	4649      	mov	r1, r9
    79f0:	4059      	eors	r1, r3
    79f2:	1c0b      	adds	r3, r1, #0
    79f4:	429e      	cmp	r6, r3
    79f6:	d100      	bne.n	79fa <__aeabi_dsub+0x4e>
    79f8:	e0b1      	b.n	7b5e <__aeabi_dsub+0x1b2>
    79fa:	1a26      	subs	r6, r4, r0
    79fc:	2e00      	cmp	r6, #0
    79fe:	dc00      	bgt.n	7a02 <__aeabi_dsub+0x56>
    7a00:	e11c      	b.n	7c3c <__aeabi_dsub+0x290>
    7a02:	2800      	cmp	r0, #0
    7a04:	d142      	bne.n	7a8c <__aeabi_dsub+0xe0>
    7a06:	1c13      	adds	r3, r2, #0
    7a08:	9901      	ldr	r1, [sp, #4]
    7a0a:	430b      	orrs	r3, r1
    7a0c:	d000      	beq.n	7a10 <__aeabi_dsub+0x64>
    7a0e:	e0e6      	b.n	7bde <__aeabi_dsub+0x232>
    7a10:	076b      	lsls	r3, r5, #29
    7a12:	d100      	bne.n	7a16 <__aeabi_dsub+0x6a>
    7a14:	e08e      	b.n	7b34 <__aeabi_dsub+0x188>
    7a16:	230f      	movs	r3, #15
    7a18:	402b      	ands	r3, r5
    7a1a:	2b04      	cmp	r3, #4
    7a1c:	d100      	bne.n	7a20 <__aeabi_dsub+0x74>
    7a1e:	e089      	b.n	7b34 <__aeabi_dsub+0x188>
    7a20:	1d2a      	adds	r2, r5, #4
    7a22:	42aa      	cmp	r2, r5
    7a24:	41ad      	sbcs	r5, r5
    7a26:	2380      	movs	r3, #128	; 0x80
    7a28:	2601      	movs	r6, #1
    7a2a:	4641      	mov	r1, r8
    7a2c:	426d      	negs	r5, r5
    7a2e:	197f      	adds	r7, r7, r5
    7a30:	041b      	lsls	r3, r3, #16
    7a32:	403b      	ands	r3, r7
    7a34:	400e      	ands	r6, r1
    7a36:	1c15      	adds	r5, r2, #0
    7a38:	2b00      	cmp	r3, #0
    7a3a:	d100      	bne.n	7a3e <__aeabi_dsub+0x92>
    7a3c:	e083      	b.n	7b46 <__aeabi_dsub+0x19a>
    7a3e:	4bb6      	ldr	r3, [pc, #728]	; (7d18 <__aeabi_dsub+0x36c>)
    7a40:	3401      	adds	r4, #1
    7a42:	429c      	cmp	r4, r3
    7a44:	d100      	bne.n	7a48 <__aeabi_dsub+0x9c>
    7a46:	e116      	b.n	7c76 <__aeabi_dsub+0x2ca>
    7a48:	1c3a      	adds	r2, r7, #0
    7a4a:	4bb4      	ldr	r3, [pc, #720]	; (7d1c <__aeabi_dsub+0x370>)
    7a4c:	08ed      	lsrs	r5, r5, #3
    7a4e:	401a      	ands	r2, r3
    7a50:	0750      	lsls	r0, r2, #29
    7a52:	0564      	lsls	r4, r4, #21
    7a54:	0252      	lsls	r2, r2, #9
    7a56:	4305      	orrs	r5, r0
    7a58:	0b12      	lsrs	r2, r2, #12
    7a5a:	0d64      	lsrs	r4, r4, #21
    7a5c:	2100      	movs	r1, #0
    7a5e:	0312      	lsls	r2, r2, #12
    7a60:	0d0b      	lsrs	r3, r1, #20
    7a62:	051b      	lsls	r3, r3, #20
    7a64:	0564      	lsls	r4, r4, #21
    7a66:	0b12      	lsrs	r2, r2, #12
    7a68:	431a      	orrs	r2, r3
    7a6a:	0863      	lsrs	r3, r4, #1
    7a6c:	4cac      	ldr	r4, [pc, #688]	; (7d20 <__aeabi_dsub+0x374>)
    7a6e:	07f6      	lsls	r6, r6, #31
    7a70:	4014      	ands	r4, r2
    7a72:	431c      	orrs	r4, r3
    7a74:	0064      	lsls	r4, r4, #1
    7a76:	0864      	lsrs	r4, r4, #1
    7a78:	4334      	orrs	r4, r6
    7a7a:	1c28      	adds	r0, r5, #0
    7a7c:	1c21      	adds	r1, r4, #0
    7a7e:	b003      	add	sp, #12
    7a80:	bc3c      	pop	{r2, r3, r4, r5}
    7a82:	4690      	mov	r8, r2
    7a84:	4699      	mov	r9, r3
    7a86:	46a2      	mov	sl, r4
    7a88:	46ab      	mov	fp, r5
    7a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a8c:	4ba2      	ldr	r3, [pc, #648]	; (7d18 <__aeabi_dsub+0x36c>)
    7a8e:	429c      	cmp	r4, r3
    7a90:	d0be      	beq.n	7a10 <__aeabi_dsub+0x64>
    7a92:	2380      	movs	r3, #128	; 0x80
    7a94:	041b      	lsls	r3, r3, #16
    7a96:	431a      	orrs	r2, r3
    7a98:	2e38      	cmp	r6, #56	; 0x38
    7a9a:	dd00      	ble.n	7a9e <__aeabi_dsub+0xf2>
    7a9c:	e103      	b.n	7ca6 <__aeabi_dsub+0x2fa>
    7a9e:	2e1f      	cmp	r6, #31
    7aa0:	dd00      	ble.n	7aa4 <__aeabi_dsub+0xf8>
    7aa2:	e13f      	b.n	7d24 <__aeabi_dsub+0x378>
    7aa4:	2020      	movs	r0, #32
    7aa6:	1b83      	subs	r3, r0, r6
    7aa8:	4699      	mov	r9, r3
    7aaa:	1c13      	adds	r3, r2, #0
    7aac:	4649      	mov	r1, r9
    7aae:	408b      	lsls	r3, r1
    7ab0:	469c      	mov	ip, r3
    7ab2:	9b01      	ldr	r3, [sp, #4]
    7ab4:	4660      	mov	r0, ip
    7ab6:	40f3      	lsrs	r3, r6
    7ab8:	4303      	orrs	r3, r0
    7aba:	9801      	ldr	r0, [sp, #4]
    7abc:	40f2      	lsrs	r2, r6
    7abe:	4088      	lsls	r0, r1
    7ac0:	1c01      	adds	r1, r0, #0
    7ac2:	1e48      	subs	r0, r1, #1
    7ac4:	4181      	sbcs	r1, r0
    7ac6:	430b      	orrs	r3, r1
    7ac8:	1aeb      	subs	r3, r5, r3
    7aca:	429d      	cmp	r5, r3
    7acc:	4180      	sbcs	r0, r0
    7ace:	1c1d      	adds	r5, r3, #0
    7ad0:	1aba      	subs	r2, r7, r2
    7ad2:	4240      	negs	r0, r0
    7ad4:	1a17      	subs	r7, r2, r0
    7ad6:	023b      	lsls	r3, r7, #8
    7ad8:	d400      	bmi.n	7adc <__aeabi_dsub+0x130>
    7ada:	e0a8      	b.n	7c2e <__aeabi_dsub+0x282>
    7adc:	027a      	lsls	r2, r7, #9
    7ade:	0a56      	lsrs	r6, r2, #9
    7ae0:	2e00      	cmp	r6, #0
    7ae2:	d100      	bne.n	7ae6 <__aeabi_dsub+0x13a>
    7ae4:	e0ca      	b.n	7c7c <__aeabi_dsub+0x2d0>
    7ae6:	1c30      	adds	r0, r6, #0
    7ae8:	f7fe fd52 	bl	6590 <__clzsi2>
    7aec:	1c03      	adds	r3, r0, #0
    7aee:	3b08      	subs	r3, #8
    7af0:	2b1f      	cmp	r3, #31
    7af2:	dd00      	ble.n	7af6 <__aeabi_dsub+0x14a>
    7af4:	e0cb      	b.n	7c8e <__aeabi_dsub+0x2e2>
    7af6:	2228      	movs	r2, #40	; 0x28
    7af8:	1c29      	adds	r1, r5, #0
    7afa:	1a12      	subs	r2, r2, r0
    7afc:	40d1      	lsrs	r1, r2
    7afe:	409e      	lsls	r6, r3
    7b00:	1c0a      	adds	r2, r1, #0
    7b02:	409d      	lsls	r5, r3
    7b04:	4332      	orrs	r2, r6
    7b06:	429c      	cmp	r4, r3
    7b08:	dd00      	ble.n	7b0c <__aeabi_dsub+0x160>
    7b0a:	e0c8      	b.n	7c9e <__aeabi_dsub+0x2f2>
    7b0c:	1b1c      	subs	r4, r3, r4
    7b0e:	1c67      	adds	r7, r4, #1
    7b10:	2f1f      	cmp	r7, #31
    7b12:	dd00      	ble.n	7b16 <__aeabi_dsub+0x16a>
    7b14:	e0ed      	b.n	7cf2 <__aeabi_dsub+0x346>
    7b16:	231f      	movs	r3, #31
    7b18:	1c29      	adds	r1, r5, #0
    7b1a:	1b1c      	subs	r4, r3, r4
    7b1c:	1c13      	adds	r3, r2, #0
    7b1e:	40a5      	lsls	r5, r4
    7b20:	40a3      	lsls	r3, r4
    7b22:	40f9      	lsrs	r1, r7
    7b24:	1e6c      	subs	r4, r5, #1
    7b26:	41a5      	sbcs	r5, r4
    7b28:	40fa      	lsrs	r2, r7
    7b2a:	4319      	orrs	r1, r3
    7b2c:	430d      	orrs	r5, r1
    7b2e:	1c17      	adds	r7, r2, #0
    7b30:	2400      	movs	r4, #0
    7b32:	e76d      	b.n	7a10 <__aeabi_dsub+0x64>
    7b34:	2380      	movs	r3, #128	; 0x80
    7b36:	2601      	movs	r6, #1
    7b38:	4642      	mov	r2, r8
    7b3a:	041b      	lsls	r3, r3, #16
    7b3c:	403b      	ands	r3, r7
    7b3e:	4016      	ands	r6, r2
    7b40:	2b00      	cmp	r3, #0
    7b42:	d000      	beq.n	7b46 <__aeabi_dsub+0x19a>
    7b44:	e77b      	b.n	7a3e <__aeabi_dsub+0x92>
    7b46:	4b74      	ldr	r3, [pc, #464]	; (7d18 <__aeabi_dsub+0x36c>)
    7b48:	08ed      	lsrs	r5, r5, #3
    7b4a:	0778      	lsls	r0, r7, #29
    7b4c:	4305      	orrs	r5, r0
    7b4e:	08fa      	lsrs	r2, r7, #3
    7b50:	429c      	cmp	r4, r3
    7b52:	d03b      	beq.n	7bcc <__aeabi_dsub+0x220>
    7b54:	0312      	lsls	r2, r2, #12
    7b56:	0564      	lsls	r4, r4, #21
    7b58:	0b12      	lsrs	r2, r2, #12
    7b5a:	0d64      	lsrs	r4, r4, #21
    7b5c:	e77e      	b.n	7a5c <__aeabi_dsub+0xb0>
    7b5e:	1a23      	subs	r3, r4, r0
    7b60:	469a      	mov	sl, r3
    7b62:	2b00      	cmp	r3, #0
    7b64:	dc00      	bgt.n	7b68 <__aeabi_dsub+0x1bc>
    7b66:	e0a5      	b.n	7cb4 <__aeabi_dsub+0x308>
    7b68:	2800      	cmp	r0, #0
    7b6a:	d044      	beq.n	7bf6 <__aeabi_dsub+0x24a>
    7b6c:	486a      	ldr	r0, [pc, #424]	; (7d18 <__aeabi_dsub+0x36c>)
    7b6e:	4284      	cmp	r4, r0
    7b70:	d100      	bne.n	7b74 <__aeabi_dsub+0x1c8>
    7b72:	e74d      	b.n	7a10 <__aeabi_dsub+0x64>
    7b74:	2080      	movs	r0, #128	; 0x80
    7b76:	0400      	lsls	r0, r0, #16
    7b78:	4302      	orrs	r2, r0
    7b7a:	4653      	mov	r3, sl
    7b7c:	2b38      	cmp	r3, #56	; 0x38
    7b7e:	dc00      	bgt.n	7b82 <__aeabi_dsub+0x1d6>
    7b80:	e11c      	b.n	7dbc <__aeabi_dsub+0x410>
    7b82:	9b01      	ldr	r3, [sp, #4]
    7b84:	431a      	orrs	r2, r3
    7b86:	1e51      	subs	r1, r2, #1
    7b88:	418a      	sbcs	r2, r1
    7b8a:	b2d1      	uxtb	r1, r2
    7b8c:	2200      	movs	r2, #0
    7b8e:	1949      	adds	r1, r1, r5
    7b90:	42a9      	cmp	r1, r5
    7b92:	4180      	sbcs	r0, r0
    7b94:	1c0d      	adds	r5, r1, #0
    7b96:	19d2      	adds	r2, r2, r7
    7b98:	4240      	negs	r0, r0
    7b9a:	1817      	adds	r7, r2, r0
    7b9c:	023b      	lsls	r3, r7, #8
    7b9e:	d546      	bpl.n	7c2e <__aeabi_dsub+0x282>
    7ba0:	4b5d      	ldr	r3, [pc, #372]	; (7d18 <__aeabi_dsub+0x36c>)
    7ba2:	3401      	adds	r4, #1
    7ba4:	429c      	cmp	r4, r3
    7ba6:	d100      	bne.n	7baa <__aeabi_dsub+0x1fe>
    7ba8:	e169      	b.n	7e7e <__aeabi_dsub+0x4d2>
    7baa:	2001      	movs	r0, #1
    7bac:	4a5b      	ldr	r2, [pc, #364]	; (7d1c <__aeabi_dsub+0x370>)
    7bae:	086b      	lsrs	r3, r5, #1
    7bb0:	403a      	ands	r2, r7
    7bb2:	4028      	ands	r0, r5
    7bb4:	4318      	orrs	r0, r3
    7bb6:	07d5      	lsls	r5, r2, #31
    7bb8:	4305      	orrs	r5, r0
    7bba:	0857      	lsrs	r7, r2, #1
    7bbc:	e728      	b.n	7a10 <__aeabi_dsub+0x64>
    7bbe:	1c13      	adds	r3, r2, #0
    7bc0:	9901      	ldr	r1, [sp, #4]
    7bc2:	430b      	orrs	r3, r1
    7bc4:	d100      	bne.n	7bc8 <__aeabi_dsub+0x21c>
    7bc6:	e711      	b.n	79ec <__aeabi_dsub+0x40>
    7bc8:	464b      	mov	r3, r9
    7bca:	e713      	b.n	79f4 <__aeabi_dsub+0x48>
    7bcc:	1c2b      	adds	r3, r5, #0
    7bce:	4313      	orrs	r3, r2
    7bd0:	d051      	beq.n	7c76 <__aeabi_dsub+0x2ca>
    7bd2:	2380      	movs	r3, #128	; 0x80
    7bd4:	031b      	lsls	r3, r3, #12
    7bd6:	431a      	orrs	r2, r3
    7bd8:	0312      	lsls	r2, r2, #12
    7bda:	0b12      	lsrs	r2, r2, #12
    7bdc:	e73e      	b.n	7a5c <__aeabi_dsub+0xb0>
    7bde:	3e01      	subs	r6, #1
    7be0:	2e00      	cmp	r6, #0
    7be2:	d000      	beq.n	7be6 <__aeabi_dsub+0x23a>
    7be4:	e080      	b.n	7ce8 <__aeabi_dsub+0x33c>
    7be6:	1a69      	subs	r1, r5, r1
    7be8:	428d      	cmp	r5, r1
    7bea:	419b      	sbcs	r3, r3
    7bec:	1aba      	subs	r2, r7, r2
    7bee:	425b      	negs	r3, r3
    7bf0:	1ad7      	subs	r7, r2, r3
    7bf2:	1c0d      	adds	r5, r1, #0
    7bf4:	e76f      	b.n	7ad6 <__aeabi_dsub+0x12a>
    7bf6:	1c10      	adds	r0, r2, #0
    7bf8:	9b01      	ldr	r3, [sp, #4]
    7bfa:	4318      	orrs	r0, r3
    7bfc:	d100      	bne.n	7c00 <__aeabi_dsub+0x254>
    7bfe:	e707      	b.n	7a10 <__aeabi_dsub+0x64>
    7c00:	2301      	movs	r3, #1
    7c02:	425b      	negs	r3, r3
    7c04:	469c      	mov	ip, r3
    7c06:	44e2      	add	sl, ip
    7c08:	4653      	mov	r3, sl
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	d000      	beq.n	7c10 <__aeabi_dsub+0x264>
    7c0e:	e102      	b.n	7e16 <__aeabi_dsub+0x46a>
    7c10:	9b01      	ldr	r3, [sp, #4]
    7c12:	19d2      	adds	r2, r2, r7
    7c14:	1959      	adds	r1, r3, r5
    7c16:	42a9      	cmp	r1, r5
    7c18:	419b      	sbcs	r3, r3
    7c1a:	425b      	negs	r3, r3
    7c1c:	18d7      	adds	r7, r2, r3
    7c1e:	1c0d      	adds	r5, r1, #0
    7c20:	e7bc      	b.n	7b9c <__aeabi_dsub+0x1f0>
    7c22:	4663      	mov	r3, ip
    7c24:	4303      	orrs	r3, r0
    7c26:	d100      	bne.n	7c2a <__aeabi_dsub+0x27e>
    7c28:	e128      	b.n	7e7c <__aeabi_dsub+0x4d0>
    7c2a:	1c07      	adds	r7, r0, #0
    7c2c:	4665      	mov	r5, ip
    7c2e:	076b      	lsls	r3, r5, #29
    7c30:	d000      	beq.n	7c34 <__aeabi_dsub+0x288>
    7c32:	e6f0      	b.n	7a16 <__aeabi_dsub+0x6a>
    7c34:	2601      	movs	r6, #1
    7c36:	4643      	mov	r3, r8
    7c38:	401e      	ands	r6, r3
    7c3a:	e784      	b.n	7b46 <__aeabi_dsub+0x19a>
    7c3c:	2e00      	cmp	r6, #0
    7c3e:	d000      	beq.n	7c42 <__aeabi_dsub+0x296>
    7c40:	e081      	b.n	7d46 <__aeabi_dsub+0x39a>
    7c42:	1c60      	adds	r0, r4, #1
    7c44:	0540      	lsls	r0, r0, #21
    7c46:	0d40      	lsrs	r0, r0, #21
    7c48:	2801      	cmp	r0, #1
    7c4a:	dc00      	bgt.n	7c4e <__aeabi_dsub+0x2a2>
    7c4c:	e107      	b.n	7e5e <__aeabi_dsub+0x4b2>
    7c4e:	9901      	ldr	r1, [sp, #4]
    7c50:	1a68      	subs	r0, r5, r1
    7c52:	4684      	mov	ip, r0
    7c54:	4565      	cmp	r5, ip
    7c56:	41b6      	sbcs	r6, r6
    7c58:	1ab8      	subs	r0, r7, r2
    7c5a:	4276      	negs	r6, r6
    7c5c:	1b86      	subs	r6, r0, r6
    7c5e:	0230      	lsls	r0, r6, #8
    7c60:	d400      	bmi.n	7c64 <__aeabi_dsub+0x2b8>
    7c62:	e0a1      	b.n	7da8 <__aeabi_dsub+0x3fc>
    7c64:	468c      	mov	ip, r1
    7c66:	1b4d      	subs	r5, r1, r5
    7c68:	45ac      	cmp	ip, r5
    7c6a:	4189      	sbcs	r1, r1
    7c6c:	1bd2      	subs	r2, r2, r7
    7c6e:	4249      	negs	r1, r1
    7c70:	1a56      	subs	r6, r2, r1
    7c72:	4698      	mov	r8, r3
    7c74:	e734      	b.n	7ae0 <__aeabi_dsub+0x134>
    7c76:	2200      	movs	r2, #0
    7c78:	2500      	movs	r5, #0
    7c7a:	e6ef      	b.n	7a5c <__aeabi_dsub+0xb0>
    7c7c:	1c28      	adds	r0, r5, #0
    7c7e:	f7fe fc87 	bl	6590 <__clzsi2>
    7c82:	3020      	adds	r0, #32
    7c84:	1c03      	adds	r3, r0, #0
    7c86:	3b08      	subs	r3, #8
    7c88:	2b1f      	cmp	r3, #31
    7c8a:	dc00      	bgt.n	7c8e <__aeabi_dsub+0x2e2>
    7c8c:	e733      	b.n	7af6 <__aeabi_dsub+0x14a>
    7c8e:	1c02      	adds	r2, r0, #0
    7c90:	3a28      	subs	r2, #40	; 0x28
    7c92:	4095      	lsls	r5, r2
    7c94:	1c2a      	adds	r2, r5, #0
    7c96:	2500      	movs	r5, #0
    7c98:	429c      	cmp	r4, r3
    7c9a:	dc00      	bgt.n	7c9e <__aeabi_dsub+0x2f2>
    7c9c:	e736      	b.n	7b0c <__aeabi_dsub+0x160>
    7c9e:	4f1f      	ldr	r7, [pc, #124]	; (7d1c <__aeabi_dsub+0x370>)
    7ca0:	1ae4      	subs	r4, r4, r3
    7ca2:	4017      	ands	r7, r2
    7ca4:	e6b4      	b.n	7a10 <__aeabi_dsub+0x64>
    7ca6:	9b01      	ldr	r3, [sp, #4]
    7ca8:	431a      	orrs	r2, r3
    7caa:	1e51      	subs	r1, r2, #1
    7cac:	418a      	sbcs	r2, r1
    7cae:	b2d3      	uxtb	r3, r2
    7cb0:	2200      	movs	r2, #0
    7cb2:	e709      	b.n	7ac8 <__aeabi_dsub+0x11c>
    7cb4:	2b00      	cmp	r3, #0
    7cb6:	d000      	beq.n	7cba <__aeabi_dsub+0x30e>
    7cb8:	e101      	b.n	7ebe <__aeabi_dsub+0x512>
    7cba:	1c60      	adds	r0, r4, #1
    7cbc:	0543      	lsls	r3, r0, #21
    7cbe:	0d5b      	lsrs	r3, r3, #21
    7cc0:	2b01      	cmp	r3, #1
    7cc2:	dc00      	bgt.n	7cc6 <__aeabi_dsub+0x31a>
    7cc4:	e0b0      	b.n	7e28 <__aeabi_dsub+0x47c>
    7cc6:	4b14      	ldr	r3, [pc, #80]	; (7d18 <__aeabi_dsub+0x36c>)
    7cc8:	4298      	cmp	r0, r3
    7cca:	d100      	bne.n	7cce <__aeabi_dsub+0x322>
    7ccc:	e11e      	b.n	7f0c <__aeabi_dsub+0x560>
    7cce:	9b01      	ldr	r3, [sp, #4]
    7cd0:	19d2      	adds	r2, r2, r7
    7cd2:	1959      	adds	r1, r3, r5
    7cd4:	42a9      	cmp	r1, r5
    7cd6:	419b      	sbcs	r3, r3
    7cd8:	425b      	negs	r3, r3
    7cda:	18d2      	adds	r2, r2, r3
    7cdc:	0849      	lsrs	r1, r1, #1
    7cde:	07d5      	lsls	r5, r2, #31
    7ce0:	430d      	orrs	r5, r1
    7ce2:	0857      	lsrs	r7, r2, #1
    7ce4:	1c04      	adds	r4, r0, #0
    7ce6:	e693      	b.n	7a10 <__aeabi_dsub+0x64>
    7ce8:	4b0b      	ldr	r3, [pc, #44]	; (7d18 <__aeabi_dsub+0x36c>)
    7cea:	429c      	cmp	r4, r3
    7cec:	d000      	beq.n	7cf0 <__aeabi_dsub+0x344>
    7cee:	e6d3      	b.n	7a98 <__aeabi_dsub+0xec>
    7cf0:	e68e      	b.n	7a10 <__aeabi_dsub+0x64>
    7cf2:	1c21      	adds	r1, r4, #0
    7cf4:	1c13      	adds	r3, r2, #0
    7cf6:	391f      	subs	r1, #31
    7cf8:	40cb      	lsrs	r3, r1
    7cfa:	1c19      	adds	r1, r3, #0
    7cfc:	2f20      	cmp	r7, #32
    7cfe:	d100      	bne.n	7d02 <__aeabi_dsub+0x356>
    7d00:	e08e      	b.n	7e20 <__aeabi_dsub+0x474>
    7d02:	233f      	movs	r3, #63	; 0x3f
    7d04:	1b1c      	subs	r4, r3, r4
    7d06:	40a2      	lsls	r2, r4
    7d08:	4315      	orrs	r5, r2
    7d0a:	1e6a      	subs	r2, r5, #1
    7d0c:	4195      	sbcs	r5, r2
    7d0e:	2700      	movs	r7, #0
    7d10:	430d      	orrs	r5, r1
    7d12:	2400      	movs	r4, #0
    7d14:	e78b      	b.n	7c2e <__aeabi_dsub+0x282>
    7d16:	46c0      	nop			; (mov r8, r8)
    7d18:	000007ff 	.word	0x000007ff
    7d1c:	ff7fffff 	.word	0xff7fffff
    7d20:	800fffff 	.word	0x800fffff
    7d24:	1c33      	adds	r3, r6, #0
    7d26:	1c10      	adds	r0, r2, #0
    7d28:	3b20      	subs	r3, #32
    7d2a:	40d8      	lsrs	r0, r3
    7d2c:	2e20      	cmp	r6, #32
    7d2e:	d079      	beq.n	7e24 <__aeabi_dsub+0x478>
    7d30:	2340      	movs	r3, #64	; 0x40
    7d32:	1b9b      	subs	r3, r3, r6
    7d34:	409a      	lsls	r2, r3
    7d36:	1c13      	adds	r3, r2, #0
    7d38:	9a01      	ldr	r2, [sp, #4]
    7d3a:	4313      	orrs	r3, r2
    7d3c:	1e59      	subs	r1, r3, #1
    7d3e:	418b      	sbcs	r3, r1
    7d40:	2200      	movs	r2, #0
    7d42:	4303      	orrs	r3, r0
    7d44:	e6c0      	b.n	7ac8 <__aeabi_dsub+0x11c>
    7d46:	2c00      	cmp	r4, #0
    7d48:	d053      	beq.n	7df2 <__aeabi_dsub+0x446>
    7d4a:	4cc7      	ldr	r4, [pc, #796]	; (8068 <__aeabi_dsub+0x6bc>)
    7d4c:	42a0      	cmp	r0, r4
    7d4e:	d100      	bne.n	7d52 <__aeabi_dsub+0x3a6>
    7d50:	e0b0      	b.n	7eb4 <__aeabi_dsub+0x508>
    7d52:	2480      	movs	r4, #128	; 0x80
    7d54:	4271      	negs	r1, r6
    7d56:	4689      	mov	r9, r1
    7d58:	0424      	lsls	r4, r4, #16
    7d5a:	4327      	orrs	r7, r4
    7d5c:	4649      	mov	r1, r9
    7d5e:	2938      	cmp	r1, #56	; 0x38
    7d60:	dd00      	ble.n	7d64 <__aeabi_dsub+0x3b8>
    7d62:	e0cd      	b.n	7f00 <__aeabi_dsub+0x554>
    7d64:	291f      	cmp	r1, #31
    7d66:	dd00      	ble.n	7d6a <__aeabi_dsub+0x3be>
    7d68:	e159      	b.n	801e <__aeabi_dsub+0x672>
    7d6a:	2420      	movs	r4, #32
    7d6c:	1c3e      	adds	r6, r7, #0
    7d6e:	1a61      	subs	r1, r4, r1
    7d70:	408e      	lsls	r6, r1
    7d72:	468a      	mov	sl, r1
    7d74:	46b0      	mov	r8, r6
    7d76:	4649      	mov	r1, r9
    7d78:	1c2e      	adds	r6, r5, #0
    7d7a:	40ce      	lsrs	r6, r1
    7d7c:	4651      	mov	r1, sl
    7d7e:	46b4      	mov	ip, r6
    7d80:	408d      	lsls	r5, r1
    7d82:	4664      	mov	r4, ip
    7d84:	4646      	mov	r6, r8
    7d86:	4649      	mov	r1, r9
    7d88:	4326      	orrs	r6, r4
    7d8a:	1e6c      	subs	r4, r5, #1
    7d8c:	41a5      	sbcs	r5, r4
    7d8e:	40cf      	lsrs	r7, r1
    7d90:	4335      	orrs	r5, r6
    7d92:	9901      	ldr	r1, [sp, #4]
    7d94:	1bd7      	subs	r7, r2, r7
    7d96:	468c      	mov	ip, r1
    7d98:	1b4d      	subs	r5, r1, r5
    7d9a:	45ac      	cmp	ip, r5
    7d9c:	4192      	sbcs	r2, r2
    7d9e:	4252      	negs	r2, r2
    7da0:	1abf      	subs	r7, r7, r2
    7da2:	1c04      	adds	r4, r0, #0
    7da4:	4698      	mov	r8, r3
    7da6:	e696      	b.n	7ad6 <__aeabi_dsub+0x12a>
    7da8:	4663      	mov	r3, ip
    7daa:	4665      	mov	r5, ip
    7dac:	4333      	orrs	r3, r6
    7dae:	d000      	beq.n	7db2 <__aeabi_dsub+0x406>
    7db0:	e696      	b.n	7ae0 <__aeabi_dsub+0x134>
    7db2:	2600      	movs	r6, #0
    7db4:	2700      	movs	r7, #0
    7db6:	2400      	movs	r4, #0
    7db8:	2500      	movs	r5, #0
    7dba:	e6c4      	b.n	7b46 <__aeabi_dsub+0x19a>
    7dbc:	2b1f      	cmp	r3, #31
    7dbe:	dc61      	bgt.n	7e84 <__aeabi_dsub+0x4d8>
    7dc0:	2020      	movs	r0, #32
    7dc2:	1ac3      	subs	r3, r0, r3
    7dc4:	469b      	mov	fp, r3
    7dc6:	1c13      	adds	r3, r2, #0
    7dc8:	4659      	mov	r1, fp
    7dca:	408b      	lsls	r3, r1
    7dcc:	4651      	mov	r1, sl
    7dce:	4699      	mov	r9, r3
    7dd0:	9b01      	ldr	r3, [sp, #4]
    7dd2:	40cb      	lsrs	r3, r1
    7dd4:	469c      	mov	ip, r3
    7dd6:	464b      	mov	r3, r9
    7dd8:	4660      	mov	r0, ip
    7dda:	4303      	orrs	r3, r0
    7ddc:	469c      	mov	ip, r3
    7dde:	465b      	mov	r3, fp
    7de0:	9901      	ldr	r1, [sp, #4]
    7de2:	4099      	lsls	r1, r3
    7de4:	4663      	mov	r3, ip
    7de6:	1e48      	subs	r0, r1, #1
    7de8:	4181      	sbcs	r1, r0
    7dea:	4319      	orrs	r1, r3
    7dec:	4653      	mov	r3, sl
    7dee:	40da      	lsrs	r2, r3
    7df0:	e6cd      	b.n	7b8e <__aeabi_dsub+0x1e2>
    7df2:	1c3c      	adds	r4, r7, #0
    7df4:	432c      	orrs	r4, r5
    7df6:	d05d      	beq.n	7eb4 <__aeabi_dsub+0x508>
    7df8:	43f1      	mvns	r1, r6
    7dfa:	4689      	mov	r9, r1
    7dfc:	2900      	cmp	r1, #0
    7dfe:	d155      	bne.n	7eac <__aeabi_dsub+0x500>
    7e00:	9901      	ldr	r1, [sp, #4]
    7e02:	1bd2      	subs	r2, r2, r7
    7e04:	468c      	mov	ip, r1
    7e06:	1b4d      	subs	r5, r1, r5
    7e08:	45ac      	cmp	ip, r5
    7e0a:	4189      	sbcs	r1, r1
    7e0c:	4249      	negs	r1, r1
    7e0e:	1a57      	subs	r7, r2, r1
    7e10:	1c04      	adds	r4, r0, #0
    7e12:	4698      	mov	r8, r3
    7e14:	e65f      	b.n	7ad6 <__aeabi_dsub+0x12a>
    7e16:	4894      	ldr	r0, [pc, #592]	; (8068 <__aeabi_dsub+0x6bc>)
    7e18:	4284      	cmp	r4, r0
    7e1a:	d000      	beq.n	7e1e <__aeabi_dsub+0x472>
    7e1c:	e6ad      	b.n	7b7a <__aeabi_dsub+0x1ce>
    7e1e:	e5f7      	b.n	7a10 <__aeabi_dsub+0x64>
    7e20:	2200      	movs	r2, #0
    7e22:	e771      	b.n	7d08 <__aeabi_dsub+0x35c>
    7e24:	2300      	movs	r3, #0
    7e26:	e787      	b.n	7d38 <__aeabi_dsub+0x38c>
    7e28:	1c3b      	adds	r3, r7, #0
    7e2a:	432b      	orrs	r3, r5
    7e2c:	2c00      	cmp	r4, #0
    7e2e:	d000      	beq.n	7e32 <__aeabi_dsub+0x486>
    7e30:	e0da      	b.n	7fe8 <__aeabi_dsub+0x63c>
    7e32:	2b00      	cmp	r3, #0
    7e34:	d100      	bne.n	7e38 <__aeabi_dsub+0x48c>
    7e36:	e113      	b.n	8060 <__aeabi_dsub+0x6b4>
    7e38:	1c13      	adds	r3, r2, #0
    7e3a:	9901      	ldr	r1, [sp, #4]
    7e3c:	430b      	orrs	r3, r1
    7e3e:	d100      	bne.n	7e42 <__aeabi_dsub+0x496>
    7e40:	e5e6      	b.n	7a10 <__aeabi_dsub+0x64>
    7e42:	1949      	adds	r1, r1, r5
    7e44:	42a9      	cmp	r1, r5
    7e46:	419b      	sbcs	r3, r3
    7e48:	19d2      	adds	r2, r2, r7
    7e4a:	425b      	negs	r3, r3
    7e4c:	18d7      	adds	r7, r2, r3
    7e4e:	023b      	lsls	r3, r7, #8
    7e50:	d400      	bmi.n	7e54 <__aeabi_dsub+0x4a8>
    7e52:	e121      	b.n	8098 <__aeabi_dsub+0x6ec>
    7e54:	4b85      	ldr	r3, [pc, #532]	; (806c <__aeabi_dsub+0x6c0>)
    7e56:	1c0d      	adds	r5, r1, #0
    7e58:	401f      	ands	r7, r3
    7e5a:	1c04      	adds	r4, r0, #0
    7e5c:	e5d8      	b.n	7a10 <__aeabi_dsub+0x64>
    7e5e:	1c38      	adds	r0, r7, #0
    7e60:	4328      	orrs	r0, r5
    7e62:	2c00      	cmp	r4, #0
    7e64:	d140      	bne.n	7ee8 <__aeabi_dsub+0x53c>
    7e66:	2800      	cmp	r0, #0
    7e68:	d000      	beq.n	7e6c <__aeabi_dsub+0x4c0>
    7e6a:	e083      	b.n	7f74 <__aeabi_dsub+0x5c8>
    7e6c:	1c10      	adds	r0, r2, #0
    7e6e:	9901      	ldr	r1, [sp, #4]
    7e70:	4308      	orrs	r0, r1
    7e72:	d003      	beq.n	7e7c <__aeabi_dsub+0x4d0>
    7e74:	1c17      	adds	r7, r2, #0
    7e76:	1c0d      	adds	r5, r1, #0
    7e78:	4698      	mov	r8, r3
    7e7a:	e5c9      	b.n	7a10 <__aeabi_dsub+0x64>
    7e7c:	2600      	movs	r6, #0
    7e7e:	2700      	movs	r7, #0
    7e80:	2500      	movs	r5, #0
    7e82:	e660      	b.n	7b46 <__aeabi_dsub+0x19a>
    7e84:	4650      	mov	r0, sl
    7e86:	1c13      	adds	r3, r2, #0
    7e88:	3820      	subs	r0, #32
    7e8a:	40c3      	lsrs	r3, r0
    7e8c:	1c18      	adds	r0, r3, #0
    7e8e:	4653      	mov	r3, sl
    7e90:	2b20      	cmp	r3, #32
    7e92:	d100      	bne.n	7e96 <__aeabi_dsub+0x4ea>
    7e94:	e0c1      	b.n	801a <__aeabi_dsub+0x66e>
    7e96:	2340      	movs	r3, #64	; 0x40
    7e98:	4651      	mov	r1, sl
    7e9a:	1a5b      	subs	r3, r3, r1
    7e9c:	409a      	lsls	r2, r3
    7e9e:	9901      	ldr	r1, [sp, #4]
    7ea0:	4311      	orrs	r1, r2
    7ea2:	1e4a      	subs	r2, r1, #1
    7ea4:	4191      	sbcs	r1, r2
    7ea6:	2200      	movs	r2, #0
    7ea8:	4301      	orrs	r1, r0
    7eaa:	e670      	b.n	7b8e <__aeabi_dsub+0x1e2>
    7eac:	4c6e      	ldr	r4, [pc, #440]	; (8068 <__aeabi_dsub+0x6bc>)
    7eae:	42a0      	cmp	r0, r4
    7eb0:	d000      	beq.n	7eb4 <__aeabi_dsub+0x508>
    7eb2:	e753      	b.n	7d5c <__aeabi_dsub+0x3b0>
    7eb4:	1c17      	adds	r7, r2, #0
    7eb6:	9d01      	ldr	r5, [sp, #4]
    7eb8:	1c04      	adds	r4, r0, #0
    7eba:	4698      	mov	r8, r3
    7ebc:	e5a8      	b.n	7a10 <__aeabi_dsub+0x64>
    7ebe:	2c00      	cmp	r4, #0
    7ec0:	d128      	bne.n	7f14 <__aeabi_dsub+0x568>
    7ec2:	1c3c      	adds	r4, r7, #0
    7ec4:	432c      	orrs	r4, r5
    7ec6:	d100      	bne.n	7eca <__aeabi_dsub+0x51e>
    7ec8:	e08a      	b.n	7fe0 <__aeabi_dsub+0x634>
    7eca:	43db      	mvns	r3, r3
    7ecc:	469a      	mov	sl, r3
    7ece:	2b00      	cmp	r3, #0
    7ed0:	d000      	beq.n	7ed4 <__aeabi_dsub+0x528>
    7ed2:	e082      	b.n	7fda <__aeabi_dsub+0x62e>
    7ed4:	9b01      	ldr	r3, [sp, #4]
    7ed6:	19d2      	adds	r2, r2, r7
    7ed8:	469c      	mov	ip, r3
    7eda:	4465      	add	r5, ip
    7edc:	429d      	cmp	r5, r3
    7ede:	4189      	sbcs	r1, r1
    7ee0:	4249      	negs	r1, r1
    7ee2:	1857      	adds	r7, r2, r1
    7ee4:	1c04      	adds	r4, r0, #0
    7ee6:	e659      	b.n	7b9c <__aeabi_dsub+0x1f0>
    7ee8:	2800      	cmp	r0, #0
    7eea:	d15b      	bne.n	7fa4 <__aeabi_dsub+0x5f8>
    7eec:	1c10      	adds	r0, r2, #0
    7eee:	9901      	ldr	r1, [sp, #4]
    7ef0:	4308      	orrs	r0, r1
    7ef2:	d100      	bne.n	7ef6 <__aeabi_dsub+0x54a>
    7ef4:	e0a4      	b.n	8040 <__aeabi_dsub+0x694>
    7ef6:	1c17      	adds	r7, r2, #0
    7ef8:	1c0d      	adds	r5, r1, #0
    7efa:	4698      	mov	r8, r3
    7efc:	4c5a      	ldr	r4, [pc, #360]	; (8068 <__aeabi_dsub+0x6bc>)
    7efe:	e587      	b.n	7a10 <__aeabi_dsub+0x64>
    7f00:	433d      	orrs	r5, r7
    7f02:	1e6f      	subs	r7, r5, #1
    7f04:	41bd      	sbcs	r5, r7
    7f06:	2700      	movs	r7, #0
    7f08:	b2ed      	uxtb	r5, r5
    7f0a:	e742      	b.n	7d92 <__aeabi_dsub+0x3e6>
    7f0c:	1c04      	adds	r4, r0, #0
    7f0e:	2700      	movs	r7, #0
    7f10:	2500      	movs	r5, #0
    7f12:	e618      	b.n	7b46 <__aeabi_dsub+0x19a>
    7f14:	4c54      	ldr	r4, [pc, #336]	; (8068 <__aeabi_dsub+0x6bc>)
    7f16:	42a0      	cmp	r0, r4
    7f18:	d062      	beq.n	7fe0 <__aeabi_dsub+0x634>
    7f1a:	4653      	mov	r3, sl
    7f1c:	2480      	movs	r4, #128	; 0x80
    7f1e:	425b      	negs	r3, r3
    7f20:	469a      	mov	sl, r3
    7f22:	0424      	lsls	r4, r4, #16
    7f24:	4327      	orrs	r7, r4
    7f26:	4653      	mov	r3, sl
    7f28:	2b38      	cmp	r3, #56	; 0x38
    7f2a:	dd00      	ble.n	7f2e <__aeabi_dsub+0x582>
    7f2c:	e08e      	b.n	804c <__aeabi_dsub+0x6a0>
    7f2e:	2b1f      	cmp	r3, #31
    7f30:	dd00      	ble.n	7f34 <__aeabi_dsub+0x588>
    7f32:	e09d      	b.n	8070 <__aeabi_dsub+0x6c4>
    7f34:	2420      	movs	r4, #32
    7f36:	1ae3      	subs	r3, r4, r3
    7f38:	469b      	mov	fp, r3
    7f3a:	1c3b      	adds	r3, r7, #0
    7f3c:	4659      	mov	r1, fp
    7f3e:	408b      	lsls	r3, r1
    7f40:	4651      	mov	r1, sl
    7f42:	4699      	mov	r9, r3
    7f44:	1c2b      	adds	r3, r5, #0
    7f46:	40cb      	lsrs	r3, r1
    7f48:	469c      	mov	ip, r3
    7f4a:	464b      	mov	r3, r9
    7f4c:	4664      	mov	r4, ip
    7f4e:	4323      	orrs	r3, r4
    7f50:	469c      	mov	ip, r3
    7f52:	465b      	mov	r3, fp
    7f54:	409d      	lsls	r5, r3
    7f56:	4663      	mov	r3, ip
    7f58:	1e6c      	subs	r4, r5, #1
    7f5a:	41a5      	sbcs	r5, r4
    7f5c:	40cf      	lsrs	r7, r1
    7f5e:	431d      	orrs	r5, r3
    7f60:	9b01      	ldr	r3, [sp, #4]
    7f62:	18bf      	adds	r7, r7, r2
    7f64:	469c      	mov	ip, r3
    7f66:	4465      	add	r5, ip
    7f68:	429d      	cmp	r5, r3
    7f6a:	4192      	sbcs	r2, r2
    7f6c:	4252      	negs	r2, r2
    7f6e:	18bf      	adds	r7, r7, r2
    7f70:	1c04      	adds	r4, r0, #0
    7f72:	e613      	b.n	7b9c <__aeabi_dsub+0x1f0>
    7f74:	1c10      	adds	r0, r2, #0
    7f76:	9901      	ldr	r1, [sp, #4]
    7f78:	4308      	orrs	r0, r1
    7f7a:	d100      	bne.n	7f7e <__aeabi_dsub+0x5d2>
    7f7c:	e548      	b.n	7a10 <__aeabi_dsub+0x64>
    7f7e:	1a68      	subs	r0, r5, r1
    7f80:	4684      	mov	ip, r0
    7f82:	4285      	cmp	r5, r0
    7f84:	4180      	sbcs	r0, r0
    7f86:	1abe      	subs	r6, r7, r2
    7f88:	4240      	negs	r0, r0
    7f8a:	1a30      	subs	r0, r6, r0
    7f8c:	0206      	lsls	r6, r0, #8
    7f8e:	d400      	bmi.n	7f92 <__aeabi_dsub+0x5e6>
    7f90:	e647      	b.n	7c22 <__aeabi_dsub+0x276>
    7f92:	468c      	mov	ip, r1
    7f94:	1b4d      	subs	r5, r1, r5
    7f96:	45ac      	cmp	ip, r5
    7f98:	4189      	sbcs	r1, r1
    7f9a:	1bd2      	subs	r2, r2, r7
    7f9c:	4249      	negs	r1, r1
    7f9e:	1a57      	subs	r7, r2, r1
    7fa0:	4698      	mov	r8, r3
    7fa2:	e535      	b.n	7a10 <__aeabi_dsub+0x64>
    7fa4:	1c10      	adds	r0, r2, #0
    7fa6:	9901      	ldr	r1, [sp, #4]
    7fa8:	4308      	orrs	r0, r1
    7faa:	d034      	beq.n	8016 <__aeabi_dsub+0x66a>
    7fac:	2480      	movs	r4, #128	; 0x80
    7fae:	0778      	lsls	r0, r7, #29
    7fb0:	08ed      	lsrs	r5, r5, #3
    7fb2:	08ff      	lsrs	r7, r7, #3
    7fb4:	0324      	lsls	r4, r4, #12
    7fb6:	4328      	orrs	r0, r5
    7fb8:	4227      	tst	r7, r4
    7fba:	d008      	beq.n	7fce <__aeabi_dsub+0x622>
    7fbc:	08d6      	lsrs	r6, r2, #3
    7fbe:	4226      	tst	r6, r4
    7fc0:	d105      	bne.n	7fce <__aeabi_dsub+0x622>
    7fc2:	08c9      	lsrs	r1, r1, #3
    7fc4:	0752      	lsls	r2, r2, #29
    7fc6:	430a      	orrs	r2, r1
    7fc8:	1c10      	adds	r0, r2, #0
    7fca:	1c37      	adds	r7, r6, #0
    7fcc:	4698      	mov	r8, r3
    7fce:	00ff      	lsls	r7, r7, #3
    7fd0:	0f42      	lsrs	r2, r0, #29
    7fd2:	4317      	orrs	r7, r2
    7fd4:	00c5      	lsls	r5, r0, #3
    7fd6:	4c24      	ldr	r4, [pc, #144]	; (8068 <__aeabi_dsub+0x6bc>)
    7fd8:	e51a      	b.n	7a10 <__aeabi_dsub+0x64>
    7fda:	4c23      	ldr	r4, [pc, #140]	; (8068 <__aeabi_dsub+0x6bc>)
    7fdc:	42a0      	cmp	r0, r4
    7fde:	d1a2      	bne.n	7f26 <__aeabi_dsub+0x57a>
    7fe0:	1c17      	adds	r7, r2, #0
    7fe2:	9d01      	ldr	r5, [sp, #4]
    7fe4:	1c04      	adds	r4, r0, #0
    7fe6:	e513      	b.n	7a10 <__aeabi_dsub+0x64>
    7fe8:	2b00      	cmp	r3, #0
    7fea:	d035      	beq.n	8058 <__aeabi_dsub+0x6ac>
    7fec:	1c13      	adds	r3, r2, #0
    7fee:	9901      	ldr	r1, [sp, #4]
    7ff0:	430b      	orrs	r3, r1
    7ff2:	d010      	beq.n	8016 <__aeabi_dsub+0x66a>
    7ff4:	2480      	movs	r4, #128	; 0x80
    7ff6:	0778      	lsls	r0, r7, #29
    7ff8:	08ed      	lsrs	r5, r5, #3
    7ffa:	08ff      	lsrs	r7, r7, #3
    7ffc:	0324      	lsls	r4, r4, #12
    7ffe:	4328      	orrs	r0, r5
    8000:	4227      	tst	r7, r4
    8002:	d0e4      	beq.n	7fce <__aeabi_dsub+0x622>
    8004:	08d3      	lsrs	r3, r2, #3
    8006:	4223      	tst	r3, r4
    8008:	d1e1      	bne.n	7fce <__aeabi_dsub+0x622>
    800a:	08c9      	lsrs	r1, r1, #3
    800c:	0752      	lsls	r2, r2, #29
    800e:	430a      	orrs	r2, r1
    8010:	1c10      	adds	r0, r2, #0
    8012:	1c1f      	adds	r7, r3, #0
    8014:	e7db      	b.n	7fce <__aeabi_dsub+0x622>
    8016:	4c14      	ldr	r4, [pc, #80]	; (8068 <__aeabi_dsub+0x6bc>)
    8018:	e4fa      	b.n	7a10 <__aeabi_dsub+0x64>
    801a:	2200      	movs	r2, #0
    801c:	e73f      	b.n	7e9e <__aeabi_dsub+0x4f2>
    801e:	464c      	mov	r4, r9
    8020:	1c3e      	adds	r6, r7, #0
    8022:	3c20      	subs	r4, #32
    8024:	40e6      	lsrs	r6, r4
    8026:	4649      	mov	r1, r9
    8028:	1c34      	adds	r4, r6, #0
    802a:	2920      	cmp	r1, #32
    802c:	d032      	beq.n	8094 <__aeabi_dsub+0x6e8>
    802e:	2640      	movs	r6, #64	; 0x40
    8030:	1a76      	subs	r6, r6, r1
    8032:	40b7      	lsls	r7, r6
    8034:	433d      	orrs	r5, r7
    8036:	1e6f      	subs	r7, r5, #1
    8038:	41bd      	sbcs	r5, r7
    803a:	2700      	movs	r7, #0
    803c:	4325      	orrs	r5, r4
    803e:	e6a8      	b.n	7d92 <__aeabi_dsub+0x3e6>
    8040:	2780      	movs	r7, #128	; 0x80
    8042:	2600      	movs	r6, #0
    8044:	03ff      	lsls	r7, r7, #15
    8046:	4c08      	ldr	r4, [pc, #32]	; (8068 <__aeabi_dsub+0x6bc>)
    8048:	2500      	movs	r5, #0
    804a:	e57c      	b.n	7b46 <__aeabi_dsub+0x19a>
    804c:	433d      	orrs	r5, r7
    804e:	1e6f      	subs	r7, r5, #1
    8050:	41bd      	sbcs	r5, r7
    8052:	2700      	movs	r7, #0
    8054:	b2ed      	uxtb	r5, r5
    8056:	e783      	b.n	7f60 <__aeabi_dsub+0x5b4>
    8058:	1c17      	adds	r7, r2, #0
    805a:	9d01      	ldr	r5, [sp, #4]
    805c:	4c02      	ldr	r4, [pc, #8]	; (8068 <__aeabi_dsub+0x6bc>)
    805e:	e4d7      	b.n	7a10 <__aeabi_dsub+0x64>
    8060:	1c17      	adds	r7, r2, #0
    8062:	9d01      	ldr	r5, [sp, #4]
    8064:	e4d4      	b.n	7a10 <__aeabi_dsub+0x64>
    8066:	46c0      	nop			; (mov r8, r8)
    8068:	000007ff 	.word	0x000007ff
    806c:	ff7fffff 	.word	0xff7fffff
    8070:	4654      	mov	r4, sl
    8072:	1c3b      	adds	r3, r7, #0
    8074:	3c20      	subs	r4, #32
    8076:	40e3      	lsrs	r3, r4
    8078:	1c1c      	adds	r4, r3, #0
    807a:	4653      	mov	r3, sl
    807c:	2b20      	cmp	r3, #32
    807e:	d00d      	beq.n	809c <__aeabi_dsub+0x6f0>
    8080:	2340      	movs	r3, #64	; 0x40
    8082:	4651      	mov	r1, sl
    8084:	1a5b      	subs	r3, r3, r1
    8086:	409f      	lsls	r7, r3
    8088:	433d      	orrs	r5, r7
    808a:	1e6f      	subs	r7, r5, #1
    808c:	41bd      	sbcs	r5, r7
    808e:	2700      	movs	r7, #0
    8090:	4325      	orrs	r5, r4
    8092:	e765      	b.n	7f60 <__aeabi_dsub+0x5b4>
    8094:	2700      	movs	r7, #0
    8096:	e7cd      	b.n	8034 <__aeabi_dsub+0x688>
    8098:	1c0d      	adds	r5, r1, #0
    809a:	e5c8      	b.n	7c2e <__aeabi_dsub+0x282>
    809c:	2700      	movs	r7, #0
    809e:	e7f3      	b.n	8088 <__aeabi_dsub+0x6dc>

000080a0 <__aeabi_f2d>:
    80a0:	0042      	lsls	r2, r0, #1
    80a2:	0e12      	lsrs	r2, r2, #24
    80a4:	1c51      	adds	r1, r2, #1
    80a6:	b538      	push	{r3, r4, r5, lr}
    80a8:	b2c9      	uxtb	r1, r1
    80aa:	0243      	lsls	r3, r0, #9
    80ac:	0a5d      	lsrs	r5, r3, #9
    80ae:	0fc4      	lsrs	r4, r0, #31
    80b0:	2901      	cmp	r1, #1
    80b2:	dd15      	ble.n	80e0 <__aeabi_f2d+0x40>
    80b4:	21e0      	movs	r1, #224	; 0xe0
    80b6:	0089      	lsls	r1, r1, #2
    80b8:	468c      	mov	ip, r1
    80ba:	076d      	lsls	r5, r5, #29
    80bc:	0b1b      	lsrs	r3, r3, #12
    80be:	4462      	add	r2, ip
    80c0:	2100      	movs	r1, #0
    80c2:	1c28      	adds	r0, r5, #0
    80c4:	0d0d      	lsrs	r5, r1, #20
    80c6:	052d      	lsls	r5, r5, #20
    80c8:	432b      	orrs	r3, r5
    80ca:	4d1c      	ldr	r5, [pc, #112]	; (813c <__aeabi_f2d+0x9c>)
    80cc:	0552      	lsls	r2, r2, #21
    80ce:	402b      	ands	r3, r5
    80d0:	0852      	lsrs	r2, r2, #1
    80d2:	4313      	orrs	r3, r2
    80d4:	005b      	lsls	r3, r3, #1
    80d6:	07e4      	lsls	r4, r4, #31
    80d8:	085b      	lsrs	r3, r3, #1
    80da:	4323      	orrs	r3, r4
    80dc:	1c19      	adds	r1, r3, #0
    80de:	bd38      	pop	{r3, r4, r5, pc}
    80e0:	2a00      	cmp	r2, #0
    80e2:	d115      	bne.n	8110 <__aeabi_f2d+0x70>
    80e4:	2d00      	cmp	r5, #0
    80e6:	d01f      	beq.n	8128 <__aeabi_f2d+0x88>
    80e8:	1c28      	adds	r0, r5, #0
    80ea:	f7fe fa51 	bl	6590 <__clzsi2>
    80ee:	280a      	cmp	r0, #10
    80f0:	dc1d      	bgt.n	812e <__aeabi_f2d+0x8e>
    80f2:	230b      	movs	r3, #11
    80f4:	1c2a      	adds	r2, r5, #0
    80f6:	1a1b      	subs	r3, r3, r0
    80f8:	40da      	lsrs	r2, r3
    80fa:	1c13      	adds	r3, r2, #0
    80fc:	1c02      	adds	r2, r0, #0
    80fe:	3215      	adds	r2, #21
    8100:	4095      	lsls	r5, r2
    8102:	4a0f      	ldr	r2, [pc, #60]	; (8140 <__aeabi_f2d+0xa0>)
    8104:	031b      	lsls	r3, r3, #12
    8106:	1a12      	subs	r2, r2, r0
    8108:	0552      	lsls	r2, r2, #21
    810a:	0b1b      	lsrs	r3, r3, #12
    810c:	0d52      	lsrs	r2, r2, #21
    810e:	e7d7      	b.n	80c0 <__aeabi_f2d+0x20>
    8110:	2d00      	cmp	r5, #0
    8112:	d006      	beq.n	8122 <__aeabi_f2d+0x82>
    8114:	2280      	movs	r2, #128	; 0x80
    8116:	0b1b      	lsrs	r3, r3, #12
    8118:	0312      	lsls	r2, r2, #12
    811a:	4313      	orrs	r3, r2
    811c:	076d      	lsls	r5, r5, #29
    811e:	4a09      	ldr	r2, [pc, #36]	; (8144 <__aeabi_f2d+0xa4>)
    8120:	e7ce      	b.n	80c0 <__aeabi_f2d+0x20>
    8122:	4a08      	ldr	r2, [pc, #32]	; (8144 <__aeabi_f2d+0xa4>)
    8124:	2300      	movs	r3, #0
    8126:	e7cb      	b.n	80c0 <__aeabi_f2d+0x20>
    8128:	2200      	movs	r2, #0
    812a:	2300      	movs	r3, #0
    812c:	e7c8      	b.n	80c0 <__aeabi_f2d+0x20>
    812e:	1c03      	adds	r3, r0, #0
    8130:	3b0b      	subs	r3, #11
    8132:	409d      	lsls	r5, r3
    8134:	1c2b      	adds	r3, r5, #0
    8136:	2500      	movs	r5, #0
    8138:	e7e3      	b.n	8102 <__aeabi_f2d+0x62>
    813a:	46c0      	nop			; (mov r8, r8)
    813c:	800fffff 	.word	0x800fffff
    8140:	00000389 	.word	0x00000389
    8144:	000007ff 	.word	0x000007ff

00008148 <__aeabi_d2f>:
    8148:	b570      	push	{r4, r5, r6, lr}
    814a:	030b      	lsls	r3, r1, #12
    814c:	004d      	lsls	r5, r1, #1
    814e:	0f44      	lsrs	r4, r0, #29
    8150:	0d6d      	lsrs	r5, r5, #21
    8152:	0a5b      	lsrs	r3, r3, #9
    8154:	4323      	orrs	r3, r4
    8156:	1c6c      	adds	r4, r5, #1
    8158:	0564      	lsls	r4, r4, #21
    815a:	0fc9      	lsrs	r1, r1, #31
    815c:	00c2      	lsls	r2, r0, #3
    815e:	0d64      	lsrs	r4, r4, #21
    8160:	2c01      	cmp	r4, #1
    8162:	dd2a      	ble.n	81ba <__aeabi_d2f+0x72>
    8164:	4c3b      	ldr	r4, [pc, #236]	; (8254 <__aeabi_d2f+0x10c>)
    8166:	192c      	adds	r4, r5, r4
    8168:	2cfe      	cmp	r4, #254	; 0xfe
    816a:	dc1a      	bgt.n	81a2 <__aeabi_d2f+0x5a>
    816c:	2c00      	cmp	r4, #0
    816e:	dd35      	ble.n	81dc <__aeabi_d2f+0x94>
    8170:	0180      	lsls	r0, r0, #6
    8172:	1e45      	subs	r5, r0, #1
    8174:	41a8      	sbcs	r0, r5
    8176:	00db      	lsls	r3, r3, #3
    8178:	4303      	orrs	r3, r0
    817a:	0f52      	lsrs	r2, r2, #29
    817c:	4313      	orrs	r3, r2
    817e:	075a      	lsls	r2, r3, #29
    8180:	d004      	beq.n	818c <__aeabi_d2f+0x44>
    8182:	220f      	movs	r2, #15
    8184:	401a      	ands	r2, r3
    8186:	2a04      	cmp	r2, #4
    8188:	d000      	beq.n	818c <__aeabi_d2f+0x44>
    818a:	3304      	adds	r3, #4
    818c:	2280      	movs	r2, #128	; 0x80
    818e:	04d2      	lsls	r2, r2, #19
    8190:	401a      	ands	r2, r3
    8192:	d027      	beq.n	81e4 <__aeabi_d2f+0x9c>
    8194:	3401      	adds	r4, #1
    8196:	2cff      	cmp	r4, #255	; 0xff
    8198:	d003      	beq.n	81a2 <__aeabi_d2f+0x5a>
    819a:	019b      	lsls	r3, r3, #6
    819c:	0a5b      	lsrs	r3, r3, #9
    819e:	b2e4      	uxtb	r4, r4
    81a0:	e001      	b.n	81a6 <__aeabi_d2f+0x5e>
    81a2:	24ff      	movs	r4, #255	; 0xff
    81a4:	2300      	movs	r3, #0
    81a6:	025b      	lsls	r3, r3, #9
    81a8:	05e4      	lsls	r4, r4, #23
    81aa:	0a5b      	lsrs	r3, r3, #9
    81ac:	4323      	orrs	r3, r4
    81ae:	005b      	lsls	r3, r3, #1
    81b0:	07c9      	lsls	r1, r1, #31
    81b2:	085b      	lsrs	r3, r3, #1
    81b4:	430b      	orrs	r3, r1
    81b6:	1c18      	adds	r0, r3, #0
    81b8:	bd70      	pop	{r4, r5, r6, pc}
    81ba:	2d00      	cmp	r5, #0
    81bc:	d106      	bne.n	81cc <__aeabi_d2f+0x84>
    81be:	4313      	orrs	r3, r2
    81c0:	d10e      	bne.n	81e0 <__aeabi_d2f+0x98>
    81c2:	2400      	movs	r4, #0
    81c4:	025b      	lsls	r3, r3, #9
    81c6:	0a5b      	lsrs	r3, r3, #9
    81c8:	b2e4      	uxtb	r4, r4
    81ca:	e7ec      	b.n	81a6 <__aeabi_d2f+0x5e>
    81cc:	431a      	orrs	r2, r3
    81ce:	d0e8      	beq.n	81a2 <__aeabi_d2f+0x5a>
    81d0:	2080      	movs	r0, #128	; 0x80
    81d2:	00db      	lsls	r3, r3, #3
    81d4:	0480      	lsls	r0, r0, #18
    81d6:	4303      	orrs	r3, r0
    81d8:	24ff      	movs	r4, #255	; 0xff
    81da:	e7d0      	b.n	817e <__aeabi_d2f+0x36>
    81dc:	3417      	adds	r4, #23
    81de:	da0c      	bge.n	81fa <__aeabi_d2f+0xb2>
    81e0:	2305      	movs	r3, #5
    81e2:	2400      	movs	r4, #0
    81e4:	08db      	lsrs	r3, r3, #3
    81e6:	2cff      	cmp	r4, #255	; 0xff
    81e8:	d1ec      	bne.n	81c4 <__aeabi_d2f+0x7c>
    81ea:	2b00      	cmp	r3, #0
    81ec:	d02d      	beq.n	824a <__aeabi_d2f+0x102>
    81ee:	2280      	movs	r2, #128	; 0x80
    81f0:	03d2      	lsls	r2, r2, #15
    81f2:	4313      	orrs	r3, r2
    81f4:	025b      	lsls	r3, r3, #9
    81f6:	0a5b      	lsrs	r3, r3, #9
    81f8:	e7d5      	b.n	81a6 <__aeabi_d2f+0x5e>
    81fa:	2480      	movs	r4, #128	; 0x80
    81fc:	4816      	ldr	r0, [pc, #88]	; (8258 <__aeabi_d2f+0x110>)
    81fe:	0424      	lsls	r4, r4, #16
    8200:	4323      	orrs	r3, r4
    8202:	1b40      	subs	r0, r0, r5
    8204:	281f      	cmp	r0, #31
    8206:	dc0d      	bgt.n	8224 <__aeabi_d2f+0xdc>
    8208:	4c14      	ldr	r4, [pc, #80]	; (825c <__aeabi_d2f+0x114>)
    820a:	46a4      	mov	ip, r4
    820c:	4465      	add	r5, ip
    820e:	40ab      	lsls	r3, r5
    8210:	1c1c      	adds	r4, r3, #0
    8212:	1c13      	adds	r3, r2, #0
    8214:	40ab      	lsls	r3, r5
    8216:	1e5d      	subs	r5, r3, #1
    8218:	41ab      	sbcs	r3, r5
    821a:	40c2      	lsrs	r2, r0
    821c:	4323      	orrs	r3, r4
    821e:	4313      	orrs	r3, r2
    8220:	2400      	movs	r4, #0
    8222:	e7ac      	b.n	817e <__aeabi_d2f+0x36>
    8224:	1c1e      	adds	r6, r3, #0
    8226:	4c0e      	ldr	r4, [pc, #56]	; (8260 <__aeabi_d2f+0x118>)
    8228:	1b64      	subs	r4, r4, r5
    822a:	40e6      	lsrs	r6, r4
    822c:	1c34      	adds	r4, r6, #0
    822e:	2820      	cmp	r0, #32
    8230:	d00d      	beq.n	824e <__aeabi_d2f+0x106>
    8232:	480c      	ldr	r0, [pc, #48]	; (8264 <__aeabi_d2f+0x11c>)
    8234:	4684      	mov	ip, r0
    8236:	4465      	add	r5, ip
    8238:	40ab      	lsls	r3, r5
    823a:	1c1d      	adds	r5, r3, #0
    823c:	432a      	orrs	r2, r5
    823e:	1e53      	subs	r3, r2, #1
    8240:	419a      	sbcs	r2, r3
    8242:	1c13      	adds	r3, r2, #0
    8244:	4323      	orrs	r3, r4
    8246:	2400      	movs	r4, #0
    8248:	e799      	b.n	817e <__aeabi_d2f+0x36>
    824a:	2300      	movs	r3, #0
    824c:	e7ab      	b.n	81a6 <__aeabi_d2f+0x5e>
    824e:	2500      	movs	r5, #0
    8250:	e7f4      	b.n	823c <__aeabi_d2f+0xf4>
    8252:	46c0      	nop			; (mov r8, r8)
    8254:	fffffc80 	.word	0xfffffc80
    8258:	0000039e 	.word	0x0000039e
    825c:	fffffc82 	.word	0xfffffc82
    8260:	0000037e 	.word	0x0000037e
    8264:	fffffca2 	.word	0xfffffca2

00008268 <__aeabi_cfrcmple>:
    8268:	4684      	mov	ip, r0
    826a:	1c08      	adds	r0, r1, #0
    826c:	4661      	mov	r1, ip
    826e:	e7ff      	b.n	8270 <__aeabi_cfcmpeq>

00008270 <__aeabi_cfcmpeq>:
    8270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8272:	f000 fa4b 	bl	870c <__lesf2>
    8276:	2800      	cmp	r0, #0
    8278:	d401      	bmi.n	827e <__aeabi_cfcmpeq+0xe>
    827a:	2100      	movs	r1, #0
    827c:	42c8      	cmn	r0, r1
    827e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008280 <__aeabi_fcmpeq>:
    8280:	b510      	push	{r4, lr}
    8282:	f000 f9cf 	bl	8624 <__eqsf2>
    8286:	4240      	negs	r0, r0
    8288:	3001      	adds	r0, #1
    828a:	bd10      	pop	{r4, pc}

0000828c <__aeabi_fcmplt>:
    828c:	b510      	push	{r4, lr}
    828e:	f000 fa3d 	bl	870c <__lesf2>
    8292:	2800      	cmp	r0, #0
    8294:	db01      	blt.n	829a <__aeabi_fcmplt+0xe>
    8296:	2000      	movs	r0, #0
    8298:	bd10      	pop	{r4, pc}
    829a:	2001      	movs	r0, #1
    829c:	bd10      	pop	{r4, pc}
    829e:	46c0      	nop			; (mov r8, r8)

000082a0 <__aeabi_fcmple>:
    82a0:	b510      	push	{r4, lr}
    82a2:	f000 fa33 	bl	870c <__lesf2>
    82a6:	2800      	cmp	r0, #0
    82a8:	dd01      	ble.n	82ae <__aeabi_fcmple+0xe>
    82aa:	2000      	movs	r0, #0
    82ac:	bd10      	pop	{r4, pc}
    82ae:	2001      	movs	r0, #1
    82b0:	bd10      	pop	{r4, pc}
    82b2:	46c0      	nop			; (mov r8, r8)

000082b4 <__aeabi_fcmpgt>:
    82b4:	b510      	push	{r4, lr}
    82b6:	f000 f9df 	bl	8678 <__gesf2>
    82ba:	2800      	cmp	r0, #0
    82bc:	dc01      	bgt.n	82c2 <__aeabi_fcmpgt+0xe>
    82be:	2000      	movs	r0, #0
    82c0:	bd10      	pop	{r4, pc}
    82c2:	2001      	movs	r0, #1
    82c4:	bd10      	pop	{r4, pc}
    82c6:	46c0      	nop			; (mov r8, r8)

000082c8 <__aeabi_fcmpge>:
    82c8:	b510      	push	{r4, lr}
    82ca:	f000 f9d5 	bl	8678 <__gesf2>
    82ce:	2800      	cmp	r0, #0
    82d0:	da01      	bge.n	82d6 <__aeabi_fcmpge+0xe>
    82d2:	2000      	movs	r0, #0
    82d4:	bd10      	pop	{r4, pc}
    82d6:	2001      	movs	r0, #1
    82d8:	bd10      	pop	{r4, pc}
    82da:	46c0      	nop			; (mov r8, r8)

000082dc <__divdi3>:
    82dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    82de:	4644      	mov	r4, r8
    82e0:	465f      	mov	r7, fp
    82e2:	4656      	mov	r6, sl
    82e4:	464d      	mov	r5, r9
    82e6:	b4f0      	push	{r4, r5, r6, r7}
    82e8:	1c1c      	adds	r4, r3, #0
    82ea:	b085      	sub	sp, #20
    82ec:	2900      	cmp	r1, #0
    82ee:	da00      	bge.n	82f2 <__divdi3+0x16>
    82f0:	e0a9      	b.n	8446 <__divdi3+0x16a>
    82f2:	1c0f      	adds	r7, r1, #0
    82f4:	2100      	movs	r1, #0
    82f6:	1c06      	adds	r6, r0, #0
    82f8:	4688      	mov	r8, r1
    82fa:	1c10      	adds	r0, r2, #0
    82fc:	1c19      	adds	r1, r3, #0
    82fe:	2c00      	cmp	r4, #0
    8300:	da00      	bge.n	8304 <__divdi3+0x28>
    8302:	e097      	b.n	8434 <__divdi3+0x158>
    8304:	1c34      	adds	r4, r6, #0
    8306:	1c3d      	adds	r5, r7, #0
    8308:	4682      	mov	sl, r0
    830a:	4689      	mov	r9, r1
    830c:	42b9      	cmp	r1, r7
    830e:	d873      	bhi.n	83f8 <__divdi3+0x11c>
    8310:	d070      	beq.n	83f4 <__divdi3+0x118>
    8312:	4649      	mov	r1, r9
    8314:	4650      	mov	r0, sl
    8316:	f000 fa3f 	bl	8798 <__clzdi2>
    831a:	4683      	mov	fp, r0
    831c:	1c39      	adds	r1, r7, #0
    831e:	1c30      	adds	r0, r6, #0
    8320:	f000 fa3a 	bl	8798 <__clzdi2>
    8324:	465b      	mov	r3, fp
    8326:	1a18      	subs	r0, r3, r0
    8328:	1c03      	adds	r3, r0, #0
    832a:	4683      	mov	fp, r0
    832c:	3b20      	subs	r3, #32
    832e:	469c      	mov	ip, r3
    8330:	d500      	bpl.n	8334 <__divdi3+0x58>
    8332:	e09c      	b.n	846e <__divdi3+0x192>
    8334:	2300      	movs	r3, #0
    8336:	2200      	movs	r2, #0
    8338:	4651      	mov	r1, sl
    833a:	9200      	str	r2, [sp, #0]
    833c:	9301      	str	r3, [sp, #4]
    833e:	4663      	mov	r3, ip
    8340:	4099      	lsls	r1, r3
    8342:	9101      	str	r1, [sp, #4]
    8344:	4651      	mov	r1, sl
    8346:	4081      	lsls	r1, r0
    8348:	9b01      	ldr	r3, [sp, #4]
    834a:	9100      	str	r1, [sp, #0]
    834c:	42bb      	cmp	r3, r7
    834e:	d900      	bls.n	8352 <__divdi3+0x76>
    8350:	e083      	b.n	845a <__divdi3+0x17e>
    8352:	d100      	bne.n	8356 <__divdi3+0x7a>
    8354:	e07e      	b.n	8454 <__divdi3+0x178>
    8356:	9a00      	ldr	r2, [sp, #0]
    8358:	9b01      	ldr	r3, [sp, #4]
    835a:	1c34      	adds	r4, r6, #0
    835c:	1c3d      	adds	r5, r7, #0
    835e:	1aa4      	subs	r4, r4, r2
    8360:	419d      	sbcs	r5, r3
    8362:	4663      	mov	r3, ip
    8364:	2b00      	cmp	r3, #0
    8366:	da00      	bge.n	836a <__divdi3+0x8e>
    8368:	e09a      	b.n	84a0 <__divdi3+0x1c4>
    836a:	2600      	movs	r6, #0
    836c:	2700      	movs	r7, #0
    836e:	9602      	str	r6, [sp, #8]
    8370:	9703      	str	r7, [sp, #12]
    8372:	3601      	adds	r6, #1
    8374:	409e      	lsls	r6, r3
    8376:	9603      	str	r6, [sp, #12]
    8378:	2601      	movs	r6, #1
    837a:	4086      	lsls	r6, r0
    837c:	9602      	str	r6, [sp, #8]
    837e:	2800      	cmp	r0, #0
    8380:	d100      	bne.n	8384 <__divdi3+0xa8>
    8382:	e071      	b.n	8468 <__divdi3+0x18c>
    8384:	9900      	ldr	r1, [sp, #0]
    8386:	9a01      	ldr	r2, [sp, #4]
    8388:	07d3      	lsls	r3, r2, #31
    838a:	4699      	mov	r9, r3
    838c:	464b      	mov	r3, r9
    838e:	084e      	lsrs	r6, r1, #1
    8390:	431e      	orrs	r6, r3
    8392:	0857      	lsrs	r7, r2, #1
    8394:	2300      	movs	r3, #0
    8396:	2201      	movs	r2, #1
    8398:	e00c      	b.n	83b4 <__divdi3+0xd8>
    839a:	42af      	cmp	r7, r5
    839c:	d101      	bne.n	83a2 <__divdi3+0xc6>
    839e:	42a6      	cmp	r6, r4
    83a0:	d80a      	bhi.n	83b8 <__divdi3+0xdc>
    83a2:	1ba4      	subs	r4, r4, r6
    83a4:	41bd      	sbcs	r5, r7
    83a6:	1924      	adds	r4, r4, r4
    83a8:	416d      	adcs	r5, r5
    83aa:	3801      	subs	r0, #1
    83ac:	18a4      	adds	r4, r4, r2
    83ae:	415d      	adcs	r5, r3
    83b0:	2800      	cmp	r0, #0
    83b2:	d006      	beq.n	83c2 <__divdi3+0xe6>
    83b4:	42af      	cmp	r7, r5
    83b6:	d9f0      	bls.n	839a <__divdi3+0xbe>
    83b8:	3801      	subs	r0, #1
    83ba:	1924      	adds	r4, r4, r4
    83bc:	416d      	adcs	r5, r5
    83be:	2800      	cmp	r0, #0
    83c0:	d1f8      	bne.n	83b4 <__divdi3+0xd8>
    83c2:	2220      	movs	r2, #32
    83c4:	9e02      	ldr	r6, [sp, #8]
    83c6:	9f03      	ldr	r7, [sp, #12]
    83c8:	465b      	mov	r3, fp
    83ca:	4252      	negs	r2, r2
    83cc:	1936      	adds	r6, r6, r4
    83ce:	416f      	adcs	r7, r5
    83d0:	1899      	adds	r1, r3, r2
    83d2:	d45a      	bmi.n	848a <__divdi3+0x1ae>
    83d4:	1c28      	adds	r0, r5, #0
    83d6:	40c8      	lsrs	r0, r1
    83d8:	1c2c      	adds	r4, r5, #0
    83da:	465b      	mov	r3, fp
    83dc:	40dc      	lsrs	r4, r3
    83de:	2900      	cmp	r1, #0
    83e0:	db68      	blt.n	84b4 <__divdi3+0x1d8>
    83e2:	1c04      	adds	r4, r0, #0
    83e4:	408c      	lsls	r4, r1
    83e6:	1c23      	adds	r3, r4, #0
    83e8:	4659      	mov	r1, fp
    83ea:	4088      	lsls	r0, r1
    83ec:	1c02      	adds	r2, r0, #0
    83ee:	1ab6      	subs	r6, r6, r2
    83f0:	419f      	sbcs	r7, r3
    83f2:	e003      	b.n	83fc <__divdi3+0x120>
    83f4:	42b0      	cmp	r0, r6
    83f6:	d98c      	bls.n	8312 <__divdi3+0x36>
    83f8:	2600      	movs	r6, #0
    83fa:	2700      	movs	r7, #0
    83fc:	4641      	mov	r1, r8
    83fe:	1e4b      	subs	r3, r1, #1
    8400:	4199      	sbcs	r1, r3
    8402:	2300      	movs	r3, #0
    8404:	9100      	str	r1, [sp, #0]
    8406:	9301      	str	r3, [sp, #4]
    8408:	9a00      	ldr	r2, [sp, #0]
    840a:	9b01      	ldr	r3, [sp, #4]
    840c:	2500      	movs	r5, #0
    840e:	4254      	negs	r4, r2
    8410:	419d      	sbcs	r5, r3
    8412:	1c33      	adds	r3, r6, #0
    8414:	4063      	eors	r3, r4
    8416:	1c18      	adds	r0, r3, #0
    8418:	1c3b      	adds	r3, r7, #0
    841a:	406b      	eors	r3, r5
    841c:	1c19      	adds	r1, r3, #0
    841e:	9b00      	ldr	r3, [sp, #0]
    8420:	9c01      	ldr	r4, [sp, #4]
    8422:	18c0      	adds	r0, r0, r3
    8424:	4161      	adcs	r1, r4
    8426:	b005      	add	sp, #20
    8428:	bc3c      	pop	{r2, r3, r4, r5}
    842a:	4690      	mov	r8, r2
    842c:	4699      	mov	r9, r3
    842e:	46a2      	mov	sl, r4
    8430:	46ab      	mov	fp, r5
    8432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8434:	4643      	mov	r3, r8
    8436:	43db      	mvns	r3, r3
    8438:	1c0c      	adds	r4, r1, #0
    843a:	4698      	mov	r8, r3
    843c:	1c13      	adds	r3, r2, #0
    843e:	2100      	movs	r1, #0
    8440:	4258      	negs	r0, r3
    8442:	41a1      	sbcs	r1, r4
    8444:	e75e      	b.n	8304 <__divdi3+0x28>
    8446:	2700      	movs	r7, #0
    8448:	4246      	negs	r6, r0
    844a:	418f      	sbcs	r7, r1
    844c:	2101      	movs	r1, #1
    844e:	4249      	negs	r1, r1
    8450:	4688      	mov	r8, r1
    8452:	e752      	b.n	82fa <__divdi3+0x1e>
    8454:	42b1      	cmp	r1, r6
    8456:	d800      	bhi.n	845a <__divdi3+0x17e>
    8458:	e77d      	b.n	8356 <__divdi3+0x7a>
    845a:	2600      	movs	r6, #0
    845c:	2700      	movs	r7, #0
    845e:	9602      	str	r6, [sp, #8]
    8460:	9703      	str	r7, [sp, #12]
    8462:	2800      	cmp	r0, #0
    8464:	d000      	beq.n	8468 <__divdi3+0x18c>
    8466:	e78d      	b.n	8384 <__divdi3+0xa8>
    8468:	9e02      	ldr	r6, [sp, #8]
    846a:	9f03      	ldr	r7, [sp, #12]
    846c:	e7c6      	b.n	83fc <__divdi3+0x120>
    846e:	2120      	movs	r1, #32
    8470:	4653      	mov	r3, sl
    8472:	1a09      	subs	r1, r1, r0
    8474:	40cb      	lsrs	r3, r1
    8476:	2200      	movs	r2, #0
    8478:	1c19      	adds	r1, r3, #0
    847a:	2300      	movs	r3, #0
    847c:	9200      	str	r2, [sp, #0]
    847e:	9301      	str	r3, [sp, #4]
    8480:	464b      	mov	r3, r9
    8482:	4083      	lsls	r3, r0
    8484:	430b      	orrs	r3, r1
    8486:	9301      	str	r3, [sp, #4]
    8488:	e75c      	b.n	8344 <__divdi3+0x68>
    848a:	465a      	mov	r2, fp
    848c:	2320      	movs	r3, #32
    848e:	1a9b      	subs	r3, r3, r2
    8490:	1c2a      	adds	r2, r5, #0
    8492:	409a      	lsls	r2, r3
    8494:	1c20      	adds	r0, r4, #0
    8496:	1c13      	adds	r3, r2, #0
    8498:	465a      	mov	r2, fp
    849a:	40d0      	lsrs	r0, r2
    849c:	4318      	orrs	r0, r3
    849e:	e79b      	b.n	83d8 <__divdi3+0xfc>
    84a0:	2620      	movs	r6, #32
    84a2:	2700      	movs	r7, #0
    84a4:	1a33      	subs	r3, r6, r0
    84a6:	2600      	movs	r6, #0
    84a8:	9602      	str	r6, [sp, #8]
    84aa:	9703      	str	r7, [sp, #12]
    84ac:	2701      	movs	r7, #1
    84ae:	40df      	lsrs	r7, r3
    84b0:	9703      	str	r7, [sp, #12]
    84b2:	e761      	b.n	8378 <__divdi3+0x9c>
    84b4:	465b      	mov	r3, fp
    84b6:	2120      	movs	r1, #32
    84b8:	465d      	mov	r5, fp
    84ba:	1ac9      	subs	r1, r1, r3
    84bc:	1c03      	adds	r3, r0, #0
    84be:	40ac      	lsls	r4, r5
    84c0:	40cb      	lsrs	r3, r1
    84c2:	1c19      	adds	r1, r3, #0
    84c4:	1c23      	adds	r3, r4, #0
    84c6:	430b      	orrs	r3, r1
    84c8:	e78e      	b.n	83e8 <__divdi3+0x10c>
    84ca:	46c0      	nop			; (mov r8, r8)

000084cc <__udivdi3>:
    84cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    84ce:	4645      	mov	r5, r8
    84d0:	464e      	mov	r6, r9
    84d2:	4657      	mov	r7, sl
    84d4:	b4e0      	push	{r5, r6, r7}
    84d6:	1c04      	adds	r4, r0, #0
    84d8:	b082      	sub	sp, #8
    84da:	1c0d      	adds	r5, r1, #0
    84dc:	4691      	mov	r9, r2
    84de:	4698      	mov	r8, r3
    84e0:	428b      	cmp	r3, r1
    84e2:	d862      	bhi.n	85aa <__udivdi3+0xde>
    84e4:	d05f      	beq.n	85a6 <__udivdi3+0xda>
    84e6:	4641      	mov	r1, r8
    84e8:	4648      	mov	r0, r9
    84ea:	f000 f955 	bl	8798 <__clzdi2>
    84ee:	1c29      	adds	r1, r5, #0
    84f0:	1c06      	adds	r6, r0, #0
    84f2:	1c20      	adds	r0, r4, #0
    84f4:	f000 f950 	bl	8798 <__clzdi2>
    84f8:	2320      	movs	r3, #32
    84fa:	1a31      	subs	r1, r6, r0
    84fc:	425b      	negs	r3, r3
    84fe:	468a      	mov	sl, r1
    8500:	18c8      	adds	r0, r1, r3
    8502:	d465      	bmi.n	85d0 <__udivdi3+0x104>
    8504:	464b      	mov	r3, r9
    8506:	4083      	lsls	r3, r0
    8508:	1c1f      	adds	r7, r3, #0
    850a:	464b      	mov	r3, r9
    850c:	408b      	lsls	r3, r1
    850e:	1c1e      	adds	r6, r3, #0
    8510:	42af      	cmp	r7, r5
    8512:	d858      	bhi.n	85c6 <__udivdi3+0xfa>
    8514:	d055      	beq.n	85c2 <__udivdi3+0xf6>
    8516:	1ba4      	subs	r4, r4, r6
    8518:	41bd      	sbcs	r5, r7
    851a:	2800      	cmp	r0, #0
    851c:	da00      	bge.n	8520 <__udivdi3+0x54>
    851e:	e077      	b.n	8610 <__udivdi3+0x144>
    8520:	2200      	movs	r2, #0
    8522:	2300      	movs	r3, #0
    8524:	9200      	str	r2, [sp, #0]
    8526:	9301      	str	r3, [sp, #4]
    8528:	3201      	adds	r2, #1
    852a:	4082      	lsls	r2, r0
    852c:	9201      	str	r2, [sp, #4]
    852e:	2301      	movs	r3, #1
    8530:	408b      	lsls	r3, r1
    8532:	9300      	str	r3, [sp, #0]
    8534:	2900      	cmp	r1, #0
    8536:	d03c      	beq.n	85b2 <__udivdi3+0xe6>
    8538:	07fb      	lsls	r3, r7, #31
    853a:	4698      	mov	r8, r3
    853c:	4640      	mov	r0, r8
    853e:	0872      	lsrs	r2, r6, #1
    8540:	087b      	lsrs	r3, r7, #1
    8542:	4302      	orrs	r2, r0
    8544:	2601      	movs	r6, #1
    8546:	2700      	movs	r7, #0
    8548:	e00c      	b.n	8564 <__udivdi3+0x98>
    854a:	42ab      	cmp	r3, r5
    854c:	d101      	bne.n	8552 <__udivdi3+0x86>
    854e:	42a2      	cmp	r2, r4
    8550:	d80a      	bhi.n	8568 <__udivdi3+0x9c>
    8552:	1aa4      	subs	r4, r4, r2
    8554:	419d      	sbcs	r5, r3
    8556:	1924      	adds	r4, r4, r4
    8558:	416d      	adcs	r5, r5
    855a:	3901      	subs	r1, #1
    855c:	19a4      	adds	r4, r4, r6
    855e:	417d      	adcs	r5, r7
    8560:	2900      	cmp	r1, #0
    8562:	d006      	beq.n	8572 <__udivdi3+0xa6>
    8564:	42ab      	cmp	r3, r5
    8566:	d9f0      	bls.n	854a <__udivdi3+0x7e>
    8568:	3901      	subs	r1, #1
    856a:	1924      	adds	r4, r4, r4
    856c:	416d      	adcs	r5, r5
    856e:	2900      	cmp	r1, #0
    8570:	d1f8      	bne.n	8564 <__udivdi3+0x98>
    8572:	2220      	movs	r2, #32
    8574:	9800      	ldr	r0, [sp, #0]
    8576:	9901      	ldr	r1, [sp, #4]
    8578:	4653      	mov	r3, sl
    857a:	4252      	negs	r2, r2
    857c:	1900      	adds	r0, r0, r4
    857e:	4169      	adcs	r1, r5
    8580:	189e      	adds	r6, r3, r2
    8582:	d43a      	bmi.n	85fa <__udivdi3+0x12e>
    8584:	1c2f      	adds	r7, r5, #0
    8586:	40f7      	lsrs	r7, r6
    8588:	4653      	mov	r3, sl
    858a:	40dd      	lsrs	r5, r3
    858c:	2e00      	cmp	r6, #0
    858e:	db29      	blt.n	85e4 <__udivdi3+0x118>
    8590:	1c3c      	adds	r4, r7, #0
    8592:	40b4      	lsls	r4, r6
    8594:	1c23      	adds	r3, r4, #0
    8596:	4654      	mov	r4, sl
    8598:	40a7      	lsls	r7, r4
    859a:	1c3a      	adds	r2, r7, #0
    859c:	1a80      	subs	r0, r0, r2
    859e:	4199      	sbcs	r1, r3
    85a0:	9000      	str	r0, [sp, #0]
    85a2:	9101      	str	r1, [sp, #4]
    85a4:	e005      	b.n	85b2 <__udivdi3+0xe6>
    85a6:	4282      	cmp	r2, r0
    85a8:	d99d      	bls.n	84e6 <__udivdi3+0x1a>
    85aa:	2300      	movs	r3, #0
    85ac:	2400      	movs	r4, #0
    85ae:	9300      	str	r3, [sp, #0]
    85b0:	9401      	str	r4, [sp, #4]
    85b2:	9800      	ldr	r0, [sp, #0]
    85b4:	9901      	ldr	r1, [sp, #4]
    85b6:	b002      	add	sp, #8
    85b8:	bc1c      	pop	{r2, r3, r4}
    85ba:	4690      	mov	r8, r2
    85bc:	4699      	mov	r9, r3
    85be:	46a2      	mov	sl, r4
    85c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85c2:	42a3      	cmp	r3, r4
    85c4:	d9a7      	bls.n	8516 <__udivdi3+0x4a>
    85c6:	2200      	movs	r2, #0
    85c8:	2300      	movs	r3, #0
    85ca:	9200      	str	r2, [sp, #0]
    85cc:	9301      	str	r3, [sp, #4]
    85ce:	e7b1      	b.n	8534 <__udivdi3+0x68>
    85d0:	2220      	movs	r2, #32
    85d2:	464b      	mov	r3, r9
    85d4:	1a52      	subs	r2, r2, r1
    85d6:	40d3      	lsrs	r3, r2
    85d8:	1c1a      	adds	r2, r3, #0
    85da:	4643      	mov	r3, r8
    85dc:	408b      	lsls	r3, r1
    85de:	1c1f      	adds	r7, r3, #0
    85e0:	4317      	orrs	r7, r2
    85e2:	e792      	b.n	850a <__udivdi3+0x3e>
    85e4:	4653      	mov	r3, sl
    85e6:	2420      	movs	r4, #32
    85e8:	4656      	mov	r6, sl
    85ea:	1ae4      	subs	r4, r4, r3
    85ec:	1c3b      	adds	r3, r7, #0
    85ee:	40b5      	lsls	r5, r6
    85f0:	40e3      	lsrs	r3, r4
    85f2:	1c1c      	adds	r4, r3, #0
    85f4:	1c2b      	adds	r3, r5, #0
    85f6:	4323      	orrs	r3, r4
    85f8:	e7cd      	b.n	8596 <__udivdi3+0xca>
    85fa:	4652      	mov	r2, sl
    85fc:	2320      	movs	r3, #32
    85fe:	1a9b      	subs	r3, r3, r2
    8600:	1c2a      	adds	r2, r5, #0
    8602:	409a      	lsls	r2, r3
    8604:	1c27      	adds	r7, r4, #0
    8606:	1c13      	adds	r3, r2, #0
    8608:	4652      	mov	r2, sl
    860a:	40d7      	lsrs	r7, r2
    860c:	431f      	orrs	r7, r3
    860e:	e7bb      	b.n	8588 <__udivdi3+0xbc>
    8610:	2320      	movs	r3, #32
    8612:	2200      	movs	r2, #0
    8614:	1a58      	subs	r0, r3, r1
    8616:	2300      	movs	r3, #0
    8618:	9200      	str	r2, [sp, #0]
    861a:	9301      	str	r3, [sp, #4]
    861c:	3201      	adds	r2, #1
    861e:	40c2      	lsrs	r2, r0
    8620:	9201      	str	r2, [sp, #4]
    8622:	e784      	b.n	852e <__udivdi3+0x62>

00008624 <__eqsf2>:
    8624:	0243      	lsls	r3, r0, #9
    8626:	b570      	push	{r4, r5, r6, lr}
    8628:	0042      	lsls	r2, r0, #1
    862a:	004c      	lsls	r4, r1, #1
    862c:	0a5d      	lsrs	r5, r3, #9
    862e:	0fc3      	lsrs	r3, r0, #31
    8630:	0248      	lsls	r0, r1, #9
    8632:	0e12      	lsrs	r2, r2, #24
    8634:	0a46      	lsrs	r6, r0, #9
    8636:	0e24      	lsrs	r4, r4, #24
    8638:	0fc9      	lsrs	r1, r1, #31
    863a:	2aff      	cmp	r2, #255	; 0xff
    863c:	d005      	beq.n	864a <__eqsf2+0x26>
    863e:	2cff      	cmp	r4, #255	; 0xff
    8640:	d008      	beq.n	8654 <__eqsf2+0x30>
    8642:	2001      	movs	r0, #1
    8644:	42a2      	cmp	r2, r4
    8646:	d00b      	beq.n	8660 <__eqsf2+0x3c>
    8648:	bd70      	pop	{r4, r5, r6, pc}
    864a:	2001      	movs	r0, #1
    864c:	2d00      	cmp	r5, #0
    864e:	d1fb      	bne.n	8648 <__eqsf2+0x24>
    8650:	2cff      	cmp	r4, #255	; 0xff
    8652:	d1f6      	bne.n	8642 <__eqsf2+0x1e>
    8654:	2001      	movs	r0, #1
    8656:	2e00      	cmp	r6, #0
    8658:	d1f6      	bne.n	8648 <__eqsf2+0x24>
    865a:	2001      	movs	r0, #1
    865c:	42a2      	cmp	r2, r4
    865e:	d1f3      	bne.n	8648 <__eqsf2+0x24>
    8660:	42b5      	cmp	r5, r6
    8662:	d1f1      	bne.n	8648 <__eqsf2+0x24>
    8664:	428b      	cmp	r3, r1
    8666:	d005      	beq.n	8674 <__eqsf2+0x50>
    8668:	2a00      	cmp	r2, #0
    866a:	d1ed      	bne.n	8648 <__eqsf2+0x24>
    866c:	1c28      	adds	r0, r5, #0
    866e:	1e43      	subs	r3, r0, #1
    8670:	4198      	sbcs	r0, r3
    8672:	e7e9      	b.n	8648 <__eqsf2+0x24>
    8674:	2000      	movs	r0, #0
    8676:	e7e7      	b.n	8648 <__eqsf2+0x24>

00008678 <__gesf2>:
    8678:	b5f0      	push	{r4, r5, r6, r7, lr}
    867a:	0243      	lsls	r3, r0, #9
    867c:	024d      	lsls	r5, r1, #9
    867e:	004a      	lsls	r2, r1, #1
    8680:	0044      	lsls	r4, r0, #1
    8682:	0a5e      	lsrs	r6, r3, #9
    8684:	0e24      	lsrs	r4, r4, #24
    8686:	0fc3      	lsrs	r3, r0, #31
    8688:	0a6d      	lsrs	r5, r5, #9
    868a:	0e12      	lsrs	r2, r2, #24
    868c:	0fc9      	lsrs	r1, r1, #31
    868e:	2cff      	cmp	r4, #255	; 0xff
    8690:	d00d      	beq.n	86ae <__gesf2+0x36>
    8692:	2aff      	cmp	r2, #255	; 0xff
    8694:	d031      	beq.n	86fa <__gesf2+0x82>
    8696:	2c00      	cmp	r4, #0
    8698:	d10d      	bne.n	86b6 <__gesf2+0x3e>
    869a:	4277      	negs	r7, r6
    869c:	4177      	adcs	r7, r6
    869e:	2a00      	cmp	r2, #0
    86a0:	d123      	bne.n	86ea <__gesf2+0x72>
    86a2:	2d00      	cmp	r5, #0
    86a4:	d121      	bne.n	86ea <__gesf2+0x72>
    86a6:	2000      	movs	r0, #0
    86a8:	2f00      	cmp	r7, #0
    86aa:	d10b      	bne.n	86c4 <__gesf2+0x4c>
    86ac:	e007      	b.n	86be <__gesf2+0x46>
    86ae:	2e00      	cmp	r6, #0
    86b0:	d128      	bne.n	8704 <__gesf2+0x8c>
    86b2:	2aff      	cmp	r2, #255	; 0xff
    86b4:	d021      	beq.n	86fa <__gesf2+0x82>
    86b6:	2a00      	cmp	r2, #0
    86b8:	d005      	beq.n	86c6 <__gesf2+0x4e>
    86ba:	428b      	cmp	r3, r1
    86bc:	d007      	beq.n	86ce <__gesf2+0x56>
    86be:	4258      	negs	r0, r3
    86c0:	2301      	movs	r3, #1
    86c2:	4318      	orrs	r0, r3
    86c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86c6:	2d00      	cmp	r5, #0
    86c8:	d0f9      	beq.n	86be <__gesf2+0x46>
    86ca:	428b      	cmp	r3, r1
    86cc:	d1f7      	bne.n	86be <__gesf2+0x46>
    86ce:	4294      	cmp	r4, r2
    86d0:	dcf5      	bgt.n	86be <__gesf2+0x46>
    86d2:	db04      	blt.n	86de <__gesf2+0x66>
    86d4:	42ae      	cmp	r6, r5
    86d6:	d8f2      	bhi.n	86be <__gesf2+0x46>
    86d8:	2000      	movs	r0, #0
    86da:	42ae      	cmp	r6, r5
    86dc:	d2f2      	bcs.n	86c4 <__gesf2+0x4c>
    86de:	4258      	negs	r0, r3
    86e0:	4143      	adcs	r3, r0
    86e2:	2001      	movs	r0, #1
    86e4:	425b      	negs	r3, r3
    86e6:	4318      	orrs	r0, r3
    86e8:	e7ec      	b.n	86c4 <__gesf2+0x4c>
    86ea:	2f00      	cmp	r7, #0
    86ec:	d0e5      	beq.n	86ba <__gesf2+0x42>
    86ee:	4248      	negs	r0, r1
    86f0:	4141      	adcs	r1, r0
    86f2:	2001      	movs	r0, #1
    86f4:	4249      	negs	r1, r1
    86f6:	4308      	orrs	r0, r1
    86f8:	e7e4      	b.n	86c4 <__gesf2+0x4c>
    86fa:	2d00      	cmp	r5, #0
    86fc:	d102      	bne.n	8704 <__gesf2+0x8c>
    86fe:	2c00      	cmp	r4, #0
    8700:	d0cb      	beq.n	869a <__gesf2+0x22>
    8702:	e7da      	b.n	86ba <__gesf2+0x42>
    8704:	2002      	movs	r0, #2
    8706:	4240      	negs	r0, r0
    8708:	e7dc      	b.n	86c4 <__gesf2+0x4c>
    870a:	46c0      	nop			; (mov r8, r8)

0000870c <__lesf2>:
    870c:	0243      	lsls	r3, r0, #9
    870e:	b5f0      	push	{r4, r5, r6, r7, lr}
    8710:	0042      	lsls	r2, r0, #1
    8712:	004c      	lsls	r4, r1, #1
    8714:	0a5e      	lsrs	r6, r3, #9
    8716:	0fc3      	lsrs	r3, r0, #31
    8718:	0248      	lsls	r0, r1, #9
    871a:	0e12      	lsrs	r2, r2, #24
    871c:	0a45      	lsrs	r5, r0, #9
    871e:	0e24      	lsrs	r4, r4, #24
    8720:	0fc9      	lsrs	r1, r1, #31
    8722:	2aff      	cmp	r2, #255	; 0xff
    8724:	d00f      	beq.n	8746 <__lesf2+0x3a>
    8726:	2cff      	cmp	r4, #255	; 0xff
    8728:	d01a      	beq.n	8760 <__lesf2+0x54>
    872a:	2a00      	cmp	r2, #0
    872c:	d110      	bne.n	8750 <__lesf2+0x44>
    872e:	4277      	negs	r7, r6
    8730:	4177      	adcs	r7, r6
    8732:	2c00      	cmp	r4, #0
    8734:	d029      	beq.n	878a <__lesf2+0x7e>
    8736:	2f00      	cmp	r7, #0
    8738:	d017      	beq.n	876a <__lesf2+0x5e>
    873a:	4248      	negs	r0, r1
    873c:	4141      	adcs	r1, r0
    873e:	2001      	movs	r0, #1
    8740:	4249      	negs	r1, r1
    8742:	4308      	orrs	r0, r1
    8744:	e00b      	b.n	875e <__lesf2+0x52>
    8746:	2002      	movs	r0, #2
    8748:	2e00      	cmp	r6, #0
    874a:	d108      	bne.n	875e <__lesf2+0x52>
    874c:	2cff      	cmp	r4, #255	; 0xff
    874e:	d007      	beq.n	8760 <__lesf2+0x54>
    8750:	2c00      	cmp	r4, #0
    8752:	d10a      	bne.n	876a <__lesf2+0x5e>
    8754:	2d00      	cmp	r5, #0
    8756:	d108      	bne.n	876a <__lesf2+0x5e>
    8758:	4258      	negs	r0, r3
    875a:	2301      	movs	r3, #1
    875c:	4318      	orrs	r0, r3
    875e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8760:	2002      	movs	r0, #2
    8762:	2d00      	cmp	r5, #0
    8764:	d1fb      	bne.n	875e <__lesf2+0x52>
    8766:	2a00      	cmp	r2, #0
    8768:	d0e1      	beq.n	872e <__lesf2+0x22>
    876a:	428b      	cmp	r3, r1
    876c:	d1f4      	bne.n	8758 <__lesf2+0x4c>
    876e:	42a2      	cmp	r2, r4
    8770:	dcf2      	bgt.n	8758 <__lesf2+0x4c>
    8772:	db04      	blt.n	877e <__lesf2+0x72>
    8774:	42ae      	cmp	r6, r5
    8776:	d8ef      	bhi.n	8758 <__lesf2+0x4c>
    8778:	2000      	movs	r0, #0
    877a:	42ae      	cmp	r6, r5
    877c:	d2ef      	bcs.n	875e <__lesf2+0x52>
    877e:	4258      	negs	r0, r3
    8780:	4143      	adcs	r3, r0
    8782:	2001      	movs	r0, #1
    8784:	425b      	negs	r3, r3
    8786:	4318      	orrs	r0, r3
    8788:	e7e9      	b.n	875e <__lesf2+0x52>
    878a:	2d00      	cmp	r5, #0
    878c:	d1d3      	bne.n	8736 <__lesf2+0x2a>
    878e:	2000      	movs	r0, #0
    8790:	2f00      	cmp	r7, #0
    8792:	d1e4      	bne.n	875e <__lesf2+0x52>
    8794:	e7e0      	b.n	8758 <__lesf2+0x4c>
    8796:	46c0      	nop			; (mov r8, r8)

00008798 <__clzdi2>:
    8798:	b510      	push	{r4, lr}
    879a:	2900      	cmp	r1, #0
    879c:	d103      	bne.n	87a6 <__clzdi2+0xe>
    879e:	f7fd fef7 	bl	6590 <__clzsi2>
    87a2:	3020      	adds	r0, #32
    87a4:	e002      	b.n	87ac <__clzdi2+0x14>
    87a6:	1c08      	adds	r0, r1, #0
    87a8:	f7fd fef2 	bl	6590 <__clzsi2>
    87ac:	bd10      	pop	{r4, pc}
    87ae:	46c0      	nop			; (mov r8, r8)

000087b0 <__libc_init_array>:
    87b0:	4b0e      	ldr	r3, [pc, #56]	; (87ec <__libc_init_array+0x3c>)
    87b2:	b570      	push	{r4, r5, r6, lr}
    87b4:	2500      	movs	r5, #0
    87b6:	1c1e      	adds	r6, r3, #0
    87b8:	4c0d      	ldr	r4, [pc, #52]	; (87f0 <__libc_init_array+0x40>)
    87ba:	1ae4      	subs	r4, r4, r3
    87bc:	10a4      	asrs	r4, r4, #2
    87be:	42a5      	cmp	r5, r4
    87c0:	d004      	beq.n	87cc <__libc_init_array+0x1c>
    87c2:	00ab      	lsls	r3, r5, #2
    87c4:	58f3      	ldr	r3, [r6, r3]
    87c6:	4798      	blx	r3
    87c8:	3501      	adds	r5, #1
    87ca:	e7f8      	b.n	87be <__libc_init_array+0xe>
    87cc:	f000 f9bc 	bl	8b48 <_init>
    87d0:	4b08      	ldr	r3, [pc, #32]	; (87f4 <__libc_init_array+0x44>)
    87d2:	2500      	movs	r5, #0
    87d4:	1c1e      	adds	r6, r3, #0
    87d6:	4c08      	ldr	r4, [pc, #32]	; (87f8 <__libc_init_array+0x48>)
    87d8:	1ae4      	subs	r4, r4, r3
    87da:	10a4      	asrs	r4, r4, #2
    87dc:	42a5      	cmp	r5, r4
    87de:	d004      	beq.n	87ea <__libc_init_array+0x3a>
    87e0:	00ab      	lsls	r3, r5, #2
    87e2:	58f3      	ldr	r3, [r6, r3]
    87e4:	4798      	blx	r3
    87e6:	3501      	adds	r5, #1
    87e8:	e7f8      	b.n	87dc <__libc_init_array+0x2c>
    87ea:	bd70      	pop	{r4, r5, r6, pc}
    87ec:	00008b54 	.word	0x00008b54
    87f0:	00008b54 	.word	0x00008b54
    87f4:	00008b54 	.word	0x00008b54
    87f8:	00008b58 	.word	0x00008b58

000087fc <memcpy>:
    87fc:	2300      	movs	r3, #0
    87fe:	b510      	push	{r4, lr}
    8800:	4293      	cmp	r3, r2
    8802:	d003      	beq.n	880c <memcpy+0x10>
    8804:	5ccc      	ldrb	r4, [r1, r3]
    8806:	54c4      	strb	r4, [r0, r3]
    8808:	3301      	adds	r3, #1
    880a:	e7f9      	b.n	8800 <memcpy+0x4>
    880c:	bd10      	pop	{r4, pc}

0000880e <memset>:
    880e:	1c03      	adds	r3, r0, #0
    8810:	1882      	adds	r2, r0, r2
    8812:	4293      	cmp	r3, r2
    8814:	d002      	beq.n	881c <memset+0xe>
    8816:	7019      	strb	r1, [r3, #0]
    8818:	3301      	adds	r3, #1
    881a:	e7fa      	b.n	8812 <memset+0x4>
    881c:	4770      	bx	lr
    881e:	0000      	movs	r0, r0
    8820:	00000302 	.word	0x00000302
    8824:	00000562 	.word	0x00000562
    8828:	00000562 	.word	0x00000562
    882c:	00000562 	.word	0x00000562
    8830:	00000562 	.word	0x00000562
    8834:	00000562 	.word	0x00000562
    8838:	00000562 	.word	0x00000562
    883c:	00000562 	.word	0x00000562
    8840:	00000562 	.word	0x00000562
    8844:	00000562 	.word	0x00000562
    8848:	00000562 	.word	0x00000562
    884c:	00000562 	.word	0x00000562
    8850:	00000562 	.word	0x00000562
    8854:	00000562 	.word	0x00000562
    8858:	00000562 	.word	0x00000562
    885c:	00000562 	.word	0x00000562
    8860:	000002ea 	.word	0x000002ea
    8864:	00000562 	.word	0x00000562
    8868:	00000562 	.word	0x00000562
    886c:	00000562 	.word	0x00000562
    8870:	00000562 	.word	0x00000562
    8874:	00000562 	.word	0x00000562
    8878:	00000562 	.word	0x00000562
    887c:	00000562 	.word	0x00000562
    8880:	00000562 	.word	0x00000562
    8884:	00000562 	.word	0x00000562
    8888:	00000562 	.word	0x00000562
    888c:	00000562 	.word	0x00000562
    8890:	00000562 	.word	0x00000562
    8894:	00000562 	.word	0x00000562
    8898:	00000562 	.word	0x00000562
    889c:	00000562 	.word	0x00000562
    88a0:	000002fa 	.word	0x000002fa
    88a4:	00000562 	.word	0x00000562
    88a8:	00000562 	.word	0x00000562
    88ac:	00000562 	.word	0x00000562
    88b0:	00000562 	.word	0x00000562
    88b4:	00000562 	.word	0x00000562
    88b8:	00000562 	.word	0x00000562
    88bc:	00000562 	.word	0x00000562
    88c0:	00000562 	.word	0x00000562
    88c4:	00000562 	.word	0x00000562
    88c8:	00000562 	.word	0x00000562
    88cc:	00000562 	.word	0x00000562
    88d0:	00000562 	.word	0x00000562
    88d4:	00000562 	.word	0x00000562
    88d8:	00000562 	.word	0x00000562
    88dc:	00000562 	.word	0x00000562
    88e0:	000002f2 	.word	0x000002f2
    88e4:	0000030a 	.word	0x0000030a
    88e8:	000002d2 	.word	0x000002d2
    88ec:	000002e2 	.word	0x000002e2
    88f0:	000002da 	.word	0x000002da
    88f4:	00000002 	.word	0x00000002
    88f8:	00000003 	.word	0x00000003
    88fc:	00000028 	.word	0x00000028
    8900:	00000029 	.word	0x00000029
    8904:	00000004 	.word	0x00000004
    8908:	00000005 	.word	0x00000005
    890c:	00000006 	.word	0x00000006
    8910:	00000007 	.word	0x00000007
    8914:	00000020 	.word	0x00000020
    8918:	00000021 	.word	0x00000021
    891c:	00000022 	.word	0x00000022
    8920:	00000023 	.word	0x00000023
    8924:	00000024 	.word	0x00000024
    8928:	00000025 	.word	0x00000025
    892c:	00000026 	.word	0x00000026
    8930:	00000027 	.word	0x00000027
    8934:	00000008 	.word	0x00000008
    8938:	00000009 	.word	0x00000009
    893c:	0000000a 	.word	0x0000000a
    8940:	0000000b 	.word	0x0000000b
    8944:	42000800 	.word	0x42000800
    8948:	42000c00 	.word	0x42000c00
    894c:	42001000 	.word	0x42001000
    8950:	42001400 	.word	0x42001400
    8954:	42001800 	.word	0x42001800
    8958:	42001c00 	.word	0x42001c00
    895c:	0c0b0a09 	.word	0x0c0b0a09
    8960:	00000e0d 	.word	0x00000e0d
    8964:	0000268a 	.word	0x0000268a
    8968:	00002686 	.word	0x00002686
    896c:	00002686 	.word	0x00002686
    8970:	000026e6 	.word	0x000026e6
    8974:	000026e6 	.word	0x000026e6
    8978:	000026a0 	.word	0x000026a0
    897c:	00002690 	.word	0x00002690
    8980:	000026a6 	.word	0x000026a6
    8984:	000026d4 	.word	0x000026d4
    8988:	0000287c 	.word	0x0000287c
    898c:	0000285c 	.word	0x0000285c
    8990:	0000285c 	.word	0x0000285c
    8994:	000028e8 	.word	0x000028e8
    8998:	0000286e 	.word	0x0000286e
    899c:	0000288a 	.word	0x0000288a
    89a0:	00002860 	.word	0x00002860
    89a4:	00002898 	.word	0x00002898
    89a8:	000028d8 	.word	0x000028d8

000089ac <_tcc_gclk_ids>:
    89ac:	001b1a1a                                ....

000089b0 <_tcc_apbcmasks>:
    89b0:	00000100 00000200 00000400              ............

000089bc <_tcc_maxs>:
    89bc:	00ffffff 00ffffff 0000ffff              ............

000089c8 <_tcc_cc_nums>:
    89c8:	00020204                                ....

000089cc <_tcc_ow_nums>:
    89cc:	00020408                                ....

000089d0 <tcc_interrupt_vectors.12391>:
    89d0:	0011100f                                ....

000089d4 <_tcc_intflag>:
    89d4:	00000001 00000002 00000004 00000008     ................
    89e4:	00001000 00002000 00004000 00008000     ..... ...@......
    89f4:	00010000 00020000 00040000 00080000     ................
    8a04:	01020300 000045aa 000045b8 00004656     .....E...E..VF..
    8a14:	000046be 00004722                       .F.."G..

00008a1c <_usb_device_irq_bits>:
    8a1c:	00080004 00800070 01000001 00000200     ....p...........

00008a2c <_usb_endpoint_irq_bits>:
    8a2c:	60100c03 61766e49 2064696c 61746164     ...`Invalid data
    8a3c:	6e656c20 21687467 00000000 00006b8a      length!.....k..
    8a4c:	00006b52 00006b6e 00006b46 00006b6e     Rk..nk..Fk..nk..
    8a5c:	00006ab2 00006b6e 00006b46 00006b52     .j..nk..Fk..Rk..
    8a6c:	00006b52 00006ab2 00006b46 00006bf0     Rk...j..Fk...k..
    8a7c:	00006bf0 00006bf0 00006b74 00006b52     .k...k..tk..Rk..
    8a8c:	00006b52 00006c3a 00006b44 00006c3a     Rk..:l..Dk..:l..
    8a9c:	00006ab2 00006c3a 00006b44 00006b52     .j..:l..Dk..Rk..
    8aac:	00006b52 00006ab2 00006b44 00006bf0     Rk...j..Dk...k..
    8abc:	00006bf0 00006bf0 00006c1e 00006dde     .k...k...l...m..
    8acc:	00006dd6 00006dd6 00006dce 00006d20     .m...m...m.. m..
    8adc:	00006d20 00006dc4 00006dce 00006d20      m...m...m.. m..
    8aec:	00006dc4 00006d20 00006dce 00006d22     .m.. m...m.."m..
    8afc:	00006d22 00006d22 00006e68 00007538     "m.."m..hn..8u..
    8b0c:	00007426 0000750c 00007412 0000750c     &t...u...t...u..
    8b1c:	00007516 0000750c 00007412 00007426     .u...u...t..&t..
    8b2c:	00007426 00007516 00007412 0000741c     &t...u...t...t..
    8b3c:	0000741c 0000741c 0000777e              .t...t..~w..

00008b48 <_init>:
    8b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b4a:	46c0      	nop			; (mov r8, r8)
    8b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8b4e:	bc08      	pop	{r3}
    8b50:	469e      	mov	lr, r3
    8b52:	4770      	bx	lr

00008b54 <__init_array_start>:
    8b54:	000000dd 	.word	0x000000dd

00008b58 <_fini>:
    8b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8b5e:	bc08      	pop	{r3}
    8b60:	469e      	mov	lr, r3
    8b62:	4770      	bx	lr

00008b64 <__fini_array_start>:
    8b64:	000000b5 	.word	0x000000b5
